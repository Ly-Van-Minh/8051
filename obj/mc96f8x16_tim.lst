                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.14 #12827 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mc96f8x16_tim
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _SysTick_ISR
                                     12 	.globl _P37
                                     13 	.globl _P36
                                     14 	.globl _P35
                                     15 	.globl _P34
                                     16 	.globl _P33
                                     17 	.globl _P32
                                     18 	.globl _P31
                                     19 	.globl _P30
                                     20 	.globl _P27
                                     21 	.globl _P26
                                     22 	.globl _P25
                                     23 	.globl _P24
                                     24 	.globl _P23
                                     25 	.globl _P22
                                     26 	.globl _P21
                                     27 	.globl _P20
                                     28 	.globl _P17
                                     29 	.globl _P16
                                     30 	.globl _P15
                                     31 	.globl _P14
                                     32 	.globl _P13
                                     33 	.globl _P12
                                     34 	.globl _P11
                                     35 	.globl _P10
                                     36 	.globl _P07
                                     37 	.globl _P06
                                     38 	.globl _P05
                                     39 	.globl _P04
                                     40 	.globl _P03
                                     41 	.globl _P02
                                     42 	.globl _P01
                                     43 	.globl _P00
                                     44 	.globl _EO
                                     45 	.globl _DPH1
                                     46 	.globl _DPL1
                                     47 	.globl _DPH
                                     48 	.globl _DPL
                                     49 	.globl _SP
                                     50 	.globl _PSW
                                     51 	.globl _B
                                     52 	.globl _ACC
                                     53 	.globl _FMCR
                                     54 	.globl _FIDR
                                     55 	.globl _FSADRL
                                     56 	.globl _FSADRM
                                     57 	.globl _FSADRH
                                     58 	.globl _I2CSCHR
                                     59 	.globl _I2CSCLR
                                     60 	.globl _I2CSDHR
                                     61 	.globl _I2CDR
                                     62 	.globl _I2CSAR1
                                     63 	.globl _I2CSAR0
                                     64 	.globl _I2CSR
                                     65 	.globl _I2CCR
                                     66 	.globl _UARTDR
                                     67 	.globl _UARTBD
                                     68 	.globl _UARTST
                                     69 	.globl _UARTCR3
                                     70 	.globl _UARTCR2
                                     71 	.globl _UARTCR1
                                     72 	.globl _SPISR
                                     73 	.globl _SPIDR
                                     74 	.globl _SPICR
                                     75 	.globl _ADWIFRH
                                     76 	.globl _ADWIFRL
                                     77 	.globl _ADWCRH
                                     78 	.globl _ADWCRL
                                     79 	.globl _ADWRCR3
                                     80 	.globl _ADWRCR2
                                     81 	.globl _ADWRCR1
                                     82 	.globl _ADWRCR0
                                     83 	.globl _ADCDRH
                                     84 	.globl _ADCDRL
                                     85 	.globl _ADCCRH
                                     86 	.globl _ADCCRL
                                     87 	.globl _BUZCR
                                     88 	.globl _BUZDR
                                     89 	.globl _T2BDRH
                                     90 	.globl _T2BDRL
                                     91 	.globl _T2ADRH
                                     92 	.globl _T2ADRL
                                     93 	.globl _T2CRH
                                     94 	.globl _T2CRL
                                     95 	.globl _T1BDRH
                                     96 	.globl _T1BDRL
                                     97 	.globl _T1ADRH
                                     98 	.globl _T1ADRL
                                     99 	.globl _T1CRH
                                    100 	.globl _T1CRL
                                    101 	.globl _T0CDR
                                    102 	.globl _T0DR
                                    103 	.globl _T0CNT
                                    104 	.globl _T0CR
                                    105 	.globl _WTCR
                                    106 	.globl _WTCNT
                                    107 	.globl _WTDR
                                    108 	.globl _WDTCR
                                    109 	.globl _WDTCNT
                                    110 	.globl _WDTDR
                                    111 	.globl _LVICR
                                    112 	.globl _LVRCR
                                    113 	.globl _PCON
                                    114 	.globl _RSTFR
                                    115 	.globl _BITCR
                                    116 	.globl _BITCNT
                                    117 	.globl _OSCCR
                                    118 	.globl _SCCR
                                    119 	.globl _EIPOL2
                                    120 	.globl _EIPOL1
                                    121 	.globl _EIPOL0H
                                    122 	.globl _EIPOL0L
                                    123 	.globl _EIFLAG1
                                    124 	.globl _EIFLAG0
                                    125 	.globl _IIFLAG
                                    126 	.globl _IP1
                                    127 	.globl _IP
                                    128 	.globl _IE3
                                    129 	.globl _IE2
                                    130 	.globl _IE1
                                    131 	.globl _IE
                                    132 	.globl _P3FSR
                                    133 	.globl _P2FSR
                                    134 	.globl _P1FSRH
                                    135 	.globl _P1FSRL
                                    136 	.globl _P0FSR
                                    137 	.globl _P3PU
                                    138 	.globl _P3OD
                                    139 	.globl _P3IO
                                    140 	.globl _P3
                                    141 	.globl _P2PU
                                    142 	.globl _P2OD
                                    143 	.globl _P2IO
                                    144 	.globl _P2
                                    145 	.globl _P12DB
                                    146 	.globl _P1PU
                                    147 	.globl _P1OD
                                    148 	.globl _P1IO
                                    149 	.globl _P1
                                    150 	.globl _P03DB
                                    151 	.globl _P0PU
                                    152 	.globl _P0OD
                                    153 	.globl _P0IO
                                    154 	.globl _P0
                                    155 	.globl _Tick
                                    156 	.globl _CheckTimeout_PARM_2
                                    157 	.globl _SysTick_Init
                                    158 	.globl _GetTick
                                    159 	.globl _Delayms
                                    160 	.globl _CheckTimeout
                                    161 ;--------------------------------------------------------
                                    162 ; special function registers
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
      000000                        166 _P0::
      000000                        167 	.ds 1
      000001                        168 _P0IO::
      000001                        169 	.ds 1
      000002                        170 _P0OD::
      000002                        171 	.ds 1
      000003                        172 _P0PU::
      000003                        173 	.ds 1
      000004                        174 _P03DB::
      000004                        175 	.ds 1
      000005                        176 _P1::
      000005                        177 	.ds 1
      000006                        178 _P1IO::
      000006                        179 	.ds 1
      000007                        180 _P1OD::
      000007                        181 	.ds 1
      000008                        182 _P1PU::
      000008                        183 	.ds 1
      000009                        184 _P12DB::
      000009                        185 	.ds 1
      00000A                        186 _P2::
      00000A                        187 	.ds 1
      00000B                        188 _P2IO::
      00000B                        189 	.ds 1
      00000C                        190 _P2OD::
      00000C                        191 	.ds 1
      00000D                        192 _P2PU::
      00000D                        193 	.ds 1
      00000E                        194 _P3::
      00000E                        195 	.ds 1
      00000F                        196 _P3IO::
      00000F                        197 	.ds 1
      000010                        198 _P3OD::
      000010                        199 	.ds 1
      000011                        200 _P3PU::
      000011                        201 	.ds 1
      000012                        202 _P0FSR::
      000012                        203 	.ds 1
      000013                        204 _P1FSRL::
      000013                        205 	.ds 1
      000014                        206 _P1FSRH::
      000014                        207 	.ds 1
      000015                        208 _P2FSR::
      000015                        209 	.ds 1
      000016                        210 _P3FSR::
      000016                        211 	.ds 1
      000017                        212 _IE::
      000017                        213 	.ds 1
      000018                        214 _IE1::
      000018                        215 	.ds 1
      000019                        216 _IE2::
      000019                        217 	.ds 1
      00001A                        218 _IE3::
      00001A                        219 	.ds 1
      00001B                        220 _IP::
      00001B                        221 	.ds 1
      00001C                        222 _IP1::
      00001C                        223 	.ds 1
      00001D                        224 _IIFLAG::
      00001D                        225 	.ds 1
      00001E                        226 _EIFLAG0::
      00001E                        227 	.ds 1
      00001F                        228 _EIFLAG1::
      00001F                        229 	.ds 1
      000020                        230 _EIPOL0L::
      000020                        231 	.ds 1
      000021                        232 _EIPOL0H::
      000021                        233 	.ds 1
      000022                        234 _EIPOL1::
      000022                        235 	.ds 1
      000023                        236 _EIPOL2::
      000023                        237 	.ds 1
      000024                        238 _SCCR::
      000024                        239 	.ds 1
      000025                        240 _OSCCR::
      000025                        241 	.ds 1
      000026                        242 _BITCNT::
      000026                        243 	.ds 1
      000027                        244 _BITCR::
      000027                        245 	.ds 1
      000028                        246 _RSTFR::
      000028                        247 	.ds 1
      000029                        248 _PCON::
      000029                        249 	.ds 1
      00002A                        250 _LVRCR::
      00002A                        251 	.ds 1
      00002B                        252 _LVICR::
      00002B                        253 	.ds 1
      00002C                        254 _WDTDR::
      00002C                        255 	.ds 1
      00002D                        256 _WDTCNT::
      00002D                        257 	.ds 1
      00002E                        258 _WDTCR::
      00002E                        259 	.ds 1
      00002F                        260 _WTDR::
      00002F                        261 	.ds 1
      000030                        262 _WTCNT::
      000030                        263 	.ds 1
      000031                        264 _WTCR::
      000031                        265 	.ds 1
      000032                        266 _T0CR::
      000032                        267 	.ds 1
      000033                        268 _T0CNT::
      000033                        269 	.ds 1
      000034                        270 _T0DR::
      000034                        271 	.ds 1
      000035                        272 _T0CDR::
      000035                        273 	.ds 1
      000036                        274 _T1CRL::
      000036                        275 	.ds 1
      000037                        276 _T1CRH::
      000037                        277 	.ds 1
      000038                        278 _T1ADRL::
      000038                        279 	.ds 1
      000039                        280 _T1ADRH::
      000039                        281 	.ds 1
      00003A                        282 _T1BDRL::
      00003A                        283 	.ds 1
      00003B                        284 _T1BDRH::
      00003B                        285 	.ds 1
      00003C                        286 _T2CRL::
      00003C                        287 	.ds 1
      00003D                        288 _T2CRH::
      00003D                        289 	.ds 1
      00003E                        290 _T2ADRL::
      00003E                        291 	.ds 1
      00003F                        292 _T2ADRH::
      00003F                        293 	.ds 1
      000040                        294 _T2BDRL::
      000040                        295 	.ds 1
      000041                        296 _T2BDRH::
      000041                        297 	.ds 1
      000042                        298 _BUZDR::
      000042                        299 	.ds 1
      000043                        300 _BUZCR::
      000043                        301 	.ds 1
      000044                        302 _ADCCRL::
      000044                        303 	.ds 1
      000045                        304 _ADCCRH::
      000045                        305 	.ds 1
      000046                        306 _ADCDRL::
      000046                        307 	.ds 1
      000047                        308 _ADCDRH::
      000047                        309 	.ds 1
      000048                        310 _ADWRCR0::
      000048                        311 	.ds 1
      000049                        312 _ADWRCR1::
      000049                        313 	.ds 1
      00004A                        314 _ADWRCR2::
      00004A                        315 	.ds 1
      00004B                        316 _ADWRCR3::
      00004B                        317 	.ds 1
      00004C                        318 _ADWCRL::
      00004C                        319 	.ds 1
      00004D                        320 _ADWCRH::
      00004D                        321 	.ds 1
      00004E                        322 _ADWIFRL::
      00004E                        323 	.ds 1
      00004F                        324 _ADWIFRH::
      00004F                        325 	.ds 1
      000050                        326 _SPICR::
      000050                        327 	.ds 1
      000051                        328 _SPIDR::
      000051                        329 	.ds 1
      000052                        330 _SPISR::
      000052                        331 	.ds 1
      000053                        332 _UARTCR1::
      000053                        333 	.ds 1
      000054                        334 _UARTCR2::
      000054                        335 	.ds 1
      000055                        336 _UARTCR3::
      000055                        337 	.ds 1
      000056                        338 _UARTST::
      000056                        339 	.ds 1
      000057                        340 _UARTBD::
      000057                        341 	.ds 1
      000058                        342 _UARTDR::
      000058                        343 	.ds 1
      000059                        344 _I2CCR::
      000059                        345 	.ds 1
      00005A                        346 _I2CSR::
      00005A                        347 	.ds 1
      00005B                        348 _I2CSAR0::
      00005B                        349 	.ds 1
      00005C                        350 _I2CSAR1::
      00005C                        351 	.ds 1
      00005D                        352 _I2CDR::
      00005D                        353 	.ds 1
      00005E                        354 _I2CSDHR::
      00005E                        355 	.ds 1
      00005F                        356 _I2CSCLR::
      00005F                        357 	.ds 1
      000060                        358 _I2CSCHR::
      000060                        359 	.ds 1
      000061                        360 _FSADRH::
      000061                        361 	.ds 1
      000062                        362 _FSADRM::
      000062                        363 	.ds 1
      000063                        364 _FSADRL::
      000063                        365 	.ds 1
      000064                        366 _FIDR::
      000064                        367 	.ds 1
      000065                        368 _FMCR::
      000065                        369 	.ds 1
      000066                        370 _ACC::
      000066                        371 	.ds 1
      000067                        372 _B::
      000067                        373 	.ds 1
      000068                        374 _PSW::
      000068                        375 	.ds 1
      000069                        376 _SP::
      000069                        377 	.ds 1
      00006A                        378 _DPL::
      00006A                        379 	.ds 1
      00006B                        380 _DPH::
      00006B                        381 	.ds 1
      00006C                        382 _DPL1::
      00006C                        383 	.ds 1
      00006D                        384 _DPH1::
      00006D                        385 	.ds 1
      00006E                        386 _EO::
      00006E                        387 	.ds 1
                                    388 ;--------------------------------------------------------
                                    389 ; special function bits
                                    390 ;--------------------------------------------------------
                                    391 	.area RSEG    (ABS,DATA)
      000000                        392 	.org 0x0000
      000000                        393 _P00::
      000000                        394 	.ds 1
      000001                        395 _P01::
      000001                        396 	.ds 1
      000002                        397 _P02::
      000002                        398 	.ds 1
      000003                        399 _P03::
      000003                        400 	.ds 1
      000004                        401 _P04::
      000004                        402 	.ds 1
      000005                        403 _P05::
      000005                        404 	.ds 1
      000006                        405 _P06::
      000006                        406 	.ds 1
      000007                        407 _P07::
      000007                        408 	.ds 1
      000008                        409 _P10::
      000008                        410 	.ds 1
      000009                        411 _P11::
      000009                        412 	.ds 1
      00000A                        413 _P12::
      00000A                        414 	.ds 1
      00000B                        415 _P13::
      00000B                        416 	.ds 1
      00000C                        417 _P14::
      00000C                        418 	.ds 1
      00000D                        419 _P15::
      00000D                        420 	.ds 1
      00000E                        421 _P16::
      00000E                        422 	.ds 1
      00000F                        423 _P17::
      00000F                        424 	.ds 1
      000010                        425 _P20::
      000010                        426 	.ds 1
      000011                        427 _P21::
      000011                        428 	.ds 1
      000012                        429 _P22::
      000012                        430 	.ds 1
      000013                        431 _P23::
      000013                        432 	.ds 1
      000014                        433 _P24::
      000014                        434 	.ds 1
      000015                        435 _P25::
      000015                        436 	.ds 1
      000016                        437 _P26::
      000016                        438 	.ds 1
      000017                        439 _P27::
      000017                        440 	.ds 1
      000018                        441 _P30::
      000018                        442 	.ds 1
      000019                        443 _P31::
      000019                        444 	.ds 1
      00001A                        445 _P32::
      00001A                        446 	.ds 1
      00001B                        447 _P33::
      00001B                        448 	.ds 1
      00001C                        449 _P34::
      00001C                        450 	.ds 1
      00001D                        451 _P35::
      00001D                        452 	.ds 1
      00001E                        453 _P36::
      00001E                        454 	.ds 1
      00001F                        455 _P37::
      00001F                        456 	.ds 1
                                    457 ;--------------------------------------------------------
                                    458 ; overlayable register banks
                                    459 ;--------------------------------------------------------
                                    460 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        461 	.ds 8
                                    462 ;--------------------------------------------------------
                                    463 ; internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area DSEG    (DATA)
                                    466 ;--------------------------------------------------------
                                    467 ; overlayable items in internal ram 
                                    468 ;--------------------------------------------------------
                                    469 ;--------------------------------------------------------
                                    470 ; indirectly addressable internal ram data
                                    471 ;--------------------------------------------------------
                                    472 	.area ISEG    (DATA)
                                    473 ;--------------------------------------------------------
                                    474 ; absolute internal ram data
                                    475 ;--------------------------------------------------------
                                    476 	.area IABS    (ABS,DATA)
                                    477 	.area IABS    (ABS,DATA)
                                    478 ;--------------------------------------------------------
                                    479 ; bit data
                                    480 ;--------------------------------------------------------
                                    481 	.area BSEG    (BIT)
                                    482 ;--------------------------------------------------------
                                    483 ; paged external ram data
                                    484 ;--------------------------------------------------------
                                    485 	.area PSEG    (PAG,XDATA)
                                    486 ;--------------------------------------------------------
                                    487 ; external ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area XSEG    (XDATA)
      000000                        490 _Delayms_Timeout_65536_15:
      000000                        491 	.ds 2
      000002                        492 _CheckTimeout_PARM_2:
      000002                        493 	.ds 2
      000004                        494 _CheckTimeout_Start_65536_19:
      000004                        495 	.ds 2
      000006                        496 _CheckTimeout_ret_65536_20:
      000006                        497 	.ds 1
                                    498 ;--------------------------------------------------------
                                    499 ; absolute external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XABS    (ABS,XDATA)
                                    502 ;--------------------------------------------------------
                                    503 ; external initialized ram data
                                    504 ;--------------------------------------------------------
                                    505 	.area XISEG   (XDATA)
      000000                        506 _Tick::
      000000                        507 	.ds 2
                                    508 	.area HOME    (CODE)
                                    509 	.area GSINIT0 (CODE)
                                    510 	.area GSINIT1 (CODE)
                                    511 	.area GSINIT2 (CODE)
                                    512 	.area GSINIT3 (CODE)
                                    513 	.area GSINIT4 (CODE)
                                    514 	.area GSINIT5 (CODE)
                                    515 	.area GSINIT  (CODE)
                                    516 	.area GSFINAL (CODE)
                                    517 	.area CSEG    (CODE)
                                    518 ;--------------------------------------------------------
                                    519 ; global & static initialisations
                                    520 ;--------------------------------------------------------
                                    521 	.area HOME    (CODE)
                                    522 	.area GSINIT  (CODE)
                                    523 	.area GSFINAL (CODE)
                                    524 	.area GSINIT  (CODE)
                                    525 ;	./inc/mc96f8x16.h:37: sfr			P0			= 0x80;			// P0 Data Register
      000000 75*00 80         [24]  526 	mov	_P0,#0x80
                                    527 ;	./inc/mc96f8x16.h:47: sfr			P0IO		= 0xA1;			// P0 Direction Register
      000003 75*01 A1         [24]  528 	mov	_P0IO,#0xa1
                                    529 ;	./inc/mc96f8x16.h:48: sfr			P0OD		= 0x91;			// P0 Open-drain Selection Register
      000006 75*02 91         [24]  530 	mov	_P0OD,#0x91
                                    531 ;	./inc/mc96f8x16.h:49: sfr			P0PU		= 0xAC;			// P0 Pull-up Resistor Selection Register
      000009 75*03 AC         [24]  532 	mov	_P0PU,#0xac
                                    533 ;	./inc/mc96f8x16.h:50: sfr			P03DB		= 0xDE;			// P0/P3 Debounce Enable Register
      00000C 75*04 DE         [24]  534 	mov	_P03DB,#0xde
                                    535 ;	./inc/mc96f8x16.h:52: sfr			P1			= 0x88;			// P1 Data Register
      00000F 75*05 88         [24]  536 	mov	_P1,#0x88
                                    537 ;	./inc/mc96f8x16.h:62: sfr			P1IO		= 0xB1;			// P1 Direction Register
      000012 75*06 B1         [24]  538 	mov	_P1IO,#0xb1
                                    539 ;	./inc/mc96f8x16.h:63: sfr			P1OD		= 0x92;			// P1 Open-drain Selection Register
      000015 75*07 92         [24]  540 	mov	_P1OD,#0x92
                                    541 ;	./inc/mc96f8x16.h:64: sfr			P1PU		= 0xAD;			// P1 Pull-up Resistor Selection Register
      000018 75*08 AD         [24]  542 	mov	_P1PU,#0xad
                                    543 ;	./inc/mc96f8x16.h:65: sfr			P12DB		= 0xDF;			// P1/P2 Debounce Enable Register
      00001B 75*09 DF         [24]  544 	mov	_P12DB,#0xdf
                                    545 ;	./inc/mc96f8x16.h:67: sfr			P2			= 0x90;			// P2 Data Register
      00001E 75*0A 90         [24]  546 	mov	_P2,#0x90
                                    547 ;	./inc/mc96f8x16.h:77: sfr			P2IO		= 0xB9;			// P2 Direction Register
      000021 75*0B B9         [24]  548 	mov	_P2IO,#0xb9
                                    549 ;	./inc/mc96f8x16.h:78: sfr			P2OD		= 0x93;			// P2 Open-drain Selection Register
      000024 75*0C 93         [24]  550 	mov	_P2OD,#0x93
                                    551 ;	./inc/mc96f8x16.h:79: sfr			P2PU		= 0xAE;			// P2 Pull-up Resistor Selection Register
      000027 75*0D AE         [24]  552 	mov	_P2PU,#0xae
                                    553 ;	./inc/mc96f8x16.h:81: sfr			P3			= 0x98;			// P3 Data Register
      00002A 75*0E 98         [24]  554 	mov	_P3,#0x98
                                    555 ;	./inc/mc96f8x16.h:91: sfr			P3IO		= 0xC1;			// P3 Direction Register
      00002D 75*0F C1         [24]  556 	mov	_P3IO,#0xc1
                                    557 ;	./inc/mc96f8x16.h:92: sfr			P3OD		= 0x94;			// P3 Open-drain Selection Register
      000030 75*10 94         [24]  558 	mov	_P3OD,#0x94
                                    559 ;	./inc/mc96f8x16.h:93: sfr			P3PU		= 0xAF;			// P3 Pull-up Resistor Selection Register
      000033 75*11 AF         [24]  560 	mov	_P3PU,#0xaf
                                    561 ;	./inc/mc96f8x16.h:95: sfr			P0FSR		= 0xD3;			//P0 Function Selection Register
      000036 75*12 D3         [24]  562 	mov	_P0FSR,#0xd3
                                    563 ;	./inc/mc96f8x16.h:96: sfr			P1FSRL		= 0xD4;			//P1 Function Selection Low Register
      000039 75*13 D4         [24]  564 	mov	_P1FSRL,#0xd4
                                    565 ;	./inc/mc96f8x16.h:97: sfr			P1FSRH		= 0xD5;			//P1 Function Selection High Register
      00003C 75*14 D5         [24]  566 	mov	_P1FSRH,#0xd5
                                    567 ;	./inc/mc96f8x16.h:98: sfr			P2FSR		= 0xD6;			//P2 Function Selection Register
      00003F 75*15 D6         [24]  568 	mov	_P2FSR,#0xd6
                                    569 ;	./inc/mc96f8x16.h:99: sfr			P3FSR		= 0xD7;			//P3 Function Selection Register
      000042 75*16 D7         [24]  570 	mov	_P3FSR,#0xd7
                                    571 ;	./inc/mc96f8x16.h:102: sfr			IE			= 0xA8;			// Interrupt Enable Register 0
      000045 75*17 A8         [24]  572 	mov	_IE,#0xa8
                                    573 ;	./inc/mc96f8x16.h:103: sfr			IE1			= 0xA9;			// Interrupt Enable Register 1
      000048 75*18 A9         [24]  574 	mov	_IE1,#0xa9
                                    575 ;	./inc/mc96f8x16.h:104: sfr			IE2			= 0xAA;			// Interrupt Enable Register 2
      00004B 75*19 AA         [24]  576 	mov	_IE2,#0xaa
                                    577 ;	./inc/mc96f8x16.h:105: sfr			IE3			= 0xAB;			// Interrupt Enable Register 3
      00004E 75*1A AB         [24]  578 	mov	_IE3,#0xab
                                    579 ;	./inc/mc96f8x16.h:106: sfr			IP			= 0xB8;			// Interrupt Priority Register 0
      000051 75*1B B8         [24]  580 	mov	_IP,#0xb8
                                    581 ;	./inc/mc96f8x16.h:107: sfr			IP1			= 0xF8;			// Interrupt Priority Register 1
      000054 75*1C F8         [24]  582 	mov	_IP1,#0xf8
                                    583 ;	./inc/mc96f8x16.h:108: sfr			IIFLAG		= 0xA0;			// Internal Interrupt Flag Register
      000057 75*1D A0         [24]  584 	mov	_IIFLAG,#0xa0
                                    585 ;	./inc/mc96f8x16.h:109: sfr			EIFLAG0		= 0xC0;			// External Interrupt Flag 0 Register
      00005A 75*1E C0         [24]  586 	mov	_EIFLAG0,#0xc0
                                    587 ;	./inc/mc96f8x16.h:110: sfr			EIFLAG1		= 0xB0;			// External Interrupt Flag 1 Register
      00005D 75*1F B0         [24]  588 	mov	_EIFLAG1,#0xb0
                                    589 ;	./inc/mc96f8x16.h:111: sfr			EIPOL0L		= 0xA4;			// External Interrupt Polarity 0 Low Register
      000060 75*20 A4         [24]  590 	mov	_EIPOL0L,#0xa4
                                    591 ;	./inc/mc96f8x16.h:112: sfr			EIPOL0H		= 0xA5;			// External Interrupt Polarity 0 High Register
      000063 75*21 A5         [24]  592 	mov	_EIPOL0H,#0xa5
                                    593 ;	./inc/mc96f8x16.h:113: sfr			EIPOL1		= 0xA6;			// External Interrupt Polarity 1 Register
      000066 75*22 A6         [24]  594 	mov	_EIPOL1,#0xa6
                                    595 ;	./inc/mc96f8x16.h:114: sfr			EIPOL2		= 0xA7;			// External Interrupt Polarity 2 Register
      000069 75*23 A7         [24]  596 	mov	_EIPOL2,#0xa7
                                    597 ;	./inc/mc96f8x16.h:117: sfr			SCCR		= 0x8A;			// System Clock Control Register
      00006C 75*24 8A         [24]  598 	mov	_SCCR,#0x8a
                                    599 ;	./inc/mc96f8x16.h:118: sfr			OSCCR		= 0xC8;			// Oscillator Control Register
      00006F 75*25 C8         [24]  600 	mov	_OSCCR,#0xc8
                                    601 ;	./inc/mc96f8x16.h:119: sfr			BITCNT		= 0x8C;			// Basic Interval Timer Counter Register
      000072 75*26 8C         [24]  602 	mov	_BITCNT,#0x8c
                                    603 ;	./inc/mc96f8x16.h:120: sfr			BITCR		= 0x8B;			// Basic Interval Timer Control Register
      000075 75*27 8B         [24]  604 	mov	_BITCR,#0x8b
                                    605 ;	./inc/mc96f8x16.h:121: sfr			RSTFR		= 0xE8;			// Reset Flag Register
      000078 75*28 E8         [24]  606 	mov	_RSTFR,#0xe8
                                    607 ;	./inc/mc96f8x16.h:122: sfr			PCON		= 0x87;			// Power Control Register
      00007B 75*29 87         [24]  608 	mov	_PCON,#0x87
                                    609 ;	./inc/mc96f8x16.h:123: sfr			LVRCR		= 0xD8;			// Low Voltage Reset Control Register
      00007E 75*2A D8         [24]  610 	mov	_LVRCR,#0xd8
                                    611 ;	./inc/mc96f8x16.h:124: sfr			LVICR		= 0x86;			// Low Voltage Indicator Control Register
      000081 75*2B 86         [24]  612 	mov	_LVICR,#0x86
                                    613 ;	./inc/mc96f8x16.h:127: sfr			WDTDR		= 0x8E;			// Watch Dog Timer Data Register
      000084 75*2C 8E         [24]  614 	mov	_WDTDR,#0x8e
                                    615 ;	./inc/mc96f8x16.h:128: sfr			WDTCNT		= 0x8E;			// Watch Dog Timer Counter Register
      000087 75*2D 8E         [24]  616 	mov	_WDTCNT,#0x8e
                                    617 ;	./inc/mc96f8x16.h:129: sfr			WDTCR		= 0x8D;			// Watch Dog Timer Control Register
      00008A 75*2E 8D         [24]  618 	mov	_WDTCR,#0x8d
                                    619 ;	./inc/mc96f8x16.h:132: sfr			WTDR		= 0x89;			// Watch Timer Data Register
      00008D 75*2F 89         [24]  620 	mov	_WTDR,#0x89
                                    621 ;	./inc/mc96f8x16.h:133: sfr			WTCNT		= 0x89;			// Watch Timer Counter Register
      000090 75*30 89         [24]  622 	mov	_WTCNT,#0x89
                                    623 ;	./inc/mc96f8x16.h:134: sfr			WTCR		= 0x96;			// Watch Timer Control Register
      000093 75*31 96         [24]  624 	mov	_WTCR,#0x96
                                    625 ;	./inc/mc96f8x16.h:137: sfr			T0CR		= 0xB2;			// Timer 0 Control Register
      000096 75*32 B2         [24]  626 	mov	_T0CR,#0xb2
                                    627 ;	./inc/mc96f8x16.h:138: sfr			T0CNT		= 0xB3;			// Timer 0 Counter Register
      000099 75*33 B3         [24]  628 	mov	_T0CNT,#0xb3
                                    629 ;	./inc/mc96f8x16.h:139: sfr			T0DR		= 0xB4;			// Timer 0 Data Register
      00009C 75*34 B4         [24]  630 	mov	_T0DR,#0xb4
                                    631 ;	./inc/mc96f8x16.h:140: sfr			T0CDR		= 0xB4;			// Timer 0 Capture Data Register
      00009F 75*35 B4         [24]  632 	mov	_T0CDR,#0xb4
                                    633 ;	./inc/mc96f8x16.h:146: sfr			T1CRL		= 0xBA;			// Timer 1 Control Low Register
      0000A2 75*36 BA         [24]  634 	mov	_T1CRL,#0xba
                                    635 ;	./inc/mc96f8x16.h:147: sfr			T1CRH		= 0xBB;			// Timer 1 Control High Register
      0000A5 75*37 BB         [24]  636 	mov	_T1CRH,#0xbb
                                    637 ;	./inc/mc96f8x16.h:148: sfr			T1ADRL		= 0xBC;			// Timer 1 A Data Low Register
      0000A8 75*38 BC         [24]  638 	mov	_T1ADRL,#0xbc
                                    639 ;	./inc/mc96f8x16.h:149: sfr			T1ADRH		= 0xBD;			// Timer 1 A Data High Register
      0000AB 75*39 BD         [24]  640 	mov	_T1ADRH,#0xbd
                                    641 ;	./inc/mc96f8x16.h:150: sfr			T1BDRL		= 0xBE;			// Timer 1 B Data Low Register
      0000AE 75*3A BE         [24]  642 	mov	_T1BDRL,#0xbe
                                    643 ;	./inc/mc96f8x16.h:151: sfr			T1BDRH		= 0xBF;			// Timer 1 B Data High Register
      0000B1 75*3B BF         [24]  644 	mov	_T1BDRH,#0xbf
                                    645 ;	./inc/mc96f8x16.h:154: sfr			T2CRL		= 0xC2;			// Timer 2 Control Low Register
      0000B4 75*3C C2         [24]  646 	mov	_T2CRL,#0xc2
                                    647 ;	./inc/mc96f8x16.h:155: sfr			T2CRH		= 0xC3;			// Timer 2 Control High Register
      0000B7 75*3D C3         [24]  648 	mov	_T2CRH,#0xc3
                                    649 ;	./inc/mc96f8x16.h:156: sfr			T2ADRL		= 0xC4;			// Timer 2 A Data Low Register
      0000BA 75*3E C4         [24]  650 	mov	_T2ADRL,#0xc4
                                    651 ;	./inc/mc96f8x16.h:157: sfr			T2ADRH		= 0xC5;			// Timer 2 A Data High Register
      0000BD 75*3F C5         [24]  652 	mov	_T2ADRH,#0xc5
                                    653 ;	./inc/mc96f8x16.h:158: sfr			T2BDRL		= 0xC6;			// Timer 2 B Data Low Register
      0000C0 75*40 C6         [24]  654 	mov	_T2BDRL,#0xc6
                                    655 ;	./inc/mc96f8x16.h:159: sfr			T2BDRH		= 0xC7;			// Timer 2 B Data High Register
      0000C3 75*41 C7         [24]  656 	mov	_T2BDRH,#0xc7
                                    657 ;	./inc/mc96f8x16.h:162: sfr			BUZDR		= 0x8F;			// BUZZER Data Register
      0000C6 75*42 8F         [24]  658 	mov	_BUZDR,#0x8f
                                    659 ;	./inc/mc96f8x16.h:163: sfr			BUZCR		= 0x97;			// BUZZER Control Register
      0000C9 75*43 97         [24]  660 	mov	_BUZCR,#0x97
                                    661 ;	./inc/mc96f8x16.h:166: sfr			ADCCRL		= 0x9C;			// A/D Converter Control Low Register
      0000CC 75*44 9C         [24]  662 	mov	_ADCCRL,#0x9c
                                    663 ;	./inc/mc96f8x16.h:167: sfr			ADCCRH		= 0x9D;			// A/D Converter Control High Register
      0000CF 75*45 9D         [24]  664 	mov	_ADCCRH,#0x9d
                                    665 ;	./inc/mc96f8x16.h:168: sfr			ADCDRL		= 0x9E;			// A/D Converter Data Low Register
      0000D2 75*46 9E         [24]  666 	mov	_ADCDRL,#0x9e
                                    667 ;	./inc/mc96f8x16.h:169: sfr			ADCDRH		= 0x9F;			// A/D Converter Data High Register
      0000D5 75*47 9F         [24]  668 	mov	_ADCDRH,#0x9f
                                    669 ;	./inc/mc96f8x16.h:171: sfr			ADWRCR0		= 0xF2;			// ADC Wake-up Resistor Control Register 0
      0000D8 75*48 F2         [24]  670 	mov	_ADWRCR0,#0xf2
                                    671 ;	./inc/mc96f8x16.h:172: sfr			ADWRCR1		= 0xF3;			// ADC Wake-up Resistor Control Register 1
      0000DB 75*49 F3         [24]  672 	mov	_ADWRCR1,#0xf3
                                    673 ;	./inc/mc96f8x16.h:173: sfr			ADWRCR2		= 0xF4;			// ADC Wake-up Resistor Control Register 2
      0000DE 75*4A F4         [24]  674 	mov	_ADWRCR2,#0xf4
                                    675 ;	./inc/mc96f8x16.h:174: sfr			ADWRCR3		= 0xF5;			// ADC Wake-up Resistor Control Register 3
      0000E1 75*4B F5         [24]  676 	mov	_ADWRCR3,#0xf5
                                    677 ;	./inc/mc96f8x16.h:175: sfr			ADWCRL		= 0xF6;			// ADC Wake-up Control Low Register
      0000E4 75*4C F6         [24]  678 	mov	_ADWCRL,#0xf6
                                    679 ;	./inc/mc96f8x16.h:176: sfr			ADWCRH		= 0xF7;			// ADC Wake-up Control High Register
      0000E7 75*4D F7         [24]  680 	mov	_ADWCRH,#0xf7
                                    681 ;	./inc/mc96f8x16.h:177: sfr			ADWIFRL		= 0xDC;			// ADC Wake-up Interrupt Flag Low Register
      0000EA 75*4E DC         [24]  682 	mov	_ADWIFRL,#0xdc
                                    683 ;	./inc/mc96f8x16.h:178: sfr			ADWIFRH		= 0xDD;			// ADC Wake-up Interrupt Flag High Register
      0000ED 75*4F DD         [24]  684 	mov	_ADWIFRH,#0xdd
                                    685 ;	./inc/mc96f8x16.h:181: sfr			SPICR		= 0xB5;			// SPI Control Register
      0000F0 75*50 B5         [24]  686 	mov	_SPICR,#0xb5
                                    687 ;	./inc/mc96f8x16.h:182: sfr			SPIDR		= 0xB6;			// SPI Data Register
      0000F3 75*51 B6         [24]  688 	mov	_SPIDR,#0xb6
                                    689 ;	./inc/mc96f8x16.h:183: sfr			SPISR		= 0xB7;			// SPI Status Register
      0000F6 75*52 B7         [24]  690 	mov	_SPISR,#0xb7
                                    691 ;	./inc/mc96f8x16.h:186: sfr			UARTCR1		= 0xE2;			// UART Control Register 1
      0000F9 75*53 E2         [24]  692 	mov	_UARTCR1,#0xe2
                                    693 ;	./inc/mc96f8x16.h:187: sfr			UARTCR2		= 0xE3;			// UART Control Register 2
      0000FC 75*54 E3         [24]  694 	mov	_UARTCR2,#0xe3
                                    695 ;	./inc/mc96f8x16.h:188: sfr			UARTCR3		= 0xE4;			// UART Control Register 3
      0000FF 75*55 E4         [24]  696 	mov	_UARTCR3,#0xe4
                                    697 ;	./inc/mc96f8x16.h:189: sfr			UARTST		= 0xE5;			// UART Status Register
      000102 75*56 E5         [24]  698 	mov	_UARTST,#0xe5
                                    699 ;	./inc/mc96f8x16.h:190: sfr			UARTBD		= 0xE6;			// UART BaudRate Register
      000105 75*57 E6         [24]  700 	mov	_UARTBD,#0xe6
                                    701 ;	./inc/mc96f8x16.h:191: sfr			UARTDR		= 0xE7;			// UART Data Register
      000108 75*58 E7         [24]  702 	mov	_UARTDR,#0xe7
                                    703 ;	./inc/mc96f8x16.h:194: sfr			I2CCR		= 0xE9;			// I2C Control Register
      00010B 75*59 E9         [24]  704 	mov	_I2CCR,#0xe9
                                    705 ;	./inc/mc96f8x16.h:195: sfr			I2CSR		= 0xEA;			// I2C Status Register
      00010E 75*5A EA         [24]  706 	mov	_I2CSR,#0xea
                                    707 ;	./inc/mc96f8x16.h:196: sfr			I2CSAR0		= 0xEB;			// I2C Slave Address 0 Register
      000111 75*5B EB         [24]  708 	mov	_I2CSAR0,#0xeb
                                    709 ;	./inc/mc96f8x16.h:197: sfr			I2CSAR1		= 0xF1;			// I2C Slave Address 1 Register
      000114 75*5C F1         [24]  710 	mov	_I2CSAR1,#0xf1
                                    711 ;	./inc/mc96f8x16.h:198: sfr			I2CDR		= 0xEC;			// I2C Data Register
      000117 75*5D EC         [24]  712 	mov	_I2CDR,#0xec
                                    713 ;	./inc/mc96f8x16.h:199: sfr			I2CSDHR		= 0xED;			// I2C SDA Hold Time Register
      00011A 75*5E ED         [24]  714 	mov	_I2CSDHR,#0xed
                                    715 ;	./inc/mc96f8x16.h:200: sfr			I2CSCLR		= 0xEE;			// I2C SCL Low Period Register
      00011D 75*5F EE         [24]  716 	mov	_I2CSCLR,#0xee
                                    717 ;	./inc/mc96f8x16.h:201: sfr			I2CSCHR		= 0xEF;			// I2C SCL High Period Register
      000120 75*60 EF         [24]  718 	mov	_I2CSCHR,#0xef
                                    719 ;	./inc/mc96f8x16.h:204: sfr			FSADRH		= 0xFA;			// Flash Sector Address High Register
      000123 75*61 FA         [24]  720 	mov	_FSADRH,#0xfa
                                    721 ;	./inc/mc96f8x16.h:205: sfr			FSADRM		= 0xFB;			// Flash Sector Address Middle Register
      000126 75*62 FB         [24]  722 	mov	_FSADRM,#0xfb
                                    723 ;	./inc/mc96f8x16.h:206: sfr			FSADRL		= 0xFC;			// Flash Sector Address Low Register
      000129 75*63 FC         [24]  724 	mov	_FSADRL,#0xfc
                                    725 ;	./inc/mc96f8x16.h:207: sfr			FIDR		= 0xFD;			// Flash Identification Register
      00012C 75*64 FD         [24]  726 	mov	_FIDR,#0xfd
                                    727 ;	./inc/mc96f8x16.h:208: sfr			FMCR		= 0xFE;			// Flash Mode Control Register
      00012F 75*65 FE         [24]  728 	mov	_FMCR,#0xfe
                                    729 ;	./inc/mc96f8x16.h:210: sfr			ACC			= 0xE0;
      000132 75*66 E0         [24]  730 	mov	_ACC,#0xe0
                                    731 ;	./inc/mc96f8x16.h:211: sfr			B			= 0xF0;
      000135 75*67 F0         [24]  732 	mov	_B,#0xf0
                                    733 ;	./inc/mc96f8x16.h:212: sfr			PSW			= 0xD0;
      000138 75*68 D0         [24]  734 	mov	_PSW,#0xd0
                                    735 ;	./inc/mc96f8x16.h:213: sfr			SP			= 0x81;
      00013B 75*69 81         [24]  736 	mov	_SP,#0x81
                                    737 ;	./inc/mc96f8x16.h:214: sfr			DPL			= 0x82;
      00013E 75*6A 82         [24]  738 	mov	_DPL,#0x82
                                    739 ;	./inc/mc96f8x16.h:215: sfr			DPH			= 0x83;
      000141 75*6B 83         [24]  740 	mov	_DPH,#0x83
                                    741 ;	./inc/mc96f8x16.h:216: sfr			DPL1		= 0x84;
      000144 75*6C 84         [24]  742 	mov	_DPL1,#0x84
                                    743 ;	./inc/mc96f8x16.h:217: sfr			DPH1		= 0x85;
      000147 75*6D 85         [24]  744 	mov	_DPH1,#0x85
                                    745 ;	./inc/mc96f8x16.h:218: sfr			EO			= 0xA2;			// EXTENDED OPERATION REGISTER
      00014A 75*6E A2         [24]  746 	mov	_EO,#0xa2
                                    747 ;	./inc/mc96f8x16.h:38: sbit	P00			= 0x80;
                                    748 ;	assignBit
      00014D D2*00            [12]  749 	setb	_P00
                                    750 ;	./inc/mc96f8x16.h:39: sbit	P01			= 0x81;
                                    751 ;	assignBit
      00014F D2*01            [12]  752 	setb	_P01
                                    753 ;	./inc/mc96f8x16.h:40: sbit	P02			= 0x82;
                                    754 ;	assignBit
      000151 D2*02            [12]  755 	setb	_P02
                                    756 ;	./inc/mc96f8x16.h:41: sbit	P03			= 0x83;
                                    757 ;	assignBit
      000153 D2*03            [12]  758 	setb	_P03
                                    759 ;	./inc/mc96f8x16.h:42: sbit	P04			= 0x84;
                                    760 ;	assignBit
      000155 D2*04            [12]  761 	setb	_P04
                                    762 ;	./inc/mc96f8x16.h:43: sbit	P05			= 0x85;
                                    763 ;	assignBit
      000157 D2*05            [12]  764 	setb	_P05
                                    765 ;	./inc/mc96f8x16.h:44: sbit	P06			= 0x86;
                                    766 ;	assignBit
      000159 D2*06            [12]  767 	setb	_P06
                                    768 ;	./inc/mc96f8x16.h:45: sbit	P07			= 0x87;
                                    769 ;	assignBit
      00015B D2*07            [12]  770 	setb	_P07
                                    771 ;	./inc/mc96f8x16.h:53: sbit	P10			= 0x88;
                                    772 ;	assignBit
      00015D D2*08            [12]  773 	setb	_P10
                                    774 ;	./inc/mc96f8x16.h:54: sbit	P11			= 0x89;
                                    775 ;	assignBit
      00015F D2*09            [12]  776 	setb	_P11
                                    777 ;	./inc/mc96f8x16.h:55: sbit	P12			= 0x8A;
                                    778 ;	assignBit
      000161 D2*0A            [12]  779 	setb	_P12
                                    780 ;	./inc/mc96f8x16.h:56: sbit	P13			= 0x8B;
                                    781 ;	assignBit
      000163 D2*0B            [12]  782 	setb	_P13
                                    783 ;	./inc/mc96f8x16.h:57: sbit	P14			= 0x8C;
                                    784 ;	assignBit
      000165 D2*0C            [12]  785 	setb	_P14
                                    786 ;	./inc/mc96f8x16.h:58: sbit	P15			= 0x8D;
                                    787 ;	assignBit
      000167 D2*0D            [12]  788 	setb	_P15
                                    789 ;	./inc/mc96f8x16.h:59: sbit	P16			= 0x8E;
                                    790 ;	assignBit
      000169 D2*0E            [12]  791 	setb	_P16
                                    792 ;	./inc/mc96f8x16.h:60: sbit	P17			= 0x8F;
                                    793 ;	assignBit
      00016B D2*0F            [12]  794 	setb	_P17
                                    795 ;	./inc/mc96f8x16.h:68: sbit	P20			= 0x90;
                                    796 ;	assignBit
      00016D D2*10            [12]  797 	setb	_P20
                                    798 ;	./inc/mc96f8x16.h:69: sbit	P21			= 0x91;
                                    799 ;	assignBit
      00016F D2*11            [12]  800 	setb	_P21
                                    801 ;	./inc/mc96f8x16.h:70: sbit	P22			= 0x92;
                                    802 ;	assignBit
      000171 D2*12            [12]  803 	setb	_P22
                                    804 ;	./inc/mc96f8x16.h:71: sbit	P23			= 0x93;
                                    805 ;	assignBit
      000173 D2*13            [12]  806 	setb	_P23
                                    807 ;	./inc/mc96f8x16.h:72: sbit	P24			= 0x94;
                                    808 ;	assignBit
      000175 D2*14            [12]  809 	setb	_P24
                                    810 ;	./inc/mc96f8x16.h:73: sbit	P25			= 0x95;
                                    811 ;	assignBit
      000177 D2*15            [12]  812 	setb	_P25
                                    813 ;	./inc/mc96f8x16.h:74: sbit	P26			= 0x96;
                                    814 ;	assignBit
      000179 D2*16            [12]  815 	setb	_P26
                                    816 ;	./inc/mc96f8x16.h:75: sbit	P27			= 0x97;
                                    817 ;	assignBit
      00017B D2*17            [12]  818 	setb	_P27
                                    819 ;	./inc/mc96f8x16.h:82: sbit	P30			= 0x98;
                                    820 ;	assignBit
      00017D D2*18            [12]  821 	setb	_P30
                                    822 ;	./inc/mc96f8x16.h:83: sbit	P31			= 0x99;
                                    823 ;	assignBit
      00017F D2*19            [12]  824 	setb	_P31
                                    825 ;	./inc/mc96f8x16.h:84: sbit	P32			= 0x9A;
                                    826 ;	assignBit
      000181 D2*1A            [12]  827 	setb	_P32
                                    828 ;	./inc/mc96f8x16.h:85: sbit	P33			= 0x9B;
                                    829 ;	assignBit
      000183 D2*1B            [12]  830 	setb	_P33
                                    831 ;	./inc/mc96f8x16.h:86: sbit	P34			= 0x9C;
                                    832 ;	assignBit
      000185 D2*1C            [12]  833 	setb	_P34
                                    834 ;	./inc/mc96f8x16.h:87: sbit	P35			= 0x9D;
                                    835 ;	assignBit
      000187 D2*1D            [12]  836 	setb	_P35
                                    837 ;	./inc/mc96f8x16.h:88: sbit	P36			= 0x9E;
                                    838 ;	assignBit
      000189 D2*1E            [12]  839 	setb	_P36
                                    840 ;	./inc/mc96f8x16.h:89: sbit	P37			= 0x9F;
                                    841 ;	assignBit
      00018B D2*1F            [12]  842 	setb	_P37
                                    843 ;--------------------------------------------------------
                                    844 ; Home
                                    845 ;--------------------------------------------------------
                                    846 	.area HOME    (CODE)
                                    847 	.area HOME    (CODE)
                                    848 ;--------------------------------------------------------
                                    849 ; code
                                    850 ;--------------------------------------------------------
                                    851 	.area CSEG    (CODE)
                                    852 ;------------------------------------------------------------
                                    853 ;Allocation info for local variables in function 'SysTick_Init'
                                    854 ;------------------------------------------------------------
                                    855 ;	src/mc96f8x16_tim.c:6: void SysTick_Init(void)
                                    856 ;	-----------------------------------------
                                    857 ;	 function SysTick_Init
                                    858 ;	-----------------------------------------
      000000                        859 _SysTick_Init:
                           000007   860 	ar7 = 0x07
                           000006   861 	ar6 = 0x06
                           000005   862 	ar5 = 0x05
                           000004   863 	ar4 = 0x04
                           000003   864 	ar3 = 0x03
                           000002   865 	ar2 = 0x02
                           000001   866 	ar1 = 0x01
                           000000   867 	ar0 = 0x00
                                    868 ;	src/mc96f8x16_tim.c:8: BITCR = 0x00;
      000000 75*27 00         [24]  869 	mov	_BITCR,#0x00
                                    870 ;	src/mc96f8x16_tim.c:9: BITCR |= (BITCK_FX_DIV_1024 << 5u) | ((BCK_BIT2_OVFL << 0u) | BITCR_BCLR);
      000003 43*27 2A         [24]  871 	orl	_BITCR,#0x2a
                                    872 ;	src/mc96f8x16_tim.c:10: IE3 = (IE3 & 0x0F) | (0x10);
      000006 E5*1A            [12]  873 	mov	a,_IE3
      000008 54 0F            [12]  874 	anl	a,#0x0f
      00000A 44 10            [12]  875 	orl	a,#0x10
      00000C F5*1A            [12]  876 	mov	_IE3,a
                                    877 ;	src/mc96f8x16_tim.c:11: }
      00000E 22               [24]  878 	ret
                                    879 ;------------------------------------------------------------
                                    880 ;Allocation info for local variables in function 'GetTick'
                                    881 ;------------------------------------------------------------
                                    882 ;	src/mc96f8x16_tim.c:13: uint16_t GetTick(void)
                                    883 ;	-----------------------------------------
                                    884 ;	 function GetTick
                                    885 ;	-----------------------------------------
      00000F                        886 _GetTick:
                                    887 ;	src/mc96f8x16_tim.c:15: return Tick;
      00000F 90r00r00         [24]  888 	mov	dptr,#_Tick
      000012 E0               [24]  889 	movx	a,@dptr
      000013 FE               [12]  890 	mov	r6,a
      000014 A3               [24]  891 	inc	dptr
      000015 E0               [24]  892 	movx	a,@dptr
                                    893 ;	src/mc96f8x16_tim.c:16: }
      000016 8E 82            [24]  894 	mov	dpl,r6
      000018 F5 83            [12]  895 	mov	dph,a
      00001A 22               [24]  896 	ret
                                    897 ;------------------------------------------------------------
                                    898 ;Allocation info for local variables in function 'SysTick_ISR'
                                    899 ;------------------------------------------------------------
                                    900 ;	src/mc96f8x16_tim.c:18: void SysTick_ISR(void) __interrupt 23
                                    901 ;	-----------------------------------------
                                    902 ;	 function SysTick_ISR
                                    903 ;	-----------------------------------------
      00001B                        904 _SysTick_ISR:
      00001B C0 E0            [24]  905 	push	acc
      00001D C0 82            [24]  906 	push	dpl
      00001F C0 83            [24]  907 	push	dph
      000021 C0 07            [24]  908 	push	ar7
      000023 C0 06            [24]  909 	push	ar6
      000025 C0 D0            [24]  910 	push	psw
      000027 75 D0 00         [24]  911 	mov	psw,#0x00
                                    912 ;	src/mc96f8x16_tim.c:20: Tick++;
      00002A 90r00r00         [24]  913 	mov	dptr,#_Tick
      00002D E0               [24]  914 	movx	a,@dptr
      00002E FE               [12]  915 	mov	r6,a
      00002F A3               [24]  916 	inc	dptr
      000030 E0               [24]  917 	movx	a,@dptr
      000031 FF               [12]  918 	mov	r7,a
      000032 90r00r00         [24]  919 	mov	dptr,#_Tick
      000035 74 01            [12]  920 	mov	a,#0x01
      000037 2E               [12]  921 	add	a,r6
      000038 F0               [24]  922 	movx	@dptr,a
      000039 E4               [12]  923 	clr	a
      00003A 3F               [12]  924 	addc	a,r7
      00003B A3               [24]  925 	inc	dptr
      00003C F0               [24]  926 	movx	@dptr,a
                                    927 ;	src/mc96f8x16_tim.c:22: BITCR |= BITCR_BCLR;
      00003D 43*27 08         [24]  928 	orl	_BITCR,#0x08
                                    929 ;	src/mc96f8x16_tim.c:23: }
      000040 D0 D0            [24]  930 	pop	psw
      000042 D0 06            [24]  931 	pop	ar6
      000044 D0 07            [24]  932 	pop	ar7
      000046 D0 83            [24]  933 	pop	dph
      000048 D0 82            [24]  934 	pop	dpl
      00004A D0 E0            [24]  935 	pop	acc
      00004C 32               [24]  936 	reti
                                    937 ;	eliminated unneeded push/pop b
                                    938 ;------------------------------------------------------------
                                    939 ;Allocation info for local variables in function 'Delayms'
                                    940 ;------------------------------------------------------------
                                    941 ;Timeout                   Allocated with name '_Delayms_Timeout_65536_15'
                                    942 ;StartTick                 Allocated with name '_Delayms_StartTick_65536_16'
                                    943 ;------------------------------------------------------------
                                    944 ;	src/mc96f8x16_tim.c:25: void Delayms(uint16_t Timeout)
                                    945 ;	-----------------------------------------
                                    946 ;	 function Delayms
                                    947 ;	-----------------------------------------
      00004D                        948 _Delayms:
      00004D AF 83            [24]  949 	mov	r7,dph
      00004F E5 82            [12]  950 	mov	a,dpl
      000051 90r00r00         [24]  951 	mov	dptr,#_Delayms_Timeout_65536_15
      000054 F0               [24]  952 	movx	@dptr,a
      000055 EF               [12]  953 	mov	a,r7
      000056 A3               [24]  954 	inc	dptr
      000057 F0               [24]  955 	movx	@dptr,a
                                    956 ;	src/mc96f8x16_tim.c:27: uint16_t StartTick = GetTick();
      000058 12r00r0F         [24]  957 	lcall	_GetTick
      00005B AE 82            [24]  958 	mov	r6,dpl
      00005D AF 83            [24]  959 	mov	r7,dph
                                    960 ;	src/mc96f8x16_tim.c:28: if(StartTick + Timeout > StartTick)
      00005F 90r00r00         [24]  961 	mov	dptr,#_Delayms_Timeout_65536_15
      000062 E0               [24]  962 	movx	a,@dptr
      000063 FC               [12]  963 	mov	r4,a
      000064 A3               [24]  964 	inc	dptr
      000065 E0               [24]  965 	movx	a,@dptr
      000066 FD               [12]  966 	mov	r5,a
      000067 EC               [12]  967 	mov	a,r4
      000068 2E               [12]  968 	add	a,r6
      000069 FA               [12]  969 	mov	r2,a
      00006A ED               [12]  970 	mov	a,r5
      00006B 3F               [12]  971 	addc	a,r7
      00006C FB               [12]  972 	mov	r3,a
      00006D C3               [12]  973 	clr	c
      00006E EE               [12]  974 	mov	a,r6
      00006F 9A               [12]  975 	subb	a,r2
      000070 EF               [12]  976 	mov	a,r7
      000071 9B               [12]  977 	subb	a,r3
      000072 50 1E            [24]  978 	jnc	00115$
                                    979 ;	src/mc96f8x16_tim.c:30: while(GetTick() < StartTick + Timeout);
      000074 EC               [12]  980 	mov	a,r4
      000075 2E               [12]  981 	add	a,r6
      000076 FA               [12]  982 	mov	r2,a
      000077 ED               [12]  983 	mov	a,r5
      000078 3F               [12]  984 	addc	a,r7
      000079 FB               [12]  985 	mov	r3,a
      00007A                        986 00101$:
      00007A C0 03            [24]  987 	push	ar3
      00007C C0 02            [24]  988 	push	ar2
      00007E 12r00r0F         [24]  989 	lcall	_GetTick
      000081 A8 82            [24]  990 	mov	r0,dpl
      000083 A9 83            [24]  991 	mov	r1,dph
      000085 D0 02            [24]  992 	pop	ar2
      000087 D0 03            [24]  993 	pop	ar3
      000089 C3               [12]  994 	clr	c
      00008A E8               [12]  995 	mov	a,r0
      00008B 9A               [12]  996 	subb	a,r2
      00008C E9               [12]  997 	mov	a,r1
      00008D 9B               [12]  998 	subb	a,r3
      00008E 50 4E            [24]  999 	jnc	00111$
                                   1000 ;	src/mc96f8x16_tim.c:34: while((GetTick() < (Timeout - (0xFFFFU - StartTick))) || (GetTick() > StartTick));
      000090 80 E8            [24] 1001 	sjmp	00101$
      000092                       1002 00115$:
      000092 74 FF            [12] 1003 	mov	a,#0xff
      000094 C3               [12] 1004 	clr	c
      000095 9E               [12] 1005 	subb	a,r6
      000096 FA               [12] 1006 	mov	r2,a
      000097 74 FF            [12] 1007 	mov	a,#0xff
      000099 9F               [12] 1008 	subb	a,r7
      00009A FB               [12] 1009 	mov	r3,a
      00009B EC               [12] 1010 	mov	a,r4
      00009C C3               [12] 1011 	clr	c
      00009D 9A               [12] 1012 	subb	a,r2
      00009E FC               [12] 1013 	mov	r4,a
      00009F ED               [12] 1014 	mov	a,r5
      0000A0 9B               [12] 1015 	subb	a,r3
      0000A1 FD               [12] 1016 	mov	r5,a
      0000A2                       1017 00105$:
      0000A2 C0 07            [24] 1018 	push	ar7
      0000A4 C0 06            [24] 1019 	push	ar6
      0000A6 C0 05            [24] 1020 	push	ar5
      0000A8 C0 04            [24] 1021 	push	ar4
      0000AA 12r00r0F         [24] 1022 	lcall	_GetTick
      0000AD AA 82            [24] 1023 	mov	r2,dpl
      0000AF AB 83            [24] 1024 	mov	r3,dph
      0000B1 D0 04            [24] 1025 	pop	ar4
      0000B3 D0 05            [24] 1026 	pop	ar5
      0000B5 D0 06            [24] 1027 	pop	ar6
      0000B7 D0 07            [24] 1028 	pop	ar7
      0000B9 C3               [12] 1029 	clr	c
      0000BA EA               [12] 1030 	mov	a,r2
      0000BB 9C               [12] 1031 	subb	a,r4
      0000BC EB               [12] 1032 	mov	a,r3
      0000BD 9D               [12] 1033 	subb	a,r5
      0000BE 40 E2            [24] 1034 	jc	00105$
      0000C0 C0 07            [24] 1035 	push	ar7
      0000C2 C0 06            [24] 1036 	push	ar6
      0000C4 C0 05            [24] 1037 	push	ar5
      0000C6 C0 04            [24] 1038 	push	ar4
      0000C8 12r00r0F         [24] 1039 	lcall	_GetTick
      0000CB AA 82            [24] 1040 	mov	r2,dpl
      0000CD AB 83            [24] 1041 	mov	r3,dph
      0000CF D0 04            [24] 1042 	pop	ar4
      0000D1 D0 05            [24] 1043 	pop	ar5
      0000D3 D0 06            [24] 1044 	pop	ar6
      0000D5 D0 07            [24] 1045 	pop	ar7
      0000D7 C3               [12] 1046 	clr	c
      0000D8 EE               [12] 1047 	mov	a,r6
      0000D9 9A               [12] 1048 	subb	a,r2
      0000DA EF               [12] 1049 	mov	a,r7
      0000DB 9B               [12] 1050 	subb	a,r3
      0000DC 40 C4            [24] 1051 	jc	00105$
      0000DE                       1052 00111$:
                                   1053 ;	src/mc96f8x16_tim.c:36: }
      0000DE 22               [24] 1054 	ret
                                   1055 ;------------------------------------------------------------
                                   1056 ;Allocation info for local variables in function 'CheckTimeout'
                                   1057 ;------------------------------------------------------------
                                   1058 ;Timeout                   Allocated with name '_CheckTimeout_PARM_2'
                                   1059 ;Start                     Allocated with name '_CheckTimeout_Start_65536_19'
                                   1060 ;ret                       Allocated with name '_CheckTimeout_ret_65536_20'
                                   1061 ;------------------------------------------------------------
                                   1062 ;	src/mc96f8x16_tim.c:38: HAL_Status CheckTimeout(uint16_t Start, uint16_t Timeout)
                                   1063 ;	-----------------------------------------
                                   1064 ;	 function CheckTimeout
                                   1065 ;	-----------------------------------------
      0000DF                       1066 _CheckTimeout:
      0000DF AF 83            [24] 1067 	mov	r7,dph
      0000E1 E5 82            [12] 1068 	mov	a,dpl
      0000E3 90r00r04         [24] 1069 	mov	dptr,#_CheckTimeout_Start_65536_19
      0000E6 F0               [24] 1070 	movx	@dptr,a
      0000E7 EF               [12] 1071 	mov	a,r7
      0000E8 A3               [24] 1072 	inc	dptr
      0000E9 F0               [24] 1073 	movx	@dptr,a
                                   1074 ;	src/mc96f8x16_tim.c:41: if(Start + Timeout > Start)
      0000EA 90r00r02         [24] 1075 	mov	dptr,#_CheckTimeout_PARM_2
      0000ED E0               [24] 1076 	movx	a,@dptr
      0000EE FE               [12] 1077 	mov	r6,a
      0000EF A3               [24] 1078 	inc	dptr
      0000F0 E0               [24] 1079 	movx	a,@dptr
      0000F1 FF               [12] 1080 	mov	r7,a
      0000F2 90r00r04         [24] 1081 	mov	dptr,#_CheckTimeout_Start_65536_19
      0000F5 E0               [24] 1082 	movx	a,@dptr
      0000F6 FC               [12] 1083 	mov	r4,a
      0000F7 A3               [24] 1084 	inc	dptr
      0000F8 E0               [24] 1085 	movx	a,@dptr
      0000F9 FD               [12] 1086 	mov	r5,a
      0000FA EE               [12] 1087 	mov	a,r6
      0000FB 2C               [12] 1088 	add	a,r4
      0000FC FA               [12] 1089 	mov	r2,a
      0000FD EF               [12] 1090 	mov	a,r7
      0000FE 3D               [12] 1091 	addc	a,r5
      0000FF FB               [12] 1092 	mov	r3,a
      000100 C3               [12] 1093 	clr	c
      000101 EC               [12] 1094 	mov	a,r4
      000102 9A               [12] 1095 	subb	a,r2
      000103 ED               [12] 1096 	mov	a,r5
      000104 9B               [12] 1097 	subb	a,r3
      000105 50 34            [24] 1098 	jnc	00109$
                                   1099 ;	src/mc96f8x16_tim.c:43: if(GetTick() < (Start + Timeout))
      000107 C0 07            [24] 1100 	push	ar7
      000109 C0 06            [24] 1101 	push	ar6
      00010B C0 05            [24] 1102 	push	ar5
      00010D C0 04            [24] 1103 	push	ar4
      00010F 12r00r0F         [24] 1104 	lcall	_GetTick
      000112 AA 82            [24] 1105 	mov	r2,dpl
      000114 AB 83            [24] 1106 	mov	r3,dph
      000116 D0 04            [24] 1107 	pop	ar4
      000118 D0 05            [24] 1108 	pop	ar5
      00011A D0 06            [24] 1109 	pop	ar6
      00011C D0 07            [24] 1110 	pop	ar7
      00011E EE               [12] 1111 	mov	a,r6
      00011F 2C               [12] 1112 	add	a,r4
      000120 F8               [12] 1113 	mov	r0,a
      000121 EF               [12] 1114 	mov	a,r7
      000122 3D               [12] 1115 	addc	a,r5
      000123 F9               [12] 1116 	mov	r1,a
      000124 C3               [12] 1117 	clr	c
      000125 EA               [12] 1118 	mov	a,r2
      000126 98               [12] 1119 	subb	a,r0
      000127 EB               [12] 1120 	mov	a,r3
      000128 99               [12] 1121 	subb	a,r1
      000129 50 08            [24] 1122 	jnc	00102$
                                   1123 ;	src/mc96f8x16_tim.c:45: ret = HAL_OK;
      00012B 90r00r06         [24] 1124 	mov	dptr,#_CheckTimeout_ret_65536_20
      00012E 74 01            [12] 1125 	mov	a,#0x01
      000130 F0               [24] 1126 	movx	@dptr,a
      000131 80 5A            [24] 1127 	sjmp	00110$
      000133                       1128 00102$:
                                   1129 ;	src/mc96f8x16_tim.c:49: ret = HAL_TIMEOUT;
      000133 90r00r06         [24] 1130 	mov	dptr,#_CheckTimeout_ret_65536_20
      000136 74 02            [12] 1131 	mov	a,#0x02
      000138 F0               [24] 1132 	movx	@dptr,a
      000139 80 52            [24] 1133 	sjmp	00110$
      00013B                       1134 00109$:
                                   1135 ;	src/mc96f8x16_tim.c:54: if((GetTick() < (Timeout - (0xFFFFU - Start))) || (GetTick() > Start))
      00013B C0 07            [24] 1136 	push	ar7
      00013D C0 06            [24] 1137 	push	ar6
      00013F C0 05            [24] 1138 	push	ar5
      000141 C0 04            [24] 1139 	push	ar4
      000143 12r00r0F         [24] 1140 	lcall	_GetTick
      000146 AA 82            [24] 1141 	mov	r2,dpl
      000148 AB 83            [24] 1142 	mov	r3,dph
      00014A D0 04            [24] 1143 	pop	ar4
      00014C D0 05            [24] 1144 	pop	ar5
      00014E D0 06            [24] 1145 	pop	ar6
      000150 D0 07            [24] 1146 	pop	ar7
      000152 74 FF            [12] 1147 	mov	a,#0xff
      000154 C3               [12] 1148 	clr	c
      000155 9C               [12] 1149 	subb	a,r4
      000156 F8               [12] 1150 	mov	r0,a
      000157 74 FF            [12] 1151 	mov	a,#0xff
      000159 9D               [12] 1152 	subb	a,r5
      00015A F9               [12] 1153 	mov	r1,a
      00015B EE               [12] 1154 	mov	a,r6
      00015C C3               [12] 1155 	clr	c
      00015D 98               [12] 1156 	subb	a,r0
      00015E FE               [12] 1157 	mov	r6,a
      00015F EF               [12] 1158 	mov	a,r7
      000160 99               [12] 1159 	subb	a,r1
      000161 FF               [12] 1160 	mov	r7,a
      000162 C3               [12] 1161 	clr	c
      000163 EA               [12] 1162 	mov	a,r2
      000164 9E               [12] 1163 	subb	a,r6
      000165 EB               [12] 1164 	mov	a,r3
      000166 9F               [12] 1165 	subb	a,r7
      000167 40 16            [24] 1166 	jc	00104$
      000169 C0 05            [24] 1167 	push	ar5
      00016B C0 04            [24] 1168 	push	ar4
      00016D 12r00r0F         [24] 1169 	lcall	_GetTick
      000170 AE 82            [24] 1170 	mov	r6,dpl
      000172 AF 83            [24] 1171 	mov	r7,dph
      000174 D0 04            [24] 1172 	pop	ar4
      000176 D0 05            [24] 1173 	pop	ar5
      000178 C3               [12] 1174 	clr	c
      000179 EC               [12] 1175 	mov	a,r4
      00017A 9E               [12] 1176 	subb	a,r6
      00017B ED               [12] 1177 	mov	a,r5
      00017C 9F               [12] 1178 	subb	a,r7
      00017D 50 08            [24] 1179 	jnc	00105$
      00017F                       1180 00104$:
                                   1181 ;	src/mc96f8x16_tim.c:56: ret = HAL_OK;
      00017F 90r00r06         [24] 1182 	mov	dptr,#_CheckTimeout_ret_65536_20
      000182 74 01            [12] 1183 	mov	a,#0x01
      000184 F0               [24] 1184 	movx	@dptr,a
      000185 80 06            [24] 1185 	sjmp	00110$
      000187                       1186 00105$:
                                   1187 ;	src/mc96f8x16_tim.c:60: ret = HAL_TIMEOUT;
      000187 90r00r06         [24] 1188 	mov	dptr,#_CheckTimeout_ret_65536_20
      00018A 74 02            [12] 1189 	mov	a,#0x02
      00018C F0               [24] 1190 	movx	@dptr,a
      00018D                       1191 00110$:
                                   1192 ;	src/mc96f8x16_tim.c:63: return ret;
      00018D 90r00r06         [24] 1193 	mov	dptr,#_CheckTimeout_ret_65536_20
      000190 E0               [24] 1194 	movx	a,@dptr
                                   1195 ;	src/mc96f8x16_tim.c:64: }
      000191 F5 82            [12] 1196 	mov	dpl,a
      000193 22               [24] 1197 	ret
                                   1198 	.area CSEG    (CODE)
                                   1199 	.area CONST   (CODE)
                                   1200 	.area XINIT   (CODE)
      000000                       1201 __xinit__Tick:
      000000 00 00                 1202 	.byte #0x00, #0x00	; 0
                                   1203 	.area CABS    (ABS,CODE)
