                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.14 #12827 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mc96f8x16_i2c
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CheckTimeout
                                     12 	.globl _GetTick
                                     13 	.globl _P37
                                     14 	.globl _P36
                                     15 	.globl _P35
                                     16 	.globl _P34
                                     17 	.globl _P33
                                     18 	.globl _P32
                                     19 	.globl _P31
                                     20 	.globl _P30
                                     21 	.globl _P27
                                     22 	.globl _P26
                                     23 	.globl _P25
                                     24 	.globl _P24
                                     25 	.globl _P23
                                     26 	.globl _P22
                                     27 	.globl _P21
                                     28 	.globl _P20
                                     29 	.globl _P17
                                     30 	.globl _P16
                                     31 	.globl _P15
                                     32 	.globl _P14
                                     33 	.globl _P13
                                     34 	.globl _P12
                                     35 	.globl _P11
                                     36 	.globl _P10
                                     37 	.globl _P07
                                     38 	.globl _P06
                                     39 	.globl _P05
                                     40 	.globl _P04
                                     41 	.globl _P03
                                     42 	.globl _P02
                                     43 	.globl _P01
                                     44 	.globl _P00
                                     45 	.globl _EO
                                     46 	.globl _DPH1
                                     47 	.globl _DPL1
                                     48 	.globl _DPH
                                     49 	.globl _DPL
                                     50 	.globl _SP
                                     51 	.globl _PSW
                                     52 	.globl _B
                                     53 	.globl _ACC
                                     54 	.globl _FMCR
                                     55 	.globl _FIDR
                                     56 	.globl _FSADRL
                                     57 	.globl _FSADRM
                                     58 	.globl _FSADRH
                                     59 	.globl _I2CSCHR
                                     60 	.globl _I2CSCLR
                                     61 	.globl _I2CSDHR
                                     62 	.globl _I2CDR
                                     63 	.globl _I2CSAR1
                                     64 	.globl _I2CSAR0
                                     65 	.globl _I2CSR
                                     66 	.globl _I2CCR
                                     67 	.globl _UARTDR
                                     68 	.globl _UARTBD
                                     69 	.globl _UARTST
                                     70 	.globl _UARTCR3
                                     71 	.globl _UARTCR2
                                     72 	.globl _UARTCR1
                                     73 	.globl _SPISR
                                     74 	.globl _SPIDR
                                     75 	.globl _SPICR
                                     76 	.globl _ADWIFRH
                                     77 	.globl _ADWIFRL
                                     78 	.globl _ADWCRH
                                     79 	.globl _ADWCRL
                                     80 	.globl _ADWRCR3
                                     81 	.globl _ADWRCR2
                                     82 	.globl _ADWRCR1
                                     83 	.globl _ADWRCR0
                                     84 	.globl _ADCDRH
                                     85 	.globl _ADCDRL
                                     86 	.globl _ADCCRH
                                     87 	.globl _ADCCRL
                                     88 	.globl _BUZCR
                                     89 	.globl _BUZDR
                                     90 	.globl _T2BDRH
                                     91 	.globl _T2BDRL
                                     92 	.globl _T2ADRH
                                     93 	.globl _T2ADRL
                                     94 	.globl _T2CRH
                                     95 	.globl _T2CRL
                                     96 	.globl _T1BDRH
                                     97 	.globl _T1BDRL
                                     98 	.globl _T1ADRH
                                     99 	.globl _T1ADRL
                                    100 	.globl _T1CRH
                                    101 	.globl _T1CRL
                                    102 	.globl _T0CDR
                                    103 	.globl _T0DR
                                    104 	.globl _T0CNT
                                    105 	.globl _T0CR
                                    106 	.globl _WTCR
                                    107 	.globl _WTCNT
                                    108 	.globl _WTDR
                                    109 	.globl _WDTCR
                                    110 	.globl _WDTCNT
                                    111 	.globl _WDTDR
                                    112 	.globl _LVICR
                                    113 	.globl _LVRCR
                                    114 	.globl _PCON
                                    115 	.globl _RSTFR
                                    116 	.globl _BITCR
                                    117 	.globl _BITCNT
                                    118 	.globl _OSCCR
                                    119 	.globl _SCCR
                                    120 	.globl _EIPOL2
                                    121 	.globl _EIPOL1
                                    122 	.globl _EIPOL0H
                                    123 	.globl _EIPOL0L
                                    124 	.globl _EIFLAG1
                                    125 	.globl _EIFLAG0
                                    126 	.globl _IIFLAG
                                    127 	.globl _IP1
                                    128 	.globl _IP
                                    129 	.globl _IE3
                                    130 	.globl _IE2
                                    131 	.globl _IE1
                                    132 	.globl _IE
                                    133 	.globl _P3FSR
                                    134 	.globl _P2FSR
                                    135 	.globl _P1FSRH
                                    136 	.globl _P1FSRL
                                    137 	.globl _P0FSR
                                    138 	.globl _P3PU
                                    139 	.globl _P3OD
                                    140 	.globl _P3IO
                                    141 	.globl _P3
                                    142 	.globl _P2PU
                                    143 	.globl _P2OD
                                    144 	.globl _P2IO
                                    145 	.globl _P2
                                    146 	.globl _P12DB
                                    147 	.globl _P1PU
                                    148 	.globl _P1OD
                                    149 	.globl _P1IO
                                    150 	.globl _P1
                                    151 	.globl _P03DB
                                    152 	.globl _P0PU
                                    153 	.globl _P0OD
                                    154 	.globl _P0IO
                                    155 	.globl _P0
                                    156 	.globl _I2C_Master_Receive_PARM_4
                                    157 	.globl _I2C_Master_Receive_PARM_3
                                    158 	.globl _I2C_Master_Receive_PARM_2
                                    159 	.globl _I2C_Master_Transmit_PARM_4
                                    160 	.globl _I2C_Master_Transmit_PARM_3
                                    161 	.globl _I2C_Master_Transmit_PARM_2
                                    162 	.globl _I2C_Config
                                    163 	.globl _I2C_Master_Transmit
                                    164 	.globl _I2C_Master_Receive
                                    165 ;--------------------------------------------------------
                                    166 ; special function registers
                                    167 ;--------------------------------------------------------
                                    168 	.area RSEG    (ABS,DATA)
      000000                        169 	.org 0x0000
                           000080   170 _P0	=	0x0080
                           0000A1   171 _P0IO	=	0x00a1
                           000091   172 _P0OD	=	0x0091
                           0000AC   173 _P0PU	=	0x00ac
                           0000DE   174 _P03DB	=	0x00de
                           000088   175 _P1	=	0x0088
                           0000B1   176 _P1IO	=	0x00b1
                           000092   177 _P1OD	=	0x0092
                           0000AD   178 _P1PU	=	0x00ad
                           0000DF   179 _P12DB	=	0x00df
                           000090   180 _P2	=	0x0090
                           0000B9   181 _P2IO	=	0x00b9
                           000093   182 _P2OD	=	0x0093
                           0000AE   183 _P2PU	=	0x00ae
                           000098   184 _P3	=	0x0098
                           0000C1   185 _P3IO	=	0x00c1
                           000094   186 _P3OD	=	0x0094
                           0000AF   187 _P3PU	=	0x00af
                           0000D3   188 _P0FSR	=	0x00d3
                           0000D4   189 _P1FSRL	=	0x00d4
                           0000D5   190 _P1FSRH	=	0x00d5
                           0000D6   191 _P2FSR	=	0x00d6
                           0000D7   192 _P3FSR	=	0x00d7
                           0000A8   193 _IE	=	0x00a8
                           0000A9   194 _IE1	=	0x00a9
                           0000AA   195 _IE2	=	0x00aa
                           0000AB   196 _IE3	=	0x00ab
                           0000B8   197 _IP	=	0x00b8
                           0000F8   198 _IP1	=	0x00f8
                           0000A0   199 _IIFLAG	=	0x00a0
                           0000C0   200 _EIFLAG0	=	0x00c0
                           0000B0   201 _EIFLAG1	=	0x00b0
                           0000A4   202 _EIPOL0L	=	0x00a4
                           0000A5   203 _EIPOL0H	=	0x00a5
                           0000A6   204 _EIPOL1	=	0x00a6
                           0000A7   205 _EIPOL2	=	0x00a7
                           00008A   206 _SCCR	=	0x008a
                           0000C8   207 _OSCCR	=	0x00c8
                           00008C   208 _BITCNT	=	0x008c
                           00008B   209 _BITCR	=	0x008b
                           0000E8   210 _RSTFR	=	0x00e8
                           000087   211 _PCON	=	0x0087
                           0000D8   212 _LVRCR	=	0x00d8
                           000086   213 _LVICR	=	0x0086
                           00008E   214 _WDTDR	=	0x008e
                           00008E   215 _WDTCNT	=	0x008e
                           00008D   216 _WDTCR	=	0x008d
                           000089   217 _WTDR	=	0x0089
                           000089   218 _WTCNT	=	0x0089
                           000096   219 _WTCR	=	0x0096
                           0000B2   220 _T0CR	=	0x00b2
                           0000B3   221 _T0CNT	=	0x00b3
                           0000B4   222 _T0DR	=	0x00b4
                           0000B4   223 _T0CDR	=	0x00b4
                           0000BA   224 _T1CRL	=	0x00ba
                           0000BB   225 _T1CRH	=	0x00bb
                           0000BC   226 _T1ADRL	=	0x00bc
                           0000BD   227 _T1ADRH	=	0x00bd
                           0000BE   228 _T1BDRL	=	0x00be
                           0000BF   229 _T1BDRH	=	0x00bf
                           0000C2   230 _T2CRL	=	0x00c2
                           0000C3   231 _T2CRH	=	0x00c3
                           0000C4   232 _T2ADRL	=	0x00c4
                           0000C5   233 _T2ADRH	=	0x00c5
                           0000C6   234 _T2BDRL	=	0x00c6
                           0000C7   235 _T2BDRH	=	0x00c7
                           00008F   236 _BUZDR	=	0x008f
                           000097   237 _BUZCR	=	0x0097
                           00009C   238 _ADCCRL	=	0x009c
                           00009D   239 _ADCCRH	=	0x009d
                           00009E   240 _ADCDRL	=	0x009e
                           00009F   241 _ADCDRH	=	0x009f
                           0000F2   242 _ADWRCR0	=	0x00f2
                           0000F3   243 _ADWRCR1	=	0x00f3
                           0000F4   244 _ADWRCR2	=	0x00f4
                           0000F5   245 _ADWRCR3	=	0x00f5
                           0000F6   246 _ADWCRL	=	0x00f6
                           0000F7   247 _ADWCRH	=	0x00f7
                           0000DC   248 _ADWIFRL	=	0x00dc
                           0000DD   249 _ADWIFRH	=	0x00dd
                           0000B5   250 _SPICR	=	0x00b5
                           0000B6   251 _SPIDR	=	0x00b6
                           0000B7   252 _SPISR	=	0x00b7
                           0000E2   253 _UARTCR1	=	0x00e2
                           0000E3   254 _UARTCR2	=	0x00e3
                           0000E4   255 _UARTCR3	=	0x00e4
                           0000E5   256 _UARTST	=	0x00e5
                           0000E6   257 _UARTBD	=	0x00e6
                           0000E7   258 _UARTDR	=	0x00e7
                           0000E9   259 _I2CCR	=	0x00e9
                           0000EA   260 _I2CSR	=	0x00ea
                           0000EB   261 _I2CSAR0	=	0x00eb
                           0000F1   262 _I2CSAR1	=	0x00f1
                           0000EC   263 _I2CDR	=	0x00ec
                           0000ED   264 _I2CSDHR	=	0x00ed
                           0000EE   265 _I2CSCLR	=	0x00ee
                           0000EF   266 _I2CSCHR	=	0x00ef
                           0000FA   267 _FSADRH	=	0x00fa
                           0000FB   268 _FSADRM	=	0x00fb
                           0000FC   269 _FSADRL	=	0x00fc
                           0000FD   270 _FIDR	=	0x00fd
                           0000FE   271 _FMCR	=	0x00fe
                           0000E0   272 _ACC	=	0x00e0
                           0000F0   273 _B	=	0x00f0
                           0000D0   274 _PSW	=	0x00d0
                           000081   275 _SP	=	0x0081
                           000082   276 _DPL	=	0x0082
                           000083   277 _DPH	=	0x0083
                           000084   278 _DPL1	=	0x0084
                           000085   279 _DPH1	=	0x0085
                           0000A2   280 _EO	=	0x00a2
                                    281 ;--------------------------------------------------------
                                    282 ; special function bits
                                    283 ;--------------------------------------------------------
                                    284 	.area RSEG    (ABS,DATA)
      000000                        285 	.org 0x0000
                           000080   286 _P00	=	0x0080
                           000081   287 _P01	=	0x0081
                           000082   288 _P02	=	0x0082
                           000083   289 _P03	=	0x0083
                           000084   290 _P04	=	0x0084
                           000085   291 _P05	=	0x0085
                           000086   292 _P06	=	0x0086
                           000087   293 _P07	=	0x0087
                           000088   294 _P10	=	0x0088
                           000089   295 _P11	=	0x0089
                           00008A   296 _P12	=	0x008a
                           00008B   297 _P13	=	0x008b
                           00008C   298 _P14	=	0x008c
                           00008D   299 _P15	=	0x008d
                           00008E   300 _P16	=	0x008e
                           00008F   301 _P17	=	0x008f
                           000090   302 _P20	=	0x0090
                           000091   303 _P21	=	0x0091
                           000092   304 _P22	=	0x0092
                           000093   305 _P23	=	0x0093
                           000094   306 _P24	=	0x0094
                           000095   307 _P25	=	0x0095
                           000096   308 _P26	=	0x0096
                           000097   309 _P27	=	0x0097
                           000098   310 _P30	=	0x0098
                           000099   311 _P31	=	0x0099
                           00009A   312 _P32	=	0x009a
                           00009B   313 _P33	=	0x009b
                           00009C   314 _P34	=	0x009c
                           00009D   315 _P35	=	0x009d
                           00009E   316 _P36	=	0x009e
                           00009F   317 _P37	=	0x009f
                                    318 ;--------------------------------------------------------
                                    319 ; overlayable register banks
                                    320 ;--------------------------------------------------------
                                    321 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        322 	.ds 8
                                    323 ;--------------------------------------------------------
                                    324 ; internal ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area DSEG    (DATA)
                                    327 ;--------------------------------------------------------
                                    328 ; overlayable items in internal ram 
                                    329 ;--------------------------------------------------------
                                    330 ;--------------------------------------------------------
                                    331 ; indirectly addressable internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area ISEG    (DATA)
                                    334 ;--------------------------------------------------------
                                    335 ; absolute internal ram data
                                    336 ;--------------------------------------------------------
                                    337 	.area IABS    (ABS,DATA)
                                    338 	.area IABS    (ABS,DATA)
                                    339 ;--------------------------------------------------------
                                    340 ; bit data
                                    341 ;--------------------------------------------------------
                                    342 	.area BSEG    (BIT)
                                    343 ;--------------------------------------------------------
                                    344 ; paged external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area PSEG    (PAG,XDATA)
                                    347 ;--------------------------------------------------------
                                    348 ; external ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area XSEG    (XDATA)
      000100                        351 _I2C_Config_I2C_Conf_65536_23:
      000100                        352 	.ds 3
      000103                        353 _I2C_Master_Transmit_PARM_2:
      000103                        354 	.ds 1
      000104                        355 _I2C_Master_Transmit_PARM_3:
      000104                        356 	.ds 1
      000105                        357 _I2C_Master_Transmit_PARM_4:
      000105                        358 	.ds 2
      000107                        359 _I2C_Master_Transmit_DevAddr_65536_25:
      000107                        360 	.ds 1
      000108                        361 _I2C_Master_Receive_PARM_2:
      000108                        362 	.ds 1
      000109                        363 _I2C_Master_Receive_PARM_3:
      000109                        364 	.ds 3
      00010C                        365 _I2C_Master_Receive_PARM_4:
      00010C                        366 	.ds 2
      00010E                        367 _I2C_Master_Receive_DevAddr_65536_37:
      00010E                        368 	.ds 1
                                    369 ;--------------------------------------------------------
                                    370 ; absolute external ram data
                                    371 ;--------------------------------------------------------
                                    372 	.area XABS    (ABS,XDATA)
                                    373 ;--------------------------------------------------------
                                    374 ; external initialized ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XISEG   (XDATA)
                                    377 	.area HOME    (CODE)
                                    378 	.area GSINIT0 (CODE)
                                    379 	.area GSINIT1 (CODE)
                                    380 	.area GSINIT2 (CODE)
                                    381 	.area GSINIT3 (CODE)
                                    382 	.area GSINIT4 (CODE)
                                    383 	.area GSINIT5 (CODE)
                                    384 	.area GSINIT  (CODE)
                                    385 	.area GSFINAL (CODE)
                                    386 	.area CSEG    (CODE)
                                    387 ;--------------------------------------------------------
                                    388 ; global & static initialisations
                                    389 ;--------------------------------------------------------
                                    390 	.area HOME    (CODE)
                                    391 	.area GSINIT  (CODE)
                                    392 	.area GSFINAL (CODE)
                                    393 	.area GSINIT  (CODE)
                                    394 ;--------------------------------------------------------
                                    395 ; Home
                                    396 ;--------------------------------------------------------
                                    397 	.area HOME    (CODE)
                                    398 	.area HOME    (CODE)
                                    399 ;--------------------------------------------------------
                                    400 ; code
                                    401 ;--------------------------------------------------------
                                    402 	.area CSEG    (CODE)
                                    403 ;------------------------------------------------------------
                                    404 ;Allocation info for local variables in function 'I2C_Config'
                                    405 ;------------------------------------------------------------
                                    406 ;I2C_Conf                  Allocated with name '_I2C_Config_I2C_Conf_65536_23'
                                    407 ;------------------------------------------------------------
                                    408 ;	src/mc96f8x16_i2c.c:7: void I2C_Config(I2C_Config_Typedef *I2C_Conf)
                                    409 ;	-----------------------------------------
                                    410 ;	 function I2C_Config
                                    411 ;	-----------------------------------------
      000062                        412 _I2C_Config:
                           000007   413 	ar7 = 0x07
                           000006   414 	ar6 = 0x06
                           000005   415 	ar5 = 0x05
                           000004   416 	ar4 = 0x04
                           000003   417 	ar3 = 0x03
                           000002   418 	ar2 = 0x02
                           000001   419 	ar1 = 0x01
                           000000   420 	ar0 = 0x00
      000062 AF F0            [24]  421 	mov	r7,b
      000064 AE 83            [24]  422 	mov	r6,dph
      000066 E5 82            [12]  423 	mov	a,dpl
      000068 90 01 00         [24]  424 	mov	dptr,#_I2C_Config_I2C_Conf_65536_23
      00006B F0               [24]  425 	movx	@dptr,a
      00006C EE               [12]  426 	mov	a,r6
      00006D A3               [24]  427 	inc	dptr
      00006E F0               [24]  428 	movx	@dptr,a
      00006F EF               [12]  429 	mov	a,r7
      000070 A3               [24]  430 	inc	dptr
      000071 F0               [24]  431 	movx	@dptr,a
                                    432 ;	src/mc96f8x16_i2c.c:9: I2CCR = (I2CCR & ~I2CCR_IMASTER) | ((I2C_Conf->Mode) << 2u);
      000072 74 FB            [12]  433 	mov	a,#0xfb
      000074 55 E9            [12]  434 	anl	a,_I2CCR
      000076 FF               [12]  435 	mov	r7,a
      000077 90 01 00         [24]  436 	mov	dptr,#_I2C_Config_I2C_Conf_65536_23
      00007A E0               [24]  437 	movx	a,@dptr
      00007B FC               [12]  438 	mov	r4,a
      00007C A3               [24]  439 	inc	dptr
      00007D E0               [24]  440 	movx	a,@dptr
      00007E FD               [12]  441 	mov	r5,a
      00007F A3               [24]  442 	inc	dptr
      000080 E0               [24]  443 	movx	a,@dptr
      000081 FE               [12]  444 	mov	r6,a
      000082 8C 82            [24]  445 	mov	dpl,r4
      000084 8D 83            [24]  446 	mov	dph,r5
      000086 8E F0            [24]  447 	mov	b,r6
      000088 12 08 EE         [24]  448 	lcall	__gptrget
      00008B 25 E0            [12]  449 	add	a,acc
      00008D 25 E0            [12]  450 	add	a,acc
      00008F 4F               [12]  451 	orl	a,r7
      000090 F5 E9            [12]  452 	mov	_I2CCR,a
                                    453 ;	src/mc96f8x16_i2c.c:10: I2CSDHR = I2C_Conf->HoldTime;
      000092 74 01            [12]  454 	mov	a,#0x01
      000094 2C               [12]  455 	add	a,r4
      000095 FA               [12]  456 	mov	r2,a
      000096 E4               [12]  457 	clr	a
      000097 3D               [12]  458 	addc	a,r5
      000098 FB               [12]  459 	mov	r3,a
      000099 8E 07            [24]  460 	mov	ar7,r6
      00009B 8A 82            [24]  461 	mov	dpl,r2
      00009D 8B 83            [24]  462 	mov	dph,r3
      00009F 8F F0            [24]  463 	mov	b,r7
      0000A1 12 08 EE         [24]  464 	lcall	__gptrget
      0000A4 F5 ED            [12]  465 	mov	_I2CSDHR,a
                                    466 ;	src/mc96f8x16_i2c.c:11: I2CSCLR = (uint8_t)(I2C_Conf->Period);
      0000A6 74 02            [12]  467 	mov	a,#0x02
      0000A8 2C               [12]  468 	add	a,r4
      0000A9 FC               [12]  469 	mov	r4,a
      0000AA E4               [12]  470 	clr	a
      0000AB 3D               [12]  471 	addc	a,r5
      0000AC FD               [12]  472 	mov	r5,a
      0000AD 8C 82            [24]  473 	mov	dpl,r4
      0000AF 8D 83            [24]  474 	mov	dph,r5
      0000B1 8E F0            [24]  475 	mov	b,r6
      0000B3 12 08 EE         [24]  476 	lcall	__gptrget
      0000B6 F5 EE            [12]  477 	mov	_I2CSCLR,a
                                    478 ;	src/mc96f8x16_i2c.c:12: I2CSCHR = (uint8_t)((I2C_Conf->Period) >> 8u);
      0000B8 8C 82            [24]  479 	mov	dpl,r4
      0000BA 8D 83            [24]  480 	mov	dph,r5
      0000BC 8E F0            [24]  481 	mov	b,r6
      0000BE 12 08 EE         [24]  482 	lcall	__gptrget
      0000C1 A3               [24]  483 	inc	dptr
      0000C2 12 08 EE         [24]  484 	lcall	__gptrget
      0000C5 FD               [12]  485 	mov	r5,a
      0000C6 8D EF            [24]  486 	mov	_I2CSCHR,r5
                                    487 ;	src/mc96f8x16_i2c.c:13: I2CCR |= (I2CCR_ACKEN | I2CCR_IICEN);
      0000C8 43 E9 48         [24]  488 	orl	_I2CCR,#0x48
                                    489 ;	src/mc96f8x16_i2c.c:14: }
      0000CB 22               [24]  490 	ret
                                    491 ;------------------------------------------------------------
                                    492 ;Allocation info for local variables in function 'I2C_Master_Transmit'
                                    493 ;------------------------------------------------------------
                                    494 ;RegAddr                   Allocated with name '_I2C_Master_Transmit_PARM_2'
                                    495 ;Data                      Allocated with name '_I2C_Master_Transmit_PARM_3'
                                    496 ;Timeout                   Allocated with name '_I2C_Master_Transmit_PARM_4'
                                    497 ;DevAddr                   Allocated with name '_I2C_Master_Transmit_DevAddr_65536_25'
                                    498 ;StartTick                 Allocated with name '_I2C_Master_Transmit_StartTick_65536_26'
                                    499 ;------------------------------------------------------------
                                    500 ;	src/mc96f8x16_i2c.c:16: HAL_Status I2C_Master_Transmit(uint8_t DevAddr, uint8_t RegAddr, uint8_t Data,  uint16_t Timeout)
                                    501 ;	-----------------------------------------
                                    502 ;	 function I2C_Master_Transmit
                                    503 ;	-----------------------------------------
      0000CC                        504 _I2C_Master_Transmit:
      0000CC E5 82            [12]  505 	mov	a,dpl
      0000CE 90 01 07         [24]  506 	mov	dptr,#_I2C_Master_Transmit_DevAddr_65536_25
      0000D1 F0               [24]  507 	movx	@dptr,a
                                    508 ;	src/mc96f8x16_i2c.c:18: uint16_t StartTick = GetTick();
      0000D2 12 03 EF         [24]  509 	lcall	_GetTick
      0000D5 AE 82            [24]  510 	mov	r6,dpl
      0000D7 AF 83            [24]  511 	mov	r7,dph
                                    512 ;	src/mc96f8x16_i2c.c:19: I2CDR = (DevAddr << 1u);
      0000D9 90 01 07         [24]  513 	mov	dptr,#_I2C_Master_Transmit_DevAddr_65536_25
      0000DC E0               [24]  514 	movx	a,@dptr
      0000DD 25 E0            [12]  515 	add	a,acc
      0000DF F5 EC            [12]  516 	mov	_I2CDR,a
                                    517 ;	src/mc96f8x16_i2c.c:20: while ((I2CSR & I2CSR_BUSY))
      0000E1 90 01 05         [24]  518 	mov	dptr,#_I2C_Master_Transmit_PARM_4
      0000E4 E0               [24]  519 	movx	a,@dptr
      0000E5 FC               [12]  520 	mov	r4,a
      0000E6 A3               [24]  521 	inc	dptr
      0000E7 E0               [24]  522 	movx	a,@dptr
      0000E8 FD               [12]  523 	mov	r5,a
      0000E9                        524 00103$:
      0000E9 E5 EA            [12]  525 	mov	a,_I2CSR
      0000EB 30 E2 2A         [24]  526 	jnb	acc.2,00105$
                                    527 ;	src/mc96f8x16_i2c.c:22: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0000EE 90 01 1F         [24]  528 	mov	dptr,#_CheckTimeout_PARM_2
      0000F1 EC               [12]  529 	mov	a,r4
      0000F2 F0               [24]  530 	movx	@dptr,a
      0000F3 ED               [12]  531 	mov	a,r5
      0000F4 A3               [24]  532 	inc	dptr
      0000F5 F0               [24]  533 	movx	@dptr,a
      0000F6 8E 82            [24]  534 	mov	dpl,r6
      0000F8 8F 83            [24]  535 	mov	dph,r7
      0000FA C0 07            [24]  536 	push	ar7
      0000FC C0 06            [24]  537 	push	ar6
      0000FE C0 05            [24]  538 	push	ar5
      000100 C0 04            [24]  539 	push	ar4
      000102 12 04 BF         [24]  540 	lcall	_CheckTimeout
      000105 AB 82            [24]  541 	mov	r3,dpl
      000107 D0 04            [24]  542 	pop	ar4
      000109 D0 05            [24]  543 	pop	ar5
      00010B D0 06            [24]  544 	pop	ar6
      00010D D0 07            [24]  545 	pop	ar7
      00010F BB 01 02         [24]  546 	cjne	r3,#0x01,00179$
      000112 80 D5            [24]  547 	sjmp	00103$
      000114                        548 00179$:
                                    549 ;	src/mc96f8x16_i2c.c:24: return HAL_TIMEOUT;
      000114 75 82 02         [24]  550 	mov	dpl,#0x02
      000117 22               [24]  551 	ret
      000118                        552 00105$:
                                    553 ;	src/mc96f8x16_i2c.c:27: I2CCR |= I2CCR_STARTC;  /* Start transmit */
      000118 43 E9 01         [24]  554 	orl	_I2CCR,#0x01
                                    555 ;	src/mc96f8x16_i2c.c:28: while(!(I2CSR & I2CSR_RXACK))
      00011B 8C 02            [24]  556 	mov	ar2,r4
      00011D 8D 03            [24]  557 	mov	ar3,r5
      00011F                        558 00108$:
      00011F E5 EA            [12]  559 	mov	a,_I2CSR
      000121 20 E0 32         [24]  560 	jb	acc.0,00110$
                                    561 ;	src/mc96f8x16_i2c.c:30: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      000124 90 01 1F         [24]  562 	mov	dptr,#_CheckTimeout_PARM_2
      000127 EA               [12]  563 	mov	a,r2
      000128 F0               [24]  564 	movx	@dptr,a
      000129 EB               [12]  565 	mov	a,r3
      00012A A3               [24]  566 	inc	dptr
      00012B F0               [24]  567 	movx	@dptr,a
      00012C 8E 82            [24]  568 	mov	dpl,r6
      00012E 8F 83            [24]  569 	mov	dph,r7
      000130 C0 07            [24]  570 	push	ar7
      000132 C0 06            [24]  571 	push	ar6
      000134 C0 05            [24]  572 	push	ar5
      000136 C0 04            [24]  573 	push	ar4
      000138 C0 03            [24]  574 	push	ar3
      00013A C0 02            [24]  575 	push	ar2
      00013C 12 04 BF         [24]  576 	lcall	_CheckTimeout
      00013F A9 82            [24]  577 	mov	r1,dpl
      000141 D0 02            [24]  578 	pop	ar2
      000143 D0 03            [24]  579 	pop	ar3
      000145 D0 04            [24]  580 	pop	ar4
      000147 D0 05            [24]  581 	pop	ar5
      000149 D0 06            [24]  582 	pop	ar6
      00014B D0 07            [24]  583 	pop	ar7
      00014D B9 01 02         [24]  584 	cjne	r1,#0x01,00181$
      000150 80 CD            [24]  585 	sjmp	00108$
      000152                        586 00181$:
                                    587 ;	src/mc96f8x16_i2c.c:32: return HAL_TIMEOUT;
      000152 75 82 02         [24]  588 	mov	dpl,#0x02
      000155 22               [24]  589 	ret
      000156                        590 00110$:
                                    591 ;	src/mc96f8x16_i2c.c:35: if(!(I2CSR & I2CSR_MLOST))  /* Check I2C maintains bus mastership */
      000156 E5 EA            [12]  592 	mov	a,_I2CSR
      000158 20 E3 76         [24]  593 	jb	acc.3,00122$
                                    594 ;	src/mc96f8x16_i2c.c:37: I2CDR = RegAddr;
      00015B 90 01 03         [24]  595 	mov	dptr,#_I2C_Master_Transmit_PARM_2
      00015E E0               [24]  596 	movx	a,@dptr
      00015F F5 EC            [12]  597 	mov	_I2CDR,a
                                    598 ;	src/mc96f8x16_i2c.c:38: while(!(I2CSR & I2CSR_RXACK))
      000161 8C 02            [24]  599 	mov	ar2,r4
      000163 8D 03            [24]  600 	mov	ar3,r5
      000165                        601 00113$:
      000165 E5 EA            [12]  602 	mov	a,_I2CSR
      000167 20 E0 32         [24]  603 	jb	acc.0,00115$
                                    604 ;	src/mc96f8x16_i2c.c:40: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      00016A 90 01 1F         [24]  605 	mov	dptr,#_CheckTimeout_PARM_2
      00016D EA               [12]  606 	mov	a,r2
      00016E F0               [24]  607 	movx	@dptr,a
      00016F EB               [12]  608 	mov	a,r3
      000170 A3               [24]  609 	inc	dptr
      000171 F0               [24]  610 	movx	@dptr,a
      000172 8E 82            [24]  611 	mov	dpl,r6
      000174 8F 83            [24]  612 	mov	dph,r7
      000176 C0 07            [24]  613 	push	ar7
      000178 C0 06            [24]  614 	push	ar6
      00017A C0 05            [24]  615 	push	ar5
      00017C C0 04            [24]  616 	push	ar4
      00017E C0 03            [24]  617 	push	ar3
      000180 C0 02            [24]  618 	push	ar2
      000182 12 04 BF         [24]  619 	lcall	_CheckTimeout
      000185 A9 82            [24]  620 	mov	r1,dpl
      000187 D0 02            [24]  621 	pop	ar2
      000189 D0 03            [24]  622 	pop	ar3
      00018B D0 04            [24]  623 	pop	ar4
      00018D D0 05            [24]  624 	pop	ar5
      00018F D0 06            [24]  625 	pop	ar6
      000191 D0 07            [24]  626 	pop	ar7
      000193 B9 01 02         [24]  627 	cjne	r1,#0x01,00184$
      000196 80 CD            [24]  628 	sjmp	00113$
      000198                        629 00184$:
                                    630 ;	src/mc96f8x16_i2c.c:42: return HAL_TIMEOUT;
      000198 75 82 02         [24]  631 	mov	dpl,#0x02
      00019B 22               [24]  632 	ret
      00019C                        633 00115$:
                                    634 ;	src/mc96f8x16_i2c.c:45: I2CDR = Data;
      00019C 90 01 04         [24]  635 	mov	dptr,#_I2C_Master_Transmit_PARM_3
      00019F E0               [24]  636 	movx	a,@dptr
      0001A0 F5 EC            [12]  637 	mov	_I2CDR,a
                                    638 ;	src/mc96f8x16_i2c.c:46: while(!(I2CSR & I2CSR_RXACK))
      0001A2                        639 00118$:
      0001A2 E5 EA            [12]  640 	mov	a,_I2CSR
      0001A4 20 E0 2E         [24]  641 	jb	acc.0,00123$
                                    642 ;	src/mc96f8x16_i2c.c:48: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0001A7 90 01 1F         [24]  643 	mov	dptr,#_CheckTimeout_PARM_2
      0001AA EC               [12]  644 	mov	a,r4
      0001AB F0               [24]  645 	movx	@dptr,a
      0001AC ED               [12]  646 	mov	a,r5
      0001AD A3               [24]  647 	inc	dptr
      0001AE F0               [24]  648 	movx	@dptr,a
      0001AF 8E 82            [24]  649 	mov	dpl,r6
      0001B1 8F 83            [24]  650 	mov	dph,r7
      0001B3 C0 07            [24]  651 	push	ar7
      0001B5 C0 06            [24]  652 	push	ar6
      0001B7 C0 05            [24]  653 	push	ar5
      0001B9 C0 04            [24]  654 	push	ar4
      0001BB 12 04 BF         [24]  655 	lcall	_CheckTimeout
      0001BE AB 82            [24]  656 	mov	r3,dpl
      0001C0 D0 04            [24]  657 	pop	ar4
      0001C2 D0 05            [24]  658 	pop	ar5
      0001C4 D0 06            [24]  659 	pop	ar6
      0001C6 D0 07            [24]  660 	pop	ar7
      0001C8 BB 01 02         [24]  661 	cjne	r3,#0x01,00186$
      0001CB 80 D5            [24]  662 	sjmp	00118$
      0001CD                        663 00186$:
                                    664 ;	src/mc96f8x16_i2c.c:50: return HAL_TIMEOUT;
      0001CD 75 82 02         [24]  665 	mov	dpl,#0x02
      0001D0 22               [24]  666 	ret
      0001D1                        667 00122$:
                                    668 ;	src/mc96f8x16_i2c.c:56: return HAL_BUSY;
      0001D1 75 82 04         [24]  669 	mov	dpl,#0x04
      0001D4 22               [24]  670 	ret
      0001D5                        671 00123$:
                                    672 ;	src/mc96f8x16_i2c.c:58: I2CCR |= I2CCR_STOPC;   /* Stop transmit */
      0001D5 43 E9 02         [24]  673 	orl	_I2CCR,#0x02
                                    674 ;	src/mc96f8x16_i2c.c:59: I2CSR &= ~(I2CSR_GCALL | I2CSR_TEND | I2CSR_STOPD | I2CSR_SSEL | I2CSR_MLOST);  /* Clear interrupt bits */  
      0001D8 53 EA 07         [24]  675 	anl	_I2CSR,#0x07
                                    676 ;	src/mc96f8x16_i2c.c:60: return HAL_OK;
      0001DB 75 82 01         [24]  677 	mov	dpl,#0x01
                                    678 ;	src/mc96f8x16_i2c.c:61: }
      0001DE 22               [24]  679 	ret
                                    680 ;------------------------------------------------------------
                                    681 ;Allocation info for local variables in function 'I2C_Master_Receive'
                                    682 ;------------------------------------------------------------
                                    683 ;RegAddr                   Allocated with name '_I2C_Master_Receive_PARM_2'
                                    684 ;pData                     Allocated with name '_I2C_Master_Receive_PARM_3'
                                    685 ;Timeout                   Allocated with name '_I2C_Master_Receive_PARM_4'
                                    686 ;DevAddr                   Allocated with name '_I2C_Master_Receive_DevAddr_65536_37'
                                    687 ;StartTick                 Allocated with name '_I2C_Master_Receive_StartTick_65536_38'
                                    688 ;------------------------------------------------------------
                                    689 ;	src/mc96f8x16_i2c.c:63: HAL_Status I2C_Master_Receive(uint8_t DevAddr, uint8_t RegAddr, uint8_t *pData, uint16_t Timeout)
                                    690 ;	-----------------------------------------
                                    691 ;	 function I2C_Master_Receive
                                    692 ;	-----------------------------------------
      0001DF                        693 _I2C_Master_Receive:
      0001DF E5 82            [12]  694 	mov	a,dpl
      0001E1 90 01 0E         [24]  695 	mov	dptr,#_I2C_Master_Receive_DevAddr_65536_37
      0001E4 F0               [24]  696 	movx	@dptr,a
                                    697 ;	src/mc96f8x16_i2c.c:65: uint16_t StartTick = GetTick();
      0001E5 12 03 EF         [24]  698 	lcall	_GetTick
      0001E8 AE 82            [24]  699 	mov	r6,dpl
      0001EA AF 83            [24]  700 	mov	r7,dph
                                    701 ;	src/mc96f8x16_i2c.c:66: I2CDR = (DevAddr << 1u) | 0x01;
      0001EC 90 01 0E         [24]  702 	mov	dptr,#_I2C_Master_Receive_DevAddr_65536_37
      0001EF E0               [24]  703 	movx	a,@dptr
      0001F0 25 E0            [12]  704 	add	a,acc
      0001F2 FD               [12]  705 	mov	r5,a
      0001F3 74 01            [12]  706 	mov	a,#0x01
      0001F5 4D               [12]  707 	orl	a,r5
      0001F6 F5 EC            [12]  708 	mov	_I2CDR,a
                                    709 ;	src/mc96f8x16_i2c.c:67: while ((I2CSR & I2CSR_BUSY))
      0001F8 90 01 0C         [24]  710 	mov	dptr,#_I2C_Master_Receive_PARM_4
      0001FB E0               [24]  711 	movx	a,@dptr
      0001FC FC               [12]  712 	mov	r4,a
      0001FD A3               [24]  713 	inc	dptr
      0001FE E0               [24]  714 	movx	a,@dptr
      0001FF FD               [12]  715 	mov	r5,a
      000200                        716 00103$:
      000200 E5 EA            [12]  717 	mov	a,_I2CSR
      000202 30 E2 2A         [24]  718 	jnb	acc.2,00105$
                                    719 ;	src/mc96f8x16_i2c.c:69: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      000205 90 01 1F         [24]  720 	mov	dptr,#_CheckTimeout_PARM_2
      000208 EC               [12]  721 	mov	a,r4
      000209 F0               [24]  722 	movx	@dptr,a
      00020A ED               [12]  723 	mov	a,r5
      00020B A3               [24]  724 	inc	dptr
      00020C F0               [24]  725 	movx	@dptr,a
      00020D 8E 82            [24]  726 	mov	dpl,r6
      00020F 8F 83            [24]  727 	mov	dph,r7
      000211 C0 07            [24]  728 	push	ar7
      000213 C0 06            [24]  729 	push	ar6
      000215 C0 05            [24]  730 	push	ar5
      000217 C0 04            [24]  731 	push	ar4
      000219 12 04 BF         [24]  732 	lcall	_CheckTimeout
      00021C AB 82            [24]  733 	mov	r3,dpl
      00021E D0 04            [24]  734 	pop	ar4
      000220 D0 05            [24]  735 	pop	ar5
      000222 D0 06            [24]  736 	pop	ar6
      000224 D0 07            [24]  737 	pop	ar7
      000226 BB 01 02         [24]  738 	cjne	r3,#0x01,00179$
      000229 80 D5            [24]  739 	sjmp	00103$
      00022B                        740 00179$:
                                    741 ;	src/mc96f8x16_i2c.c:71: return HAL_TIMEOUT;
      00022B 75 82 02         [24]  742 	mov	dpl,#0x02
      00022E 22               [24]  743 	ret
      00022F                        744 00105$:
                                    745 ;	src/mc96f8x16_i2c.c:74: I2CCR |= I2CCR_STARTC;  /* Start transmit */
      00022F 43 E9 01         [24]  746 	orl	_I2CCR,#0x01
                                    747 ;	src/mc96f8x16_i2c.c:75: while(!(I2CSR & I2CSR_RXACK))
      000232 8C 02            [24]  748 	mov	ar2,r4
      000234 8D 03            [24]  749 	mov	ar3,r5
      000236                        750 00108$:
      000236 E5 EA            [12]  751 	mov	a,_I2CSR
      000238 20 E0 32         [24]  752 	jb	acc.0,00110$
                                    753 ;	src/mc96f8x16_i2c.c:77: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      00023B 90 01 1F         [24]  754 	mov	dptr,#_CheckTimeout_PARM_2
      00023E EA               [12]  755 	mov	a,r2
      00023F F0               [24]  756 	movx	@dptr,a
      000240 EB               [12]  757 	mov	a,r3
      000241 A3               [24]  758 	inc	dptr
      000242 F0               [24]  759 	movx	@dptr,a
      000243 8E 82            [24]  760 	mov	dpl,r6
      000245 8F 83            [24]  761 	mov	dph,r7
      000247 C0 07            [24]  762 	push	ar7
      000249 C0 06            [24]  763 	push	ar6
      00024B C0 05            [24]  764 	push	ar5
      00024D C0 04            [24]  765 	push	ar4
      00024F C0 03            [24]  766 	push	ar3
      000251 C0 02            [24]  767 	push	ar2
      000253 12 04 BF         [24]  768 	lcall	_CheckTimeout
      000256 A9 82            [24]  769 	mov	r1,dpl
      000258 D0 02            [24]  770 	pop	ar2
      00025A D0 03            [24]  771 	pop	ar3
      00025C D0 04            [24]  772 	pop	ar4
      00025E D0 05            [24]  773 	pop	ar5
      000260 D0 06            [24]  774 	pop	ar6
      000262 D0 07            [24]  775 	pop	ar7
      000264 B9 01 02         [24]  776 	cjne	r1,#0x01,00181$
      000267 80 CD            [24]  777 	sjmp	00108$
      000269                        778 00181$:
                                    779 ;	src/mc96f8x16_i2c.c:79: return HAL_TIMEOUT;
      000269 75 82 02         [24]  780 	mov	dpl,#0x02
      00026C 22               [24]  781 	ret
      00026D                        782 00110$:
                                    783 ;	src/mc96f8x16_i2c.c:82: if(!(I2CSR & I2CSR_MLOST))  /* Check I2C maintains bus mastership */
      00026D E5 EA            [12]  784 	mov	a,_I2CSR
      00026F 30 E3 03         [24]  785 	jnb	acc.3,00182$
      000272 02 02 FD         [24]  786 	ljmp	00122$
      000275                        787 00182$:
                                    788 ;	src/mc96f8x16_i2c.c:84: I2CDR = RegAddr;
      000275 90 01 08         [24]  789 	mov	dptr,#_I2C_Master_Receive_PARM_2
      000278 E0               [24]  790 	movx	a,@dptr
      000279 F5 EC            [12]  791 	mov	_I2CDR,a
                                    792 ;	src/mc96f8x16_i2c.c:85: while(!(I2CSR & I2CSR_RXACK))
      00027B 8C 02            [24]  793 	mov	ar2,r4
      00027D 8D 03            [24]  794 	mov	ar3,r5
      00027F                        795 00113$:
      00027F E5 EA            [12]  796 	mov	a,_I2CSR
      000281 20 E0 32         [24]  797 	jb	acc.0,00137$
                                    798 ;	src/mc96f8x16_i2c.c:87: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      000284 90 01 1F         [24]  799 	mov	dptr,#_CheckTimeout_PARM_2
      000287 EA               [12]  800 	mov	a,r2
      000288 F0               [24]  801 	movx	@dptr,a
      000289 EB               [12]  802 	mov	a,r3
      00028A A3               [24]  803 	inc	dptr
      00028B F0               [24]  804 	movx	@dptr,a
      00028C 8E 82            [24]  805 	mov	dpl,r6
      00028E 8F 83            [24]  806 	mov	dph,r7
      000290 C0 07            [24]  807 	push	ar7
      000292 C0 06            [24]  808 	push	ar6
      000294 C0 05            [24]  809 	push	ar5
      000296 C0 04            [24]  810 	push	ar4
      000298 C0 03            [24]  811 	push	ar3
      00029A C0 02            [24]  812 	push	ar2
      00029C 12 04 BF         [24]  813 	lcall	_CheckTimeout
      00029F A9 82            [24]  814 	mov	r1,dpl
      0002A1 D0 02            [24]  815 	pop	ar2
      0002A3 D0 03            [24]  816 	pop	ar3
      0002A5 D0 04            [24]  817 	pop	ar4
      0002A7 D0 05            [24]  818 	pop	ar5
      0002A9 D0 06            [24]  819 	pop	ar6
      0002AB D0 07            [24]  820 	pop	ar7
      0002AD B9 01 02         [24]  821 	cjne	r1,#0x01,00184$
      0002B0 80 CD            [24]  822 	sjmp	00113$
      0002B2                        823 00184$:
                                    824 ;	src/mc96f8x16_i2c.c:89: return HAL_TIMEOUT;
      0002B2 75 82 02         [24]  825 	mov	dpl,#0x02
                                    826 ;	src/mc96f8x16_i2c.c:92: while(!(I2CSR & I2CSR_TEND))
      0002B5 22               [24]  827 	ret
      0002B6                        828 00137$:
      0002B6                        829 00118$:
      0002B6 E5 EA            [12]  830 	mov	a,_I2CSR
      0002B8 20 E6 2A         [24]  831 	jb	acc.6,00120$
                                    832 ;	src/mc96f8x16_i2c.c:94: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0002BB 90 01 1F         [24]  833 	mov	dptr,#_CheckTimeout_PARM_2
      0002BE EC               [12]  834 	mov	a,r4
      0002BF F0               [24]  835 	movx	@dptr,a
      0002C0 ED               [12]  836 	mov	a,r5
      0002C1 A3               [24]  837 	inc	dptr
      0002C2 F0               [24]  838 	movx	@dptr,a
      0002C3 8E 82            [24]  839 	mov	dpl,r6
      0002C5 8F 83            [24]  840 	mov	dph,r7
      0002C7 C0 07            [24]  841 	push	ar7
      0002C9 C0 06            [24]  842 	push	ar6
      0002CB C0 05            [24]  843 	push	ar5
      0002CD C0 04            [24]  844 	push	ar4
      0002CF 12 04 BF         [24]  845 	lcall	_CheckTimeout
      0002D2 AB 82            [24]  846 	mov	r3,dpl
      0002D4 D0 04            [24]  847 	pop	ar4
      0002D6 D0 05            [24]  848 	pop	ar5
      0002D8 D0 06            [24]  849 	pop	ar6
      0002DA D0 07            [24]  850 	pop	ar7
      0002DC BB 01 02         [24]  851 	cjne	r3,#0x01,00186$
      0002DF 80 D5            [24]  852 	sjmp	00118$
      0002E1                        853 00186$:
                                    854 ;	src/mc96f8x16_i2c.c:96: return HAL_TIMEOUT;
      0002E1 75 82 02         [24]  855 	mov	dpl,#0x02
      0002E4 22               [24]  856 	ret
      0002E5                        857 00120$:
                                    858 ;	src/mc96f8x16_i2c.c:99: *pData = I2CDR;
      0002E5 90 01 09         [24]  859 	mov	dptr,#_I2C_Master_Receive_PARM_3
      0002E8 E0               [24]  860 	movx	a,@dptr
      0002E9 FD               [12]  861 	mov	r5,a
      0002EA A3               [24]  862 	inc	dptr
      0002EB E0               [24]  863 	movx	a,@dptr
      0002EC FE               [12]  864 	mov	r6,a
      0002ED A3               [24]  865 	inc	dptr
      0002EE E0               [24]  866 	movx	a,@dptr
      0002EF FF               [12]  867 	mov	r7,a
      0002F0 8D 82            [24]  868 	mov	dpl,r5
      0002F2 8E 83            [24]  869 	mov	dph,r6
      0002F4 8F F0            [24]  870 	mov	b,r7
      0002F6 E5 EC            [12]  871 	mov	a,_I2CDR
      0002F8 12 08 D3         [24]  872 	lcall	__gptrput
      0002FB 80 04            [24]  873 	sjmp	00123$
      0002FD                        874 00122$:
                                    875 ;	src/mc96f8x16_i2c.c:103: return HAL_BUSY;
      0002FD 75 82 04         [24]  876 	mov	dpl,#0x04
      000300 22               [24]  877 	ret
      000301                        878 00123$:
                                    879 ;	src/mc96f8x16_i2c.c:105: I2CCR |= I2CCR_STOPC;   /* Stop transmit */
      000301 43 E9 02         [24]  880 	orl	_I2CCR,#0x02
                                    881 ;	src/mc96f8x16_i2c.c:106: I2CSR &= ~(I2CSR_GCALL | I2CSR_TEND | I2CSR_STOPD | I2CSR_SSEL | I2CSR_MLOST);  /* Clear interrupt bits */  
      000304 53 EA 07         [24]  882 	anl	_I2CSR,#0x07
                                    883 ;	src/mc96f8x16_i2c.c:107: return HAL_OK;
      000307 75 82 01         [24]  884 	mov	dpl,#0x01
                                    885 ;	src/mc96f8x16_i2c.c:108: }
      00030A 22               [24]  886 	ret
                                    887 	.area CSEG    (CODE)
                                    888 	.area CONST   (CODE)
                                    889 	.area XINIT   (CODE)
                                    890 	.area CABS    (ABS,CODE)
