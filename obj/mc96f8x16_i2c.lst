                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.14 #12827 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mc96f8x16_i2c
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CheckTimeout
                                     12 	.globl _GetTick
                                     13 	.globl _P37
                                     14 	.globl _P36
                                     15 	.globl _P35
                                     16 	.globl _P34
                                     17 	.globl _P33
                                     18 	.globl _P32
                                     19 	.globl _P31
                                     20 	.globl _P30
                                     21 	.globl _P27
                                     22 	.globl _P26
                                     23 	.globl _P25
                                     24 	.globl _P24
                                     25 	.globl _P23
                                     26 	.globl _P22
                                     27 	.globl _P21
                                     28 	.globl _P20
                                     29 	.globl _P17
                                     30 	.globl _P16
                                     31 	.globl _P15
                                     32 	.globl _P14
                                     33 	.globl _P13
                                     34 	.globl _P12
                                     35 	.globl _P11
                                     36 	.globl _P10
                                     37 	.globl _P07
                                     38 	.globl _P06
                                     39 	.globl _P05
                                     40 	.globl _P04
                                     41 	.globl _P03
                                     42 	.globl _P02
                                     43 	.globl _P01
                                     44 	.globl _P00
                                     45 	.globl _EO
                                     46 	.globl _DPH1
                                     47 	.globl _DPL1
                                     48 	.globl _DPH
                                     49 	.globl _DPL
                                     50 	.globl _SP
                                     51 	.globl _PSW
                                     52 	.globl _B
                                     53 	.globl _ACC
                                     54 	.globl _FMCR
                                     55 	.globl _FIDR
                                     56 	.globl _FSADRL
                                     57 	.globl _FSADRM
                                     58 	.globl _FSADRH
                                     59 	.globl _I2CSCHR
                                     60 	.globl _I2CSCLR
                                     61 	.globl _I2CSDHR
                                     62 	.globl _I2CDR
                                     63 	.globl _I2CSAR1
                                     64 	.globl _I2CSAR0
                                     65 	.globl _I2CSR
                                     66 	.globl _I2CCR
                                     67 	.globl _UARTDR
                                     68 	.globl _UARTBD
                                     69 	.globl _UARTST
                                     70 	.globl _UARTCR3
                                     71 	.globl _UARTCR2
                                     72 	.globl _UARTCR1
                                     73 	.globl _SPISR
                                     74 	.globl _SPIDR
                                     75 	.globl _SPICR
                                     76 	.globl _ADWIFRH
                                     77 	.globl _ADWIFRL
                                     78 	.globl _ADWCRH
                                     79 	.globl _ADWCRL
                                     80 	.globl _ADWRCR3
                                     81 	.globl _ADWRCR2
                                     82 	.globl _ADWRCR1
                                     83 	.globl _ADWRCR0
                                     84 	.globl _ADCDRH
                                     85 	.globl _ADCDRL
                                     86 	.globl _ADCCRH
                                     87 	.globl _ADCCRL
                                     88 	.globl _BUZCR
                                     89 	.globl _BUZDR
                                     90 	.globl _T2BDRH
                                     91 	.globl _T2BDRL
                                     92 	.globl _T2ADRH
                                     93 	.globl _T2ADRL
                                     94 	.globl _T2CRH
                                     95 	.globl _T2CRL
                                     96 	.globl _T1BDRH
                                     97 	.globl _T1BDRL
                                     98 	.globl _T1ADRH
                                     99 	.globl _T1ADRL
                                    100 	.globl _T1CRH
                                    101 	.globl _T1CRL
                                    102 	.globl _T0CDR
                                    103 	.globl _T0DR
                                    104 	.globl _T0CNT
                                    105 	.globl _T0CR
                                    106 	.globl _WTCR
                                    107 	.globl _WTCNT
                                    108 	.globl _WTDR
                                    109 	.globl _WDTCR
                                    110 	.globl _WDTCNT
                                    111 	.globl _WDTDR
                                    112 	.globl _LVICR
                                    113 	.globl _LVRCR
                                    114 	.globl _PCON
                                    115 	.globl _RSTFR
                                    116 	.globl _BITCR
                                    117 	.globl _BITCNT
                                    118 	.globl _OSCCR
                                    119 	.globl _SCCR
                                    120 	.globl _EIPOL2
                                    121 	.globl _EIPOL1
                                    122 	.globl _EIPOL0H
                                    123 	.globl _EIPOL0L
                                    124 	.globl _EIFLAG1
                                    125 	.globl _EIFLAG0
                                    126 	.globl _IIFLAG
                                    127 	.globl _IP1
                                    128 	.globl _IP
                                    129 	.globl _IE3
                                    130 	.globl _IE2
                                    131 	.globl _IE1
                                    132 	.globl _IE
                                    133 	.globl _P3FSR
                                    134 	.globl _P2FSR
                                    135 	.globl _P1FSRH
                                    136 	.globl _P1FSRL
                                    137 	.globl _P0FSR
                                    138 	.globl _P3PU
                                    139 	.globl _P3OD
                                    140 	.globl _P3IO
                                    141 	.globl _P3
                                    142 	.globl _P2PU
                                    143 	.globl _P2OD
                                    144 	.globl _P2IO
                                    145 	.globl _P2
                                    146 	.globl _P12DB
                                    147 	.globl _P1PU
                                    148 	.globl _P1OD
                                    149 	.globl _P1IO
                                    150 	.globl _P1
                                    151 	.globl _P03DB
                                    152 	.globl _P0PU
                                    153 	.globl _P0OD
                                    154 	.globl _P0IO
                                    155 	.globl _P0
                                    156 	.globl _I2C_Master_Receive_PARM_4
                                    157 	.globl _I2C_Master_Receive_PARM_3
                                    158 	.globl _I2C_Master_Receive_PARM_2
                                    159 	.globl _I2C_Master_Transmit_PARM_4
                                    160 	.globl _I2C_Master_Transmit_PARM_3
                                    161 	.globl _I2C_Master_Transmit_PARM_2
                                    162 	.globl _I2C_Config
                                    163 	.globl _I2C_Master_Transmit
                                    164 	.globl _I2C_Master_Receive
                                    165 ;--------------------------------------------------------
                                    166 ; special function registers
                                    167 ;--------------------------------------------------------
                                    168 	.area RSEG    (ABS,DATA)
      000000                        169 	.org 0x0000
      000000                        170 _P0::
      000000                        171 	.ds 1
      000001                        172 _P0IO::
      000001                        173 	.ds 1
      000002                        174 _P0OD::
      000002                        175 	.ds 1
      000003                        176 _P0PU::
      000003                        177 	.ds 1
      000004                        178 _P03DB::
      000004                        179 	.ds 1
      000005                        180 _P1::
      000005                        181 	.ds 1
      000006                        182 _P1IO::
      000006                        183 	.ds 1
      000007                        184 _P1OD::
      000007                        185 	.ds 1
      000008                        186 _P1PU::
      000008                        187 	.ds 1
      000009                        188 _P12DB::
      000009                        189 	.ds 1
      00000A                        190 _P2::
      00000A                        191 	.ds 1
      00000B                        192 _P2IO::
      00000B                        193 	.ds 1
      00000C                        194 _P2OD::
      00000C                        195 	.ds 1
      00000D                        196 _P2PU::
      00000D                        197 	.ds 1
      00000E                        198 _P3::
      00000E                        199 	.ds 1
      00000F                        200 _P3IO::
      00000F                        201 	.ds 1
      000010                        202 _P3OD::
      000010                        203 	.ds 1
      000011                        204 _P3PU::
      000011                        205 	.ds 1
      000012                        206 _P0FSR::
      000012                        207 	.ds 1
      000013                        208 _P1FSRL::
      000013                        209 	.ds 1
      000014                        210 _P1FSRH::
      000014                        211 	.ds 1
      000015                        212 _P2FSR::
      000015                        213 	.ds 1
      000016                        214 _P3FSR::
      000016                        215 	.ds 1
      000017                        216 _IE::
      000017                        217 	.ds 1
      000018                        218 _IE1::
      000018                        219 	.ds 1
      000019                        220 _IE2::
      000019                        221 	.ds 1
      00001A                        222 _IE3::
      00001A                        223 	.ds 1
      00001B                        224 _IP::
      00001B                        225 	.ds 1
      00001C                        226 _IP1::
      00001C                        227 	.ds 1
      00001D                        228 _IIFLAG::
      00001D                        229 	.ds 1
      00001E                        230 _EIFLAG0::
      00001E                        231 	.ds 1
      00001F                        232 _EIFLAG1::
      00001F                        233 	.ds 1
      000020                        234 _EIPOL0L::
      000020                        235 	.ds 1
      000021                        236 _EIPOL0H::
      000021                        237 	.ds 1
      000022                        238 _EIPOL1::
      000022                        239 	.ds 1
      000023                        240 _EIPOL2::
      000023                        241 	.ds 1
      000024                        242 _SCCR::
      000024                        243 	.ds 1
      000025                        244 _OSCCR::
      000025                        245 	.ds 1
      000026                        246 _BITCNT::
      000026                        247 	.ds 1
      000027                        248 _BITCR::
      000027                        249 	.ds 1
      000028                        250 _RSTFR::
      000028                        251 	.ds 1
      000029                        252 _PCON::
      000029                        253 	.ds 1
      00002A                        254 _LVRCR::
      00002A                        255 	.ds 1
      00002B                        256 _LVICR::
      00002B                        257 	.ds 1
      00002C                        258 _WDTDR::
      00002C                        259 	.ds 1
      00002D                        260 _WDTCNT::
      00002D                        261 	.ds 1
      00002E                        262 _WDTCR::
      00002E                        263 	.ds 1
      00002F                        264 _WTDR::
      00002F                        265 	.ds 1
      000030                        266 _WTCNT::
      000030                        267 	.ds 1
      000031                        268 _WTCR::
      000031                        269 	.ds 1
      000032                        270 _T0CR::
      000032                        271 	.ds 1
      000033                        272 _T0CNT::
      000033                        273 	.ds 1
      000034                        274 _T0DR::
      000034                        275 	.ds 1
      000035                        276 _T0CDR::
      000035                        277 	.ds 1
      000036                        278 _T1CRL::
      000036                        279 	.ds 1
      000037                        280 _T1CRH::
      000037                        281 	.ds 1
      000038                        282 _T1ADRL::
      000038                        283 	.ds 1
      000039                        284 _T1ADRH::
      000039                        285 	.ds 1
      00003A                        286 _T1BDRL::
      00003A                        287 	.ds 1
      00003B                        288 _T1BDRH::
      00003B                        289 	.ds 1
      00003C                        290 _T2CRL::
      00003C                        291 	.ds 1
      00003D                        292 _T2CRH::
      00003D                        293 	.ds 1
      00003E                        294 _T2ADRL::
      00003E                        295 	.ds 1
      00003F                        296 _T2ADRH::
      00003F                        297 	.ds 1
      000040                        298 _T2BDRL::
      000040                        299 	.ds 1
      000041                        300 _T2BDRH::
      000041                        301 	.ds 1
      000042                        302 _BUZDR::
      000042                        303 	.ds 1
      000043                        304 _BUZCR::
      000043                        305 	.ds 1
      000044                        306 _ADCCRL::
      000044                        307 	.ds 1
      000045                        308 _ADCCRH::
      000045                        309 	.ds 1
      000046                        310 _ADCDRL::
      000046                        311 	.ds 1
      000047                        312 _ADCDRH::
      000047                        313 	.ds 1
      000048                        314 _ADWRCR0::
      000048                        315 	.ds 1
      000049                        316 _ADWRCR1::
      000049                        317 	.ds 1
      00004A                        318 _ADWRCR2::
      00004A                        319 	.ds 1
      00004B                        320 _ADWRCR3::
      00004B                        321 	.ds 1
      00004C                        322 _ADWCRL::
      00004C                        323 	.ds 1
      00004D                        324 _ADWCRH::
      00004D                        325 	.ds 1
      00004E                        326 _ADWIFRL::
      00004E                        327 	.ds 1
      00004F                        328 _ADWIFRH::
      00004F                        329 	.ds 1
      000050                        330 _SPICR::
      000050                        331 	.ds 1
      000051                        332 _SPIDR::
      000051                        333 	.ds 1
      000052                        334 _SPISR::
      000052                        335 	.ds 1
      000053                        336 _UARTCR1::
      000053                        337 	.ds 1
      000054                        338 _UARTCR2::
      000054                        339 	.ds 1
      000055                        340 _UARTCR3::
      000055                        341 	.ds 1
      000056                        342 _UARTST::
      000056                        343 	.ds 1
      000057                        344 _UARTBD::
      000057                        345 	.ds 1
      000058                        346 _UARTDR::
      000058                        347 	.ds 1
      000059                        348 _I2CCR::
      000059                        349 	.ds 1
      00005A                        350 _I2CSR::
      00005A                        351 	.ds 1
      00005B                        352 _I2CSAR0::
      00005B                        353 	.ds 1
      00005C                        354 _I2CSAR1::
      00005C                        355 	.ds 1
      00005D                        356 _I2CDR::
      00005D                        357 	.ds 1
      00005E                        358 _I2CSDHR::
      00005E                        359 	.ds 1
      00005F                        360 _I2CSCLR::
      00005F                        361 	.ds 1
      000060                        362 _I2CSCHR::
      000060                        363 	.ds 1
      000061                        364 _FSADRH::
      000061                        365 	.ds 1
      000062                        366 _FSADRM::
      000062                        367 	.ds 1
      000063                        368 _FSADRL::
      000063                        369 	.ds 1
      000064                        370 _FIDR::
      000064                        371 	.ds 1
      000065                        372 _FMCR::
      000065                        373 	.ds 1
      000066                        374 _ACC::
      000066                        375 	.ds 1
      000067                        376 _B::
      000067                        377 	.ds 1
      000068                        378 _PSW::
      000068                        379 	.ds 1
      000069                        380 _SP::
      000069                        381 	.ds 1
      00006A                        382 _DPL::
      00006A                        383 	.ds 1
      00006B                        384 _DPH::
      00006B                        385 	.ds 1
      00006C                        386 _DPL1::
      00006C                        387 	.ds 1
      00006D                        388 _DPH1::
      00006D                        389 	.ds 1
      00006E                        390 _EO::
      00006E                        391 	.ds 1
                                    392 ;--------------------------------------------------------
                                    393 ; special function bits
                                    394 ;--------------------------------------------------------
                                    395 	.area RSEG    (ABS,DATA)
      000000                        396 	.org 0x0000
      000000                        397 _P00::
      000000                        398 	.ds 1
      000001                        399 _P01::
      000001                        400 	.ds 1
      000002                        401 _P02::
      000002                        402 	.ds 1
      000003                        403 _P03::
      000003                        404 	.ds 1
      000004                        405 _P04::
      000004                        406 	.ds 1
      000005                        407 _P05::
      000005                        408 	.ds 1
      000006                        409 _P06::
      000006                        410 	.ds 1
      000007                        411 _P07::
      000007                        412 	.ds 1
      000008                        413 _P10::
      000008                        414 	.ds 1
      000009                        415 _P11::
      000009                        416 	.ds 1
      00000A                        417 _P12::
      00000A                        418 	.ds 1
      00000B                        419 _P13::
      00000B                        420 	.ds 1
      00000C                        421 _P14::
      00000C                        422 	.ds 1
      00000D                        423 _P15::
      00000D                        424 	.ds 1
      00000E                        425 _P16::
      00000E                        426 	.ds 1
      00000F                        427 _P17::
      00000F                        428 	.ds 1
      000010                        429 _P20::
      000010                        430 	.ds 1
      000011                        431 _P21::
      000011                        432 	.ds 1
      000012                        433 _P22::
      000012                        434 	.ds 1
      000013                        435 _P23::
      000013                        436 	.ds 1
      000014                        437 _P24::
      000014                        438 	.ds 1
      000015                        439 _P25::
      000015                        440 	.ds 1
      000016                        441 _P26::
      000016                        442 	.ds 1
      000017                        443 _P27::
      000017                        444 	.ds 1
      000018                        445 _P30::
      000018                        446 	.ds 1
      000019                        447 _P31::
      000019                        448 	.ds 1
      00001A                        449 _P32::
      00001A                        450 	.ds 1
      00001B                        451 _P33::
      00001B                        452 	.ds 1
      00001C                        453 _P34::
      00001C                        454 	.ds 1
      00001D                        455 _P35::
      00001D                        456 	.ds 1
      00001E                        457 _P36::
      00001E                        458 	.ds 1
      00001F                        459 _P37::
      00001F                        460 	.ds 1
                                    461 ;--------------------------------------------------------
                                    462 ; overlayable register banks
                                    463 ;--------------------------------------------------------
                                    464 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        465 	.ds 8
                                    466 ;--------------------------------------------------------
                                    467 ; internal ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area DSEG    (DATA)
                                    470 ;--------------------------------------------------------
                                    471 ; overlayable items in internal ram 
                                    472 ;--------------------------------------------------------
                                    473 ;--------------------------------------------------------
                                    474 ; indirectly addressable internal ram data
                                    475 ;--------------------------------------------------------
                                    476 	.area ISEG    (DATA)
                                    477 ;--------------------------------------------------------
                                    478 ; absolute internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area IABS    (ABS,DATA)
                                    481 	.area IABS    (ABS,DATA)
                                    482 ;--------------------------------------------------------
                                    483 ; bit data
                                    484 ;--------------------------------------------------------
                                    485 	.area BSEG    (BIT)
                                    486 ;--------------------------------------------------------
                                    487 ; paged external ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area PSEG    (PAG,XDATA)
                                    490 ;--------------------------------------------------------
                                    491 ; external ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area XSEG    (XDATA)
      000000                        494 _I2C_Config_I2C_Conf_65536_23:
      000000                        495 	.ds 3
      000003                        496 _I2C_Master_Transmit_PARM_2:
      000003                        497 	.ds 1
      000004                        498 _I2C_Master_Transmit_PARM_3:
      000004                        499 	.ds 1
      000005                        500 _I2C_Master_Transmit_PARM_4:
      000005                        501 	.ds 2
      000007                        502 _I2C_Master_Transmit_DevAddr_65536_25:
      000007                        503 	.ds 1
      000008                        504 _I2C_Master_Receive_PARM_2:
      000008                        505 	.ds 1
      000009                        506 _I2C_Master_Receive_PARM_3:
      000009                        507 	.ds 3
      00000C                        508 _I2C_Master_Receive_PARM_4:
      00000C                        509 	.ds 2
      00000E                        510 _I2C_Master_Receive_DevAddr_65536_37:
      00000E                        511 	.ds 1
                                    512 ;--------------------------------------------------------
                                    513 ; absolute external ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area XABS    (ABS,XDATA)
                                    516 ;--------------------------------------------------------
                                    517 ; external initialized ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XISEG   (XDATA)
                                    520 	.area HOME    (CODE)
                                    521 	.area GSINIT0 (CODE)
                                    522 	.area GSINIT1 (CODE)
                                    523 	.area GSINIT2 (CODE)
                                    524 	.area GSINIT3 (CODE)
                                    525 	.area GSINIT4 (CODE)
                                    526 	.area GSINIT5 (CODE)
                                    527 	.area GSINIT  (CODE)
                                    528 	.area GSFINAL (CODE)
                                    529 	.area CSEG    (CODE)
                                    530 ;--------------------------------------------------------
                                    531 ; global & static initialisations
                                    532 ;--------------------------------------------------------
                                    533 	.area HOME    (CODE)
                                    534 	.area GSINIT  (CODE)
                                    535 	.area GSFINAL (CODE)
                                    536 	.area GSINIT  (CODE)
                                    537 ;	./inc/mc96f8x16.h:37: sfr			P0			= 0x80;			// P0 Data Register
      000000 75*00 80         [24]  538 	mov	_P0,#0x80
                                    539 ;	./inc/mc96f8x16.h:47: sfr			P0IO		= 0xA1;			// P0 Direction Register
      000003 75*01 A1         [24]  540 	mov	_P0IO,#0xa1
                                    541 ;	./inc/mc96f8x16.h:48: sfr			P0OD		= 0x91;			// P0 Open-drain Selection Register
      000006 75*02 91         [24]  542 	mov	_P0OD,#0x91
                                    543 ;	./inc/mc96f8x16.h:49: sfr			P0PU		= 0xAC;			// P0 Pull-up Resistor Selection Register
      000009 75*03 AC         [24]  544 	mov	_P0PU,#0xac
                                    545 ;	./inc/mc96f8x16.h:50: sfr			P03DB		= 0xDE;			// P0/P3 Debounce Enable Register
      00000C 75*04 DE         [24]  546 	mov	_P03DB,#0xde
                                    547 ;	./inc/mc96f8x16.h:52: sfr			P1			= 0x88;			// P1 Data Register
      00000F 75*05 88         [24]  548 	mov	_P1,#0x88
                                    549 ;	./inc/mc96f8x16.h:62: sfr			P1IO		= 0xB1;			// P1 Direction Register
      000012 75*06 B1         [24]  550 	mov	_P1IO,#0xb1
                                    551 ;	./inc/mc96f8x16.h:63: sfr			P1OD		= 0x92;			// P1 Open-drain Selection Register
      000015 75*07 92         [24]  552 	mov	_P1OD,#0x92
                                    553 ;	./inc/mc96f8x16.h:64: sfr			P1PU		= 0xAD;			// P1 Pull-up Resistor Selection Register
      000018 75*08 AD         [24]  554 	mov	_P1PU,#0xad
                                    555 ;	./inc/mc96f8x16.h:65: sfr			P12DB		= 0xDF;			// P1/P2 Debounce Enable Register
      00001B 75*09 DF         [24]  556 	mov	_P12DB,#0xdf
                                    557 ;	./inc/mc96f8x16.h:67: sfr			P2			= 0x90;			// P2 Data Register
      00001E 75*0A 90         [24]  558 	mov	_P2,#0x90
                                    559 ;	./inc/mc96f8x16.h:77: sfr			P2IO		= 0xB9;			// P2 Direction Register
      000021 75*0B B9         [24]  560 	mov	_P2IO,#0xb9
                                    561 ;	./inc/mc96f8x16.h:78: sfr			P2OD		= 0x93;			// P2 Open-drain Selection Register
      000024 75*0C 93         [24]  562 	mov	_P2OD,#0x93
                                    563 ;	./inc/mc96f8x16.h:79: sfr			P2PU		= 0xAE;			// P2 Pull-up Resistor Selection Register
      000027 75*0D AE         [24]  564 	mov	_P2PU,#0xae
                                    565 ;	./inc/mc96f8x16.h:81: sfr			P3			= 0x98;			// P3 Data Register
      00002A 75*0E 98         [24]  566 	mov	_P3,#0x98
                                    567 ;	./inc/mc96f8x16.h:91: sfr			P3IO		= 0xC1;			// P3 Direction Register
      00002D 75*0F C1         [24]  568 	mov	_P3IO,#0xc1
                                    569 ;	./inc/mc96f8x16.h:92: sfr			P3OD		= 0x94;			// P3 Open-drain Selection Register
      000030 75*10 94         [24]  570 	mov	_P3OD,#0x94
                                    571 ;	./inc/mc96f8x16.h:93: sfr			P3PU		= 0xAF;			// P3 Pull-up Resistor Selection Register
      000033 75*11 AF         [24]  572 	mov	_P3PU,#0xaf
                                    573 ;	./inc/mc96f8x16.h:95: sfr			P0FSR		= 0xD3;			//P0 Function Selection Register
      000036 75*12 D3         [24]  574 	mov	_P0FSR,#0xd3
                                    575 ;	./inc/mc96f8x16.h:96: sfr			P1FSRL		= 0xD4;			//P1 Function Selection Low Register
      000039 75*13 D4         [24]  576 	mov	_P1FSRL,#0xd4
                                    577 ;	./inc/mc96f8x16.h:97: sfr			P1FSRH		= 0xD5;			//P1 Function Selection High Register
      00003C 75*14 D5         [24]  578 	mov	_P1FSRH,#0xd5
                                    579 ;	./inc/mc96f8x16.h:98: sfr			P2FSR		= 0xD6;			//P2 Function Selection Register
      00003F 75*15 D6         [24]  580 	mov	_P2FSR,#0xd6
                                    581 ;	./inc/mc96f8x16.h:99: sfr			P3FSR		= 0xD7;			//P3 Function Selection Register
      000042 75*16 D7         [24]  582 	mov	_P3FSR,#0xd7
                                    583 ;	./inc/mc96f8x16.h:102: sfr			IE			= 0xA8;			// Interrupt Enable Register 0
      000045 75*17 A8         [24]  584 	mov	_IE,#0xa8
                                    585 ;	./inc/mc96f8x16.h:103: sfr			IE1			= 0xA9;			// Interrupt Enable Register 1
      000048 75*18 A9         [24]  586 	mov	_IE1,#0xa9
                                    587 ;	./inc/mc96f8x16.h:104: sfr			IE2			= 0xAA;			// Interrupt Enable Register 2
      00004B 75*19 AA         [24]  588 	mov	_IE2,#0xaa
                                    589 ;	./inc/mc96f8x16.h:105: sfr			IE3			= 0xAB;			// Interrupt Enable Register 3
      00004E 75*1A AB         [24]  590 	mov	_IE3,#0xab
                                    591 ;	./inc/mc96f8x16.h:106: sfr			IP			= 0xB8;			// Interrupt Priority Register 0
      000051 75*1B B8         [24]  592 	mov	_IP,#0xb8
                                    593 ;	./inc/mc96f8x16.h:107: sfr			IP1			= 0xF8;			// Interrupt Priority Register 1
      000054 75*1C F8         [24]  594 	mov	_IP1,#0xf8
                                    595 ;	./inc/mc96f8x16.h:108: sfr			IIFLAG		= 0xA0;			// Internal Interrupt Flag Register
      000057 75*1D A0         [24]  596 	mov	_IIFLAG,#0xa0
                                    597 ;	./inc/mc96f8x16.h:109: sfr			EIFLAG0		= 0xC0;			// External Interrupt Flag 0 Register
      00005A 75*1E C0         [24]  598 	mov	_EIFLAG0,#0xc0
                                    599 ;	./inc/mc96f8x16.h:110: sfr			EIFLAG1		= 0xB0;			// External Interrupt Flag 1 Register
      00005D 75*1F B0         [24]  600 	mov	_EIFLAG1,#0xb0
                                    601 ;	./inc/mc96f8x16.h:111: sfr			EIPOL0L		= 0xA4;			// External Interrupt Polarity 0 Low Register
      000060 75*20 A4         [24]  602 	mov	_EIPOL0L,#0xa4
                                    603 ;	./inc/mc96f8x16.h:112: sfr			EIPOL0H		= 0xA5;			// External Interrupt Polarity 0 High Register
      000063 75*21 A5         [24]  604 	mov	_EIPOL0H,#0xa5
                                    605 ;	./inc/mc96f8x16.h:113: sfr			EIPOL1		= 0xA6;			// External Interrupt Polarity 1 Register
      000066 75*22 A6         [24]  606 	mov	_EIPOL1,#0xa6
                                    607 ;	./inc/mc96f8x16.h:114: sfr			EIPOL2		= 0xA7;			// External Interrupt Polarity 2 Register
      000069 75*23 A7         [24]  608 	mov	_EIPOL2,#0xa7
                                    609 ;	./inc/mc96f8x16.h:117: sfr			SCCR		= 0x8A;			// System Clock Control Register
      00006C 75*24 8A         [24]  610 	mov	_SCCR,#0x8a
                                    611 ;	./inc/mc96f8x16.h:118: sfr			OSCCR		= 0xC8;			// Oscillator Control Register
      00006F 75*25 C8         [24]  612 	mov	_OSCCR,#0xc8
                                    613 ;	./inc/mc96f8x16.h:119: sfr			BITCNT		= 0x8C;			// Basic Interval Timer Counter Register
      000072 75*26 8C         [24]  614 	mov	_BITCNT,#0x8c
                                    615 ;	./inc/mc96f8x16.h:120: sfr			BITCR		= 0x8B;			// Basic Interval Timer Control Register
      000075 75*27 8B         [24]  616 	mov	_BITCR,#0x8b
                                    617 ;	./inc/mc96f8x16.h:121: sfr			RSTFR		= 0xE8;			// Reset Flag Register
      000078 75*28 E8         [24]  618 	mov	_RSTFR,#0xe8
                                    619 ;	./inc/mc96f8x16.h:122: sfr			PCON		= 0x87;			// Power Control Register
      00007B 75*29 87         [24]  620 	mov	_PCON,#0x87
                                    621 ;	./inc/mc96f8x16.h:123: sfr			LVRCR		= 0xD8;			// Low Voltage Reset Control Register
      00007E 75*2A D8         [24]  622 	mov	_LVRCR,#0xd8
                                    623 ;	./inc/mc96f8x16.h:124: sfr			LVICR		= 0x86;			// Low Voltage Indicator Control Register
      000081 75*2B 86         [24]  624 	mov	_LVICR,#0x86
                                    625 ;	./inc/mc96f8x16.h:127: sfr			WDTDR		= 0x8E;			// Watch Dog Timer Data Register
      000084 75*2C 8E         [24]  626 	mov	_WDTDR,#0x8e
                                    627 ;	./inc/mc96f8x16.h:128: sfr			WDTCNT		= 0x8E;			// Watch Dog Timer Counter Register
      000087 75*2D 8E         [24]  628 	mov	_WDTCNT,#0x8e
                                    629 ;	./inc/mc96f8x16.h:129: sfr			WDTCR		= 0x8D;			// Watch Dog Timer Control Register
      00008A 75*2E 8D         [24]  630 	mov	_WDTCR,#0x8d
                                    631 ;	./inc/mc96f8x16.h:132: sfr			WTDR		= 0x89;			// Watch Timer Data Register
      00008D 75*2F 89         [24]  632 	mov	_WTDR,#0x89
                                    633 ;	./inc/mc96f8x16.h:133: sfr			WTCNT		= 0x89;			// Watch Timer Counter Register
      000090 75*30 89         [24]  634 	mov	_WTCNT,#0x89
                                    635 ;	./inc/mc96f8x16.h:134: sfr			WTCR		= 0x96;			// Watch Timer Control Register
      000093 75*31 96         [24]  636 	mov	_WTCR,#0x96
                                    637 ;	./inc/mc96f8x16.h:137: sfr			T0CR		= 0xB2;			// Timer 0 Control Register
      000096 75*32 B2         [24]  638 	mov	_T0CR,#0xb2
                                    639 ;	./inc/mc96f8x16.h:138: sfr			T0CNT		= 0xB3;			// Timer 0 Counter Register
      000099 75*33 B3         [24]  640 	mov	_T0CNT,#0xb3
                                    641 ;	./inc/mc96f8x16.h:139: sfr			T0DR		= 0xB4;			// Timer 0 Data Register
      00009C 75*34 B4         [24]  642 	mov	_T0DR,#0xb4
                                    643 ;	./inc/mc96f8x16.h:140: sfr			T0CDR		= 0xB4;			// Timer 0 Capture Data Register
      00009F 75*35 B4         [24]  644 	mov	_T0CDR,#0xb4
                                    645 ;	./inc/mc96f8x16.h:146: sfr			T1CRL		= 0xBA;			// Timer 1 Control Low Register
      0000A2 75*36 BA         [24]  646 	mov	_T1CRL,#0xba
                                    647 ;	./inc/mc96f8x16.h:147: sfr			T1CRH		= 0xBB;			// Timer 1 Control High Register
      0000A5 75*37 BB         [24]  648 	mov	_T1CRH,#0xbb
                                    649 ;	./inc/mc96f8x16.h:148: sfr			T1ADRL		= 0xBC;			// Timer 1 A Data Low Register
      0000A8 75*38 BC         [24]  650 	mov	_T1ADRL,#0xbc
                                    651 ;	./inc/mc96f8x16.h:149: sfr			T1ADRH		= 0xBD;			// Timer 1 A Data High Register
      0000AB 75*39 BD         [24]  652 	mov	_T1ADRH,#0xbd
                                    653 ;	./inc/mc96f8x16.h:150: sfr			T1BDRL		= 0xBE;			// Timer 1 B Data Low Register
      0000AE 75*3A BE         [24]  654 	mov	_T1BDRL,#0xbe
                                    655 ;	./inc/mc96f8x16.h:151: sfr			T1BDRH		= 0xBF;			// Timer 1 B Data High Register
      0000B1 75*3B BF         [24]  656 	mov	_T1BDRH,#0xbf
                                    657 ;	./inc/mc96f8x16.h:154: sfr			T2CRL		= 0xC2;			// Timer 2 Control Low Register
      0000B4 75*3C C2         [24]  658 	mov	_T2CRL,#0xc2
                                    659 ;	./inc/mc96f8x16.h:155: sfr			T2CRH		= 0xC3;			// Timer 2 Control High Register
      0000B7 75*3D C3         [24]  660 	mov	_T2CRH,#0xc3
                                    661 ;	./inc/mc96f8x16.h:156: sfr			T2ADRL		= 0xC4;			// Timer 2 A Data Low Register
      0000BA 75*3E C4         [24]  662 	mov	_T2ADRL,#0xc4
                                    663 ;	./inc/mc96f8x16.h:157: sfr			T2ADRH		= 0xC5;			// Timer 2 A Data High Register
      0000BD 75*3F C5         [24]  664 	mov	_T2ADRH,#0xc5
                                    665 ;	./inc/mc96f8x16.h:158: sfr			T2BDRL		= 0xC6;			// Timer 2 B Data Low Register
      0000C0 75*40 C6         [24]  666 	mov	_T2BDRL,#0xc6
                                    667 ;	./inc/mc96f8x16.h:159: sfr			T2BDRH		= 0xC7;			// Timer 2 B Data High Register
      0000C3 75*41 C7         [24]  668 	mov	_T2BDRH,#0xc7
                                    669 ;	./inc/mc96f8x16.h:162: sfr			BUZDR		= 0x8F;			// BUZZER Data Register
      0000C6 75*42 8F         [24]  670 	mov	_BUZDR,#0x8f
                                    671 ;	./inc/mc96f8x16.h:163: sfr			BUZCR		= 0x97;			// BUZZER Control Register
      0000C9 75*43 97         [24]  672 	mov	_BUZCR,#0x97
                                    673 ;	./inc/mc96f8x16.h:166: sfr			ADCCRL		= 0x9C;			// A/D Converter Control Low Register
      0000CC 75*44 9C         [24]  674 	mov	_ADCCRL,#0x9c
                                    675 ;	./inc/mc96f8x16.h:167: sfr			ADCCRH		= 0x9D;			// A/D Converter Control High Register
      0000CF 75*45 9D         [24]  676 	mov	_ADCCRH,#0x9d
                                    677 ;	./inc/mc96f8x16.h:168: sfr			ADCDRL		= 0x9E;			// A/D Converter Data Low Register
      0000D2 75*46 9E         [24]  678 	mov	_ADCDRL,#0x9e
                                    679 ;	./inc/mc96f8x16.h:169: sfr			ADCDRH		= 0x9F;			// A/D Converter Data High Register
      0000D5 75*47 9F         [24]  680 	mov	_ADCDRH,#0x9f
                                    681 ;	./inc/mc96f8x16.h:171: sfr			ADWRCR0		= 0xF2;			// ADC Wake-up Resistor Control Register 0
      0000D8 75*48 F2         [24]  682 	mov	_ADWRCR0,#0xf2
                                    683 ;	./inc/mc96f8x16.h:172: sfr			ADWRCR1		= 0xF3;			// ADC Wake-up Resistor Control Register 1
      0000DB 75*49 F3         [24]  684 	mov	_ADWRCR1,#0xf3
                                    685 ;	./inc/mc96f8x16.h:173: sfr			ADWRCR2		= 0xF4;			// ADC Wake-up Resistor Control Register 2
      0000DE 75*4A F4         [24]  686 	mov	_ADWRCR2,#0xf4
                                    687 ;	./inc/mc96f8x16.h:174: sfr			ADWRCR3		= 0xF5;			// ADC Wake-up Resistor Control Register 3
      0000E1 75*4B F5         [24]  688 	mov	_ADWRCR3,#0xf5
                                    689 ;	./inc/mc96f8x16.h:175: sfr			ADWCRL		= 0xF6;			// ADC Wake-up Control Low Register
      0000E4 75*4C F6         [24]  690 	mov	_ADWCRL,#0xf6
                                    691 ;	./inc/mc96f8x16.h:176: sfr			ADWCRH		= 0xF7;			// ADC Wake-up Control High Register
      0000E7 75*4D F7         [24]  692 	mov	_ADWCRH,#0xf7
                                    693 ;	./inc/mc96f8x16.h:177: sfr			ADWIFRL		= 0xDC;			// ADC Wake-up Interrupt Flag Low Register
      0000EA 75*4E DC         [24]  694 	mov	_ADWIFRL,#0xdc
                                    695 ;	./inc/mc96f8x16.h:178: sfr			ADWIFRH		= 0xDD;			// ADC Wake-up Interrupt Flag High Register
      0000ED 75*4F DD         [24]  696 	mov	_ADWIFRH,#0xdd
                                    697 ;	./inc/mc96f8x16.h:181: sfr			SPICR		= 0xB5;			// SPI Control Register
      0000F0 75*50 B5         [24]  698 	mov	_SPICR,#0xb5
                                    699 ;	./inc/mc96f8x16.h:182: sfr			SPIDR		= 0xB6;			// SPI Data Register
      0000F3 75*51 B6         [24]  700 	mov	_SPIDR,#0xb6
                                    701 ;	./inc/mc96f8x16.h:183: sfr			SPISR		= 0xB7;			// SPI Status Register
      0000F6 75*52 B7         [24]  702 	mov	_SPISR,#0xb7
                                    703 ;	./inc/mc96f8x16.h:186: sfr			UARTCR1		= 0xE2;			// UART Control Register 1
      0000F9 75*53 E2         [24]  704 	mov	_UARTCR1,#0xe2
                                    705 ;	./inc/mc96f8x16.h:187: sfr			UARTCR2		= 0xE3;			// UART Control Register 2
      0000FC 75*54 E3         [24]  706 	mov	_UARTCR2,#0xe3
                                    707 ;	./inc/mc96f8x16.h:188: sfr			UARTCR3		= 0xE4;			// UART Control Register 3
      0000FF 75*55 E4         [24]  708 	mov	_UARTCR3,#0xe4
                                    709 ;	./inc/mc96f8x16.h:189: sfr			UARTST		= 0xE5;			// UART Status Register
      000102 75*56 E5         [24]  710 	mov	_UARTST,#0xe5
                                    711 ;	./inc/mc96f8x16.h:190: sfr			UARTBD		= 0xE6;			// UART BaudRate Register
      000105 75*57 E6         [24]  712 	mov	_UARTBD,#0xe6
                                    713 ;	./inc/mc96f8x16.h:191: sfr			UARTDR		= 0xE7;			// UART Data Register
      000108 75*58 E7         [24]  714 	mov	_UARTDR,#0xe7
                                    715 ;	./inc/mc96f8x16.h:194: sfr			I2CCR		= 0xE9;			// I2C Control Register
      00010B 75*59 E9         [24]  716 	mov	_I2CCR,#0xe9
                                    717 ;	./inc/mc96f8x16.h:195: sfr			I2CSR		= 0xEA;			// I2C Status Register
      00010E 75*5A EA         [24]  718 	mov	_I2CSR,#0xea
                                    719 ;	./inc/mc96f8x16.h:196: sfr			I2CSAR0		= 0xEB;			// I2C Slave Address 0 Register
      000111 75*5B EB         [24]  720 	mov	_I2CSAR0,#0xeb
                                    721 ;	./inc/mc96f8x16.h:197: sfr			I2CSAR1		= 0xF1;			// I2C Slave Address 1 Register
      000114 75*5C F1         [24]  722 	mov	_I2CSAR1,#0xf1
                                    723 ;	./inc/mc96f8x16.h:198: sfr			I2CDR		= 0xEC;			// I2C Data Register
      000117 75*5D EC         [24]  724 	mov	_I2CDR,#0xec
                                    725 ;	./inc/mc96f8x16.h:199: sfr			I2CSDHR		= 0xED;			// I2C SDA Hold Time Register
      00011A 75*5E ED         [24]  726 	mov	_I2CSDHR,#0xed
                                    727 ;	./inc/mc96f8x16.h:200: sfr			I2CSCLR		= 0xEE;			// I2C SCL Low Period Register
      00011D 75*5F EE         [24]  728 	mov	_I2CSCLR,#0xee
                                    729 ;	./inc/mc96f8x16.h:201: sfr			I2CSCHR		= 0xEF;			// I2C SCL High Period Register
      000120 75*60 EF         [24]  730 	mov	_I2CSCHR,#0xef
                                    731 ;	./inc/mc96f8x16.h:204: sfr			FSADRH		= 0xFA;			// Flash Sector Address High Register
      000123 75*61 FA         [24]  732 	mov	_FSADRH,#0xfa
                                    733 ;	./inc/mc96f8x16.h:205: sfr			FSADRM		= 0xFB;			// Flash Sector Address Middle Register
      000126 75*62 FB         [24]  734 	mov	_FSADRM,#0xfb
                                    735 ;	./inc/mc96f8x16.h:206: sfr			FSADRL		= 0xFC;			// Flash Sector Address Low Register
      000129 75*63 FC         [24]  736 	mov	_FSADRL,#0xfc
                                    737 ;	./inc/mc96f8x16.h:207: sfr			FIDR		= 0xFD;			// Flash Identification Register
      00012C 75*64 FD         [24]  738 	mov	_FIDR,#0xfd
                                    739 ;	./inc/mc96f8x16.h:208: sfr			FMCR		= 0xFE;			// Flash Mode Control Register
      00012F 75*65 FE         [24]  740 	mov	_FMCR,#0xfe
                                    741 ;	./inc/mc96f8x16.h:210: sfr			ACC			= 0xE0;
      000132 75*66 E0         [24]  742 	mov	_ACC,#0xe0
                                    743 ;	./inc/mc96f8x16.h:211: sfr			B			= 0xF0;
      000135 75*67 F0         [24]  744 	mov	_B,#0xf0
                                    745 ;	./inc/mc96f8x16.h:212: sfr			PSW			= 0xD0;
      000138 75*68 D0         [24]  746 	mov	_PSW,#0xd0
                                    747 ;	./inc/mc96f8x16.h:213: sfr			SP			= 0x81;
      00013B 75*69 81         [24]  748 	mov	_SP,#0x81
                                    749 ;	./inc/mc96f8x16.h:214: sfr			DPL			= 0x82;
      00013E 75*6A 82         [24]  750 	mov	_DPL,#0x82
                                    751 ;	./inc/mc96f8x16.h:215: sfr			DPH			= 0x83;
      000141 75*6B 83         [24]  752 	mov	_DPH,#0x83
                                    753 ;	./inc/mc96f8x16.h:216: sfr			DPL1		= 0x84;
      000144 75*6C 84         [24]  754 	mov	_DPL1,#0x84
                                    755 ;	./inc/mc96f8x16.h:217: sfr			DPH1		= 0x85;
      000147 75*6D 85         [24]  756 	mov	_DPH1,#0x85
                                    757 ;	./inc/mc96f8x16.h:218: sfr			EO			= 0xA2;			// EXTENDED OPERATION REGISTER
      00014A 75*6E A2         [24]  758 	mov	_EO,#0xa2
                                    759 ;	./inc/mc96f8x16.h:38: sbit	P00			= 0x80;
                                    760 ;	assignBit
      00014D D2*00            [12]  761 	setb	_P00
                                    762 ;	./inc/mc96f8x16.h:39: sbit	P01			= 0x81;
                                    763 ;	assignBit
      00014F D2*01            [12]  764 	setb	_P01
                                    765 ;	./inc/mc96f8x16.h:40: sbit	P02			= 0x82;
                                    766 ;	assignBit
      000151 D2*02            [12]  767 	setb	_P02
                                    768 ;	./inc/mc96f8x16.h:41: sbit	P03			= 0x83;
                                    769 ;	assignBit
      000153 D2*03            [12]  770 	setb	_P03
                                    771 ;	./inc/mc96f8x16.h:42: sbit	P04			= 0x84;
                                    772 ;	assignBit
      000155 D2*04            [12]  773 	setb	_P04
                                    774 ;	./inc/mc96f8x16.h:43: sbit	P05			= 0x85;
                                    775 ;	assignBit
      000157 D2*05            [12]  776 	setb	_P05
                                    777 ;	./inc/mc96f8x16.h:44: sbit	P06			= 0x86;
                                    778 ;	assignBit
      000159 D2*06            [12]  779 	setb	_P06
                                    780 ;	./inc/mc96f8x16.h:45: sbit	P07			= 0x87;
                                    781 ;	assignBit
      00015B D2*07            [12]  782 	setb	_P07
                                    783 ;	./inc/mc96f8x16.h:53: sbit	P10			= 0x88;
                                    784 ;	assignBit
      00015D D2*08            [12]  785 	setb	_P10
                                    786 ;	./inc/mc96f8x16.h:54: sbit	P11			= 0x89;
                                    787 ;	assignBit
      00015F D2*09            [12]  788 	setb	_P11
                                    789 ;	./inc/mc96f8x16.h:55: sbit	P12			= 0x8A;
                                    790 ;	assignBit
      000161 D2*0A            [12]  791 	setb	_P12
                                    792 ;	./inc/mc96f8x16.h:56: sbit	P13			= 0x8B;
                                    793 ;	assignBit
      000163 D2*0B            [12]  794 	setb	_P13
                                    795 ;	./inc/mc96f8x16.h:57: sbit	P14			= 0x8C;
                                    796 ;	assignBit
      000165 D2*0C            [12]  797 	setb	_P14
                                    798 ;	./inc/mc96f8x16.h:58: sbit	P15			= 0x8D;
                                    799 ;	assignBit
      000167 D2*0D            [12]  800 	setb	_P15
                                    801 ;	./inc/mc96f8x16.h:59: sbit	P16			= 0x8E;
                                    802 ;	assignBit
      000169 D2*0E            [12]  803 	setb	_P16
                                    804 ;	./inc/mc96f8x16.h:60: sbit	P17			= 0x8F;
                                    805 ;	assignBit
      00016B D2*0F            [12]  806 	setb	_P17
                                    807 ;	./inc/mc96f8x16.h:68: sbit	P20			= 0x90;
                                    808 ;	assignBit
      00016D D2*10            [12]  809 	setb	_P20
                                    810 ;	./inc/mc96f8x16.h:69: sbit	P21			= 0x91;
                                    811 ;	assignBit
      00016F D2*11            [12]  812 	setb	_P21
                                    813 ;	./inc/mc96f8x16.h:70: sbit	P22			= 0x92;
                                    814 ;	assignBit
      000171 D2*12            [12]  815 	setb	_P22
                                    816 ;	./inc/mc96f8x16.h:71: sbit	P23			= 0x93;
                                    817 ;	assignBit
      000173 D2*13            [12]  818 	setb	_P23
                                    819 ;	./inc/mc96f8x16.h:72: sbit	P24			= 0x94;
                                    820 ;	assignBit
      000175 D2*14            [12]  821 	setb	_P24
                                    822 ;	./inc/mc96f8x16.h:73: sbit	P25			= 0x95;
                                    823 ;	assignBit
      000177 D2*15            [12]  824 	setb	_P25
                                    825 ;	./inc/mc96f8x16.h:74: sbit	P26			= 0x96;
                                    826 ;	assignBit
      000179 D2*16            [12]  827 	setb	_P26
                                    828 ;	./inc/mc96f8x16.h:75: sbit	P27			= 0x97;
                                    829 ;	assignBit
      00017B D2*17            [12]  830 	setb	_P27
                                    831 ;	./inc/mc96f8x16.h:82: sbit	P30			= 0x98;
                                    832 ;	assignBit
      00017D D2*18            [12]  833 	setb	_P30
                                    834 ;	./inc/mc96f8x16.h:83: sbit	P31			= 0x99;
                                    835 ;	assignBit
      00017F D2*19            [12]  836 	setb	_P31
                                    837 ;	./inc/mc96f8x16.h:84: sbit	P32			= 0x9A;
                                    838 ;	assignBit
      000181 D2*1A            [12]  839 	setb	_P32
                                    840 ;	./inc/mc96f8x16.h:85: sbit	P33			= 0x9B;
                                    841 ;	assignBit
      000183 D2*1B            [12]  842 	setb	_P33
                                    843 ;	./inc/mc96f8x16.h:86: sbit	P34			= 0x9C;
                                    844 ;	assignBit
      000185 D2*1C            [12]  845 	setb	_P34
                                    846 ;	./inc/mc96f8x16.h:87: sbit	P35			= 0x9D;
                                    847 ;	assignBit
      000187 D2*1D            [12]  848 	setb	_P35
                                    849 ;	./inc/mc96f8x16.h:88: sbit	P36			= 0x9E;
                                    850 ;	assignBit
      000189 D2*1E            [12]  851 	setb	_P36
                                    852 ;	./inc/mc96f8x16.h:89: sbit	P37			= 0x9F;
                                    853 ;	assignBit
      00018B D2*1F            [12]  854 	setb	_P37
                                    855 ;--------------------------------------------------------
                                    856 ; Home
                                    857 ;--------------------------------------------------------
                                    858 	.area HOME    (CODE)
                                    859 	.area HOME    (CODE)
                                    860 ;--------------------------------------------------------
                                    861 ; code
                                    862 ;--------------------------------------------------------
                                    863 	.area CSEG    (CODE)
                                    864 ;------------------------------------------------------------
                                    865 ;Allocation info for local variables in function 'I2C_Config'
                                    866 ;------------------------------------------------------------
                                    867 ;I2C_Conf                  Allocated with name '_I2C_Config_I2C_Conf_65536_23'
                                    868 ;------------------------------------------------------------
                                    869 ;	src/mc96f8x16_i2c.c:7: void I2C_Config(I2C_Config_Typedef *I2C_Conf)
                                    870 ;	-----------------------------------------
                                    871 ;	 function I2C_Config
                                    872 ;	-----------------------------------------
      000000                        873 _I2C_Config:
                           000007   874 	ar7 = 0x07
                           000006   875 	ar6 = 0x06
                           000005   876 	ar5 = 0x05
                           000004   877 	ar4 = 0x04
                           000003   878 	ar3 = 0x03
                           000002   879 	ar2 = 0x02
                           000001   880 	ar1 = 0x01
                           000000   881 	ar0 = 0x00
      000000 AF F0            [24]  882 	mov	r7,b
      000002 AE 83            [24]  883 	mov	r6,dph
      000004 E5 82            [12]  884 	mov	a,dpl
      000006 90r00r00         [24]  885 	mov	dptr,#_I2C_Config_I2C_Conf_65536_23
      000009 F0               [24]  886 	movx	@dptr,a
      00000A EE               [12]  887 	mov	a,r6
      00000B A3               [24]  888 	inc	dptr
      00000C F0               [24]  889 	movx	@dptr,a
      00000D EF               [12]  890 	mov	a,r7
      00000E A3               [24]  891 	inc	dptr
      00000F F0               [24]  892 	movx	@dptr,a
                                    893 ;	src/mc96f8x16_i2c.c:9: I2CCR = (I2CCR & ~I2CCR_IMASTER) | ((I2C_Conf->Mode) << 2u);
      000010 74 FB            [12]  894 	mov	a,#0xfb
      000012 55*59            [12]  895 	anl	a,_I2CCR
      000014 FF               [12]  896 	mov	r7,a
      000015 90r00r00         [24]  897 	mov	dptr,#_I2C_Config_I2C_Conf_65536_23
      000018 E0               [24]  898 	movx	a,@dptr
      000019 FC               [12]  899 	mov	r4,a
      00001A A3               [24]  900 	inc	dptr
      00001B E0               [24]  901 	movx	a,@dptr
      00001C FD               [12]  902 	mov	r5,a
      00001D A3               [24]  903 	inc	dptr
      00001E E0               [24]  904 	movx	a,@dptr
      00001F FE               [12]  905 	mov	r6,a
      000020 8C 82            [24]  906 	mov	dpl,r4
      000022 8D 83            [24]  907 	mov	dph,r5
      000024 8E F0            [24]  908 	mov	b,r6
      000026 12r00r00         [24]  909 	lcall	__gptrget
      000029 25 E0            [12]  910 	add	a,acc
      00002B 25 E0            [12]  911 	add	a,acc
      00002D 4F               [12]  912 	orl	a,r7
      00002E F5*59            [12]  913 	mov	_I2CCR,a
                                    914 ;	src/mc96f8x16_i2c.c:10: I2CSDHR = I2C_Conf->HoldTime;
      000030 74 01            [12]  915 	mov	a,#0x01
      000032 2C               [12]  916 	add	a,r4
      000033 FA               [12]  917 	mov	r2,a
      000034 E4               [12]  918 	clr	a
      000035 3D               [12]  919 	addc	a,r5
      000036 FB               [12]  920 	mov	r3,a
      000037 8E 07            [24]  921 	mov	ar7,r6
      000039 8A 82            [24]  922 	mov	dpl,r2
      00003B 8B 83            [24]  923 	mov	dph,r3
      00003D 8F F0            [24]  924 	mov	b,r7
      00003F 12r00r00         [24]  925 	lcall	__gptrget
      000042 F5*5E            [12]  926 	mov	_I2CSDHR,a
                                    927 ;	src/mc96f8x16_i2c.c:11: I2CSCLR = (uint8_t)(I2C_Conf->Period);
      000044 74 02            [12]  928 	mov	a,#0x02
      000046 2C               [12]  929 	add	a,r4
      000047 FC               [12]  930 	mov	r4,a
      000048 E4               [12]  931 	clr	a
      000049 3D               [12]  932 	addc	a,r5
      00004A FD               [12]  933 	mov	r5,a
      00004B 8C 82            [24]  934 	mov	dpl,r4
      00004D 8D 83            [24]  935 	mov	dph,r5
      00004F 8E F0            [24]  936 	mov	b,r6
      000051 12r00r00         [24]  937 	lcall	__gptrget
      000054 F5*5F            [12]  938 	mov	_I2CSCLR,a
                                    939 ;	src/mc96f8x16_i2c.c:12: I2CSCHR = (uint8_t)((I2C_Conf->Period) >> 8u);
      000056 8C 82            [24]  940 	mov	dpl,r4
      000058 8D 83            [24]  941 	mov	dph,r5
      00005A 8E F0            [24]  942 	mov	b,r6
      00005C 12r00r00         [24]  943 	lcall	__gptrget
      00005F A3               [24]  944 	inc	dptr
      000060 12r00r00         [24]  945 	lcall	__gptrget
      000063 FD               [12]  946 	mov	r5,a
      000064 8D*60            [24]  947 	mov	_I2CSCHR,r5
                                    948 ;	src/mc96f8x16_i2c.c:13: I2CCR |= (I2CCR_ACKEN | I2CCR_IICEN);
      000066 43*59 48         [24]  949 	orl	_I2CCR,#0x48
                                    950 ;	src/mc96f8x16_i2c.c:14: }
      000069 22               [24]  951 	ret
                                    952 ;------------------------------------------------------------
                                    953 ;Allocation info for local variables in function 'I2C_Master_Transmit'
                                    954 ;------------------------------------------------------------
                                    955 ;RegAddr                   Allocated with name '_I2C_Master_Transmit_PARM_2'
                                    956 ;Data                      Allocated with name '_I2C_Master_Transmit_PARM_3'
                                    957 ;Timeout                   Allocated with name '_I2C_Master_Transmit_PARM_4'
                                    958 ;DevAddr                   Allocated with name '_I2C_Master_Transmit_DevAddr_65536_25'
                                    959 ;StartTick                 Allocated with name '_I2C_Master_Transmit_StartTick_65536_26'
                                    960 ;------------------------------------------------------------
                                    961 ;	src/mc96f8x16_i2c.c:16: HAL_Status I2C_Master_Transmit(uint8_t DevAddr, uint8_t RegAddr, uint8_t Data,  uint16_t Timeout)
                                    962 ;	-----------------------------------------
                                    963 ;	 function I2C_Master_Transmit
                                    964 ;	-----------------------------------------
      00006A                        965 _I2C_Master_Transmit:
      00006A E5 82            [12]  966 	mov	a,dpl
      00006C 90r00r07         [24]  967 	mov	dptr,#_I2C_Master_Transmit_DevAddr_65536_25
      00006F F0               [24]  968 	movx	@dptr,a
                                    969 ;	src/mc96f8x16_i2c.c:18: uint16_t StartTick = GetTick();
      000070 12r00r00         [24]  970 	lcall	_GetTick
      000073 AE 82            [24]  971 	mov	r6,dpl
      000075 AF 83            [24]  972 	mov	r7,dph
                                    973 ;	src/mc96f8x16_i2c.c:19: I2CDR = (DevAddr << 1u);
      000077 90r00r07         [24]  974 	mov	dptr,#_I2C_Master_Transmit_DevAddr_65536_25
      00007A E0               [24]  975 	movx	a,@dptr
      00007B 25 E0            [12]  976 	add	a,acc
      00007D F5*5D            [12]  977 	mov	_I2CDR,a
                                    978 ;	src/mc96f8x16_i2c.c:20: while ((I2CSR & I2CSR_BUSY))
      00007F 90r00r05         [24]  979 	mov	dptr,#_I2C_Master_Transmit_PARM_4
      000082 E0               [24]  980 	movx	a,@dptr
      000083 FC               [12]  981 	mov	r4,a
      000084 A3               [24]  982 	inc	dptr
      000085 E0               [24]  983 	movx	a,@dptr
      000086 FD               [12]  984 	mov	r5,a
      000087                        985 00103$:
      000087 E5*5A            [12]  986 	mov	a,_I2CSR
      000089 30 E2 2A         [24]  987 	jnb	acc.2,00105$
                                    988 ;	src/mc96f8x16_i2c.c:22: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      00008C 90r00r00         [24]  989 	mov	dptr,#_CheckTimeout_PARM_2
      00008F EC               [12]  990 	mov	a,r4
      000090 F0               [24]  991 	movx	@dptr,a
      000091 ED               [12]  992 	mov	a,r5
      000092 A3               [24]  993 	inc	dptr
      000093 F0               [24]  994 	movx	@dptr,a
      000094 8E 82            [24]  995 	mov	dpl,r6
      000096 8F 83            [24]  996 	mov	dph,r7
      000098 C0 07            [24]  997 	push	ar7
      00009A C0 06            [24]  998 	push	ar6
      00009C C0 05            [24]  999 	push	ar5
      00009E C0 04            [24] 1000 	push	ar4
      0000A0 12r00r00         [24] 1001 	lcall	_CheckTimeout
      0000A3 AB 82            [24] 1002 	mov	r3,dpl
      0000A5 D0 04            [24] 1003 	pop	ar4
      0000A7 D0 05            [24] 1004 	pop	ar5
      0000A9 D0 06            [24] 1005 	pop	ar6
      0000AB D0 07            [24] 1006 	pop	ar7
      0000AD BB 01 02         [24] 1007 	cjne	r3,#0x01,00179$
      0000B0 80 D5            [24] 1008 	sjmp	00103$
      0000B2                       1009 00179$:
                                   1010 ;	src/mc96f8x16_i2c.c:24: return HAL_TIMEOUT;
      0000B2 75 82 02         [24] 1011 	mov	dpl,#0x02
      0000B5 22               [24] 1012 	ret
      0000B6                       1013 00105$:
                                   1014 ;	src/mc96f8x16_i2c.c:27: I2CCR |= I2CCR_STARTC;  /* Start transmit */
      0000B6 43*59 01         [24] 1015 	orl	_I2CCR,#0x01
                                   1016 ;	src/mc96f8x16_i2c.c:28: while(!(I2CSR & I2CSR_RXACK))
      0000B9 8C 02            [24] 1017 	mov	ar2,r4
      0000BB 8D 03            [24] 1018 	mov	ar3,r5
      0000BD                       1019 00108$:
      0000BD E5*5A            [12] 1020 	mov	a,_I2CSR
      0000BF 20 E0 32         [24] 1021 	jb	acc.0,00110$
                                   1022 ;	src/mc96f8x16_i2c.c:30: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0000C2 90r00r00         [24] 1023 	mov	dptr,#_CheckTimeout_PARM_2
      0000C5 EA               [12] 1024 	mov	a,r2
      0000C6 F0               [24] 1025 	movx	@dptr,a
      0000C7 EB               [12] 1026 	mov	a,r3
      0000C8 A3               [24] 1027 	inc	dptr
      0000C9 F0               [24] 1028 	movx	@dptr,a
      0000CA 8E 82            [24] 1029 	mov	dpl,r6
      0000CC 8F 83            [24] 1030 	mov	dph,r7
      0000CE C0 07            [24] 1031 	push	ar7
      0000D0 C0 06            [24] 1032 	push	ar6
      0000D2 C0 05            [24] 1033 	push	ar5
      0000D4 C0 04            [24] 1034 	push	ar4
      0000D6 C0 03            [24] 1035 	push	ar3
      0000D8 C0 02            [24] 1036 	push	ar2
      0000DA 12r00r00         [24] 1037 	lcall	_CheckTimeout
      0000DD A9 82            [24] 1038 	mov	r1,dpl
      0000DF D0 02            [24] 1039 	pop	ar2
      0000E1 D0 03            [24] 1040 	pop	ar3
      0000E3 D0 04            [24] 1041 	pop	ar4
      0000E5 D0 05            [24] 1042 	pop	ar5
      0000E7 D0 06            [24] 1043 	pop	ar6
      0000E9 D0 07            [24] 1044 	pop	ar7
      0000EB B9 01 02         [24] 1045 	cjne	r1,#0x01,00181$
      0000EE 80 CD            [24] 1046 	sjmp	00108$
      0000F0                       1047 00181$:
                                   1048 ;	src/mc96f8x16_i2c.c:32: return HAL_TIMEOUT;
      0000F0 75 82 02         [24] 1049 	mov	dpl,#0x02
      0000F3 22               [24] 1050 	ret
      0000F4                       1051 00110$:
                                   1052 ;	src/mc96f8x16_i2c.c:35: if(!(I2CSR & I2CSR_MLOST))  /* Check I2C maintains bus mastership */
      0000F4 E5*5A            [12] 1053 	mov	a,_I2CSR
      0000F6 20 E3 76         [24] 1054 	jb	acc.3,00122$
                                   1055 ;	src/mc96f8x16_i2c.c:37: I2CDR = RegAddr;
      0000F9 90r00r03         [24] 1056 	mov	dptr,#_I2C_Master_Transmit_PARM_2
      0000FC E0               [24] 1057 	movx	a,@dptr
      0000FD F5*5D            [12] 1058 	mov	_I2CDR,a
                                   1059 ;	src/mc96f8x16_i2c.c:38: while(!(I2CSR & I2CSR_RXACK))
      0000FF 8C 02            [24] 1060 	mov	ar2,r4
      000101 8D 03            [24] 1061 	mov	ar3,r5
      000103                       1062 00113$:
      000103 E5*5A            [12] 1063 	mov	a,_I2CSR
      000105 20 E0 32         [24] 1064 	jb	acc.0,00115$
                                   1065 ;	src/mc96f8x16_i2c.c:40: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      000108 90r00r00         [24] 1066 	mov	dptr,#_CheckTimeout_PARM_2
      00010B EA               [12] 1067 	mov	a,r2
      00010C F0               [24] 1068 	movx	@dptr,a
      00010D EB               [12] 1069 	mov	a,r3
      00010E A3               [24] 1070 	inc	dptr
      00010F F0               [24] 1071 	movx	@dptr,a
      000110 8E 82            [24] 1072 	mov	dpl,r6
      000112 8F 83            [24] 1073 	mov	dph,r7
      000114 C0 07            [24] 1074 	push	ar7
      000116 C0 06            [24] 1075 	push	ar6
      000118 C0 05            [24] 1076 	push	ar5
      00011A C0 04            [24] 1077 	push	ar4
      00011C C0 03            [24] 1078 	push	ar3
      00011E C0 02            [24] 1079 	push	ar2
      000120 12r00r00         [24] 1080 	lcall	_CheckTimeout
      000123 A9 82            [24] 1081 	mov	r1,dpl
      000125 D0 02            [24] 1082 	pop	ar2
      000127 D0 03            [24] 1083 	pop	ar3
      000129 D0 04            [24] 1084 	pop	ar4
      00012B D0 05            [24] 1085 	pop	ar5
      00012D D0 06            [24] 1086 	pop	ar6
      00012F D0 07            [24] 1087 	pop	ar7
      000131 B9 01 02         [24] 1088 	cjne	r1,#0x01,00184$
      000134 80 CD            [24] 1089 	sjmp	00113$
      000136                       1090 00184$:
                                   1091 ;	src/mc96f8x16_i2c.c:42: return HAL_TIMEOUT;
      000136 75 82 02         [24] 1092 	mov	dpl,#0x02
      000139 22               [24] 1093 	ret
      00013A                       1094 00115$:
                                   1095 ;	src/mc96f8x16_i2c.c:45: I2CDR = Data;
      00013A 90r00r04         [24] 1096 	mov	dptr,#_I2C_Master_Transmit_PARM_3
      00013D E0               [24] 1097 	movx	a,@dptr
      00013E F5*5D            [12] 1098 	mov	_I2CDR,a
                                   1099 ;	src/mc96f8x16_i2c.c:46: while(!(I2CSR & I2CSR_RXACK))
      000140                       1100 00118$:
      000140 E5*5A            [12] 1101 	mov	a,_I2CSR
      000142 20 E0 2E         [24] 1102 	jb	acc.0,00123$
                                   1103 ;	src/mc96f8x16_i2c.c:48: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      000145 90r00r00         [24] 1104 	mov	dptr,#_CheckTimeout_PARM_2
      000148 EC               [12] 1105 	mov	a,r4
      000149 F0               [24] 1106 	movx	@dptr,a
      00014A ED               [12] 1107 	mov	a,r5
      00014B A3               [24] 1108 	inc	dptr
      00014C F0               [24] 1109 	movx	@dptr,a
      00014D 8E 82            [24] 1110 	mov	dpl,r6
      00014F 8F 83            [24] 1111 	mov	dph,r7
      000151 C0 07            [24] 1112 	push	ar7
      000153 C0 06            [24] 1113 	push	ar6
      000155 C0 05            [24] 1114 	push	ar5
      000157 C0 04            [24] 1115 	push	ar4
      000159 12r00r00         [24] 1116 	lcall	_CheckTimeout
      00015C AB 82            [24] 1117 	mov	r3,dpl
      00015E D0 04            [24] 1118 	pop	ar4
      000160 D0 05            [24] 1119 	pop	ar5
      000162 D0 06            [24] 1120 	pop	ar6
      000164 D0 07            [24] 1121 	pop	ar7
      000166 BB 01 02         [24] 1122 	cjne	r3,#0x01,00186$
      000169 80 D5            [24] 1123 	sjmp	00118$
      00016B                       1124 00186$:
                                   1125 ;	src/mc96f8x16_i2c.c:50: return HAL_TIMEOUT;
      00016B 75 82 02         [24] 1126 	mov	dpl,#0x02
      00016E 22               [24] 1127 	ret
      00016F                       1128 00122$:
                                   1129 ;	src/mc96f8x16_i2c.c:56: return HAL_BUSY;
      00016F 75 82 04         [24] 1130 	mov	dpl,#0x04
      000172 22               [24] 1131 	ret
      000173                       1132 00123$:
                                   1133 ;	src/mc96f8x16_i2c.c:58: I2CCR |= I2CCR_STOPC;   /* Stop transmit */
      000173 43*59 02         [24] 1134 	orl	_I2CCR,#0x02
                                   1135 ;	src/mc96f8x16_i2c.c:59: I2CSR &= ~(I2CSR_GCALL | I2CSR_TEND | I2CSR_STOPD | I2CSR_SSEL | I2CSR_MLOST);  /* Clear interrupt bits */  
      000176 53*5A 07         [24] 1136 	anl	_I2CSR,#0x07
                                   1137 ;	src/mc96f8x16_i2c.c:60: return HAL_OK;
      000179 75 82 01         [24] 1138 	mov	dpl,#0x01
                                   1139 ;	src/mc96f8x16_i2c.c:61: }
      00017C 22               [24] 1140 	ret
                                   1141 ;------------------------------------------------------------
                                   1142 ;Allocation info for local variables in function 'I2C_Master_Receive'
                                   1143 ;------------------------------------------------------------
                                   1144 ;RegAddr                   Allocated with name '_I2C_Master_Receive_PARM_2'
                                   1145 ;pData                     Allocated with name '_I2C_Master_Receive_PARM_3'
                                   1146 ;Timeout                   Allocated with name '_I2C_Master_Receive_PARM_4'
                                   1147 ;DevAddr                   Allocated with name '_I2C_Master_Receive_DevAddr_65536_37'
                                   1148 ;StartTick                 Allocated with name '_I2C_Master_Receive_StartTick_65536_38'
                                   1149 ;------------------------------------------------------------
                                   1150 ;	src/mc96f8x16_i2c.c:63: HAL_Status I2C_Master_Receive(uint8_t DevAddr, uint8_t RegAddr, uint8_t *pData, uint16_t Timeout)
                                   1151 ;	-----------------------------------------
                                   1152 ;	 function I2C_Master_Receive
                                   1153 ;	-----------------------------------------
      00017D                       1154 _I2C_Master_Receive:
      00017D E5 82            [12] 1155 	mov	a,dpl
      00017F 90r00r0E         [24] 1156 	mov	dptr,#_I2C_Master_Receive_DevAddr_65536_37
      000182 F0               [24] 1157 	movx	@dptr,a
                                   1158 ;	src/mc96f8x16_i2c.c:65: uint16_t StartTick = GetTick();
      000183 12r00r00         [24] 1159 	lcall	_GetTick
      000186 AE 82            [24] 1160 	mov	r6,dpl
      000188 AF 83            [24] 1161 	mov	r7,dph
                                   1162 ;	src/mc96f8x16_i2c.c:66: I2CDR = (DevAddr << 1u) | 0x01;
      00018A 90r00r0E         [24] 1163 	mov	dptr,#_I2C_Master_Receive_DevAddr_65536_37
      00018D E0               [24] 1164 	movx	a,@dptr
      00018E 25 E0            [12] 1165 	add	a,acc
      000190 FD               [12] 1166 	mov	r5,a
      000191 74 01            [12] 1167 	mov	a,#0x01
      000193 4D               [12] 1168 	orl	a,r5
      000194 F5*5D            [12] 1169 	mov	_I2CDR,a
                                   1170 ;	src/mc96f8x16_i2c.c:67: while ((I2CSR & I2CSR_BUSY))
      000196 90r00r0C         [24] 1171 	mov	dptr,#_I2C_Master_Receive_PARM_4
      000199 E0               [24] 1172 	movx	a,@dptr
      00019A FC               [12] 1173 	mov	r4,a
      00019B A3               [24] 1174 	inc	dptr
      00019C E0               [24] 1175 	movx	a,@dptr
      00019D FD               [12] 1176 	mov	r5,a
      00019E                       1177 00103$:
      00019E E5*5A            [12] 1178 	mov	a,_I2CSR
      0001A0 30 E2 2A         [24] 1179 	jnb	acc.2,00105$
                                   1180 ;	src/mc96f8x16_i2c.c:69: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0001A3 90r00r00         [24] 1181 	mov	dptr,#_CheckTimeout_PARM_2
      0001A6 EC               [12] 1182 	mov	a,r4
      0001A7 F0               [24] 1183 	movx	@dptr,a
      0001A8 ED               [12] 1184 	mov	a,r5
      0001A9 A3               [24] 1185 	inc	dptr
      0001AA F0               [24] 1186 	movx	@dptr,a
      0001AB 8E 82            [24] 1187 	mov	dpl,r6
      0001AD 8F 83            [24] 1188 	mov	dph,r7
      0001AF C0 07            [24] 1189 	push	ar7
      0001B1 C0 06            [24] 1190 	push	ar6
      0001B3 C0 05            [24] 1191 	push	ar5
      0001B5 C0 04            [24] 1192 	push	ar4
      0001B7 12r00r00         [24] 1193 	lcall	_CheckTimeout
      0001BA AB 82            [24] 1194 	mov	r3,dpl
      0001BC D0 04            [24] 1195 	pop	ar4
      0001BE D0 05            [24] 1196 	pop	ar5
      0001C0 D0 06            [24] 1197 	pop	ar6
      0001C2 D0 07            [24] 1198 	pop	ar7
      0001C4 BB 01 02         [24] 1199 	cjne	r3,#0x01,00179$
      0001C7 80 D5            [24] 1200 	sjmp	00103$
      0001C9                       1201 00179$:
                                   1202 ;	src/mc96f8x16_i2c.c:71: return HAL_TIMEOUT;
      0001C9 75 82 02         [24] 1203 	mov	dpl,#0x02
      0001CC 22               [24] 1204 	ret
      0001CD                       1205 00105$:
                                   1206 ;	src/mc96f8x16_i2c.c:74: I2CCR |= I2CCR_STARTC;  /* Start transmit */
      0001CD 43*59 01         [24] 1207 	orl	_I2CCR,#0x01
                                   1208 ;	src/mc96f8x16_i2c.c:75: while(!(I2CSR & I2CSR_RXACK))
      0001D0 8C 02            [24] 1209 	mov	ar2,r4
      0001D2 8D 03            [24] 1210 	mov	ar3,r5
      0001D4                       1211 00108$:
      0001D4 E5*5A            [12] 1212 	mov	a,_I2CSR
      0001D6 20 E0 32         [24] 1213 	jb	acc.0,00110$
                                   1214 ;	src/mc96f8x16_i2c.c:77: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0001D9 90r00r00         [24] 1215 	mov	dptr,#_CheckTimeout_PARM_2
      0001DC EA               [12] 1216 	mov	a,r2
      0001DD F0               [24] 1217 	movx	@dptr,a
      0001DE EB               [12] 1218 	mov	a,r3
      0001DF A3               [24] 1219 	inc	dptr
      0001E0 F0               [24] 1220 	movx	@dptr,a
      0001E1 8E 82            [24] 1221 	mov	dpl,r6
      0001E3 8F 83            [24] 1222 	mov	dph,r7
      0001E5 C0 07            [24] 1223 	push	ar7
      0001E7 C0 06            [24] 1224 	push	ar6
      0001E9 C0 05            [24] 1225 	push	ar5
      0001EB C0 04            [24] 1226 	push	ar4
      0001ED C0 03            [24] 1227 	push	ar3
      0001EF C0 02            [24] 1228 	push	ar2
      0001F1 12r00r00         [24] 1229 	lcall	_CheckTimeout
      0001F4 A9 82            [24] 1230 	mov	r1,dpl
      0001F6 D0 02            [24] 1231 	pop	ar2
      0001F8 D0 03            [24] 1232 	pop	ar3
      0001FA D0 04            [24] 1233 	pop	ar4
      0001FC D0 05            [24] 1234 	pop	ar5
      0001FE D0 06            [24] 1235 	pop	ar6
      000200 D0 07            [24] 1236 	pop	ar7
      000202 B9 01 02         [24] 1237 	cjne	r1,#0x01,00181$
      000205 80 CD            [24] 1238 	sjmp	00108$
      000207                       1239 00181$:
                                   1240 ;	src/mc96f8x16_i2c.c:79: return HAL_TIMEOUT;
      000207 75 82 02         [24] 1241 	mov	dpl,#0x02
      00020A 22               [24] 1242 	ret
      00020B                       1243 00110$:
                                   1244 ;	src/mc96f8x16_i2c.c:82: if(!(I2CSR & I2CSR_MLOST))  /* Check I2C maintains bus mastership */
      00020B E5*5A            [12] 1245 	mov	a,_I2CSR
      00020D 30 E3 03         [24] 1246 	jnb	acc.3,00182$
      000210 02r02r9B         [24] 1247 	ljmp	00122$
      000213                       1248 00182$:
                                   1249 ;	src/mc96f8x16_i2c.c:84: I2CDR = RegAddr;
      000213 90r00r08         [24] 1250 	mov	dptr,#_I2C_Master_Receive_PARM_2
      000216 E0               [24] 1251 	movx	a,@dptr
      000217 F5*5D            [12] 1252 	mov	_I2CDR,a
                                   1253 ;	src/mc96f8x16_i2c.c:85: while(!(I2CSR & I2CSR_RXACK))
      000219 8C 02            [24] 1254 	mov	ar2,r4
      00021B 8D 03            [24] 1255 	mov	ar3,r5
      00021D                       1256 00113$:
      00021D E5*5A            [12] 1257 	mov	a,_I2CSR
      00021F 20 E0 32         [24] 1258 	jb	acc.0,00137$
                                   1259 ;	src/mc96f8x16_i2c.c:87: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      000222 90r00r00         [24] 1260 	mov	dptr,#_CheckTimeout_PARM_2
      000225 EA               [12] 1261 	mov	a,r2
      000226 F0               [24] 1262 	movx	@dptr,a
      000227 EB               [12] 1263 	mov	a,r3
      000228 A3               [24] 1264 	inc	dptr
      000229 F0               [24] 1265 	movx	@dptr,a
      00022A 8E 82            [24] 1266 	mov	dpl,r6
      00022C 8F 83            [24] 1267 	mov	dph,r7
      00022E C0 07            [24] 1268 	push	ar7
      000230 C0 06            [24] 1269 	push	ar6
      000232 C0 05            [24] 1270 	push	ar5
      000234 C0 04            [24] 1271 	push	ar4
      000236 C0 03            [24] 1272 	push	ar3
      000238 C0 02            [24] 1273 	push	ar2
      00023A 12r00r00         [24] 1274 	lcall	_CheckTimeout
      00023D A9 82            [24] 1275 	mov	r1,dpl
      00023F D0 02            [24] 1276 	pop	ar2
      000241 D0 03            [24] 1277 	pop	ar3
      000243 D0 04            [24] 1278 	pop	ar4
      000245 D0 05            [24] 1279 	pop	ar5
      000247 D0 06            [24] 1280 	pop	ar6
      000249 D0 07            [24] 1281 	pop	ar7
      00024B B9 01 02         [24] 1282 	cjne	r1,#0x01,00184$
      00024E 80 CD            [24] 1283 	sjmp	00113$
      000250                       1284 00184$:
                                   1285 ;	src/mc96f8x16_i2c.c:89: return HAL_TIMEOUT;
      000250 75 82 02         [24] 1286 	mov	dpl,#0x02
                                   1287 ;	src/mc96f8x16_i2c.c:92: while(!(I2CSR & I2CSR_TEND))
      000253 22               [24] 1288 	ret
      000254                       1289 00137$:
      000254                       1290 00118$:
      000254 E5*5A            [12] 1291 	mov	a,_I2CSR
      000256 20 E6 2A         [24] 1292 	jb	acc.6,00120$
                                   1293 ;	src/mc96f8x16_i2c.c:94: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      000259 90r00r00         [24] 1294 	mov	dptr,#_CheckTimeout_PARM_2
      00025C EC               [12] 1295 	mov	a,r4
      00025D F0               [24] 1296 	movx	@dptr,a
      00025E ED               [12] 1297 	mov	a,r5
      00025F A3               [24] 1298 	inc	dptr
      000260 F0               [24] 1299 	movx	@dptr,a
      000261 8E 82            [24] 1300 	mov	dpl,r6
      000263 8F 83            [24] 1301 	mov	dph,r7
      000265 C0 07            [24] 1302 	push	ar7
      000267 C0 06            [24] 1303 	push	ar6
      000269 C0 05            [24] 1304 	push	ar5
      00026B C0 04            [24] 1305 	push	ar4
      00026D 12r00r00         [24] 1306 	lcall	_CheckTimeout
      000270 AB 82            [24] 1307 	mov	r3,dpl
      000272 D0 04            [24] 1308 	pop	ar4
      000274 D0 05            [24] 1309 	pop	ar5
      000276 D0 06            [24] 1310 	pop	ar6
      000278 D0 07            [24] 1311 	pop	ar7
      00027A BB 01 02         [24] 1312 	cjne	r3,#0x01,00186$
      00027D 80 D5            [24] 1313 	sjmp	00118$
      00027F                       1314 00186$:
                                   1315 ;	src/mc96f8x16_i2c.c:96: return HAL_TIMEOUT;
      00027F 75 82 02         [24] 1316 	mov	dpl,#0x02
      000282 22               [24] 1317 	ret
      000283                       1318 00120$:
                                   1319 ;	src/mc96f8x16_i2c.c:99: *pData = I2CDR;
      000283 90r00r09         [24] 1320 	mov	dptr,#_I2C_Master_Receive_PARM_3
      000286 E0               [24] 1321 	movx	a,@dptr
      000287 FD               [12] 1322 	mov	r5,a
      000288 A3               [24] 1323 	inc	dptr
      000289 E0               [24] 1324 	movx	a,@dptr
      00028A FE               [12] 1325 	mov	r6,a
      00028B A3               [24] 1326 	inc	dptr
      00028C E0               [24] 1327 	movx	a,@dptr
      00028D FF               [12] 1328 	mov	r7,a
      00028E 8D 82            [24] 1329 	mov	dpl,r5
      000290 8E 83            [24] 1330 	mov	dph,r6
      000292 8F F0            [24] 1331 	mov	b,r7
      000294 E5*5D            [12] 1332 	mov	a,_I2CDR
      000296 12r00r00         [24] 1333 	lcall	__gptrput
      000299 80 04            [24] 1334 	sjmp	00123$
      00029B                       1335 00122$:
                                   1336 ;	src/mc96f8x16_i2c.c:103: return HAL_BUSY;
      00029B 75 82 04         [24] 1337 	mov	dpl,#0x04
      00029E 22               [24] 1338 	ret
      00029F                       1339 00123$:
                                   1340 ;	src/mc96f8x16_i2c.c:105: I2CCR |= I2CCR_STOPC;   /* Stop transmit */
      00029F 43*59 02         [24] 1341 	orl	_I2CCR,#0x02
                                   1342 ;	src/mc96f8x16_i2c.c:106: I2CSR &= ~(I2CSR_GCALL | I2CSR_TEND | I2CSR_STOPD | I2CSR_SSEL | I2CSR_MLOST);  /* Clear interrupt bits */  
      0002A2 53*5A 07         [24] 1343 	anl	_I2CSR,#0x07
                                   1344 ;	src/mc96f8x16_i2c.c:107: return HAL_OK;
      0002A5 75 82 01         [24] 1345 	mov	dpl,#0x01
                                   1346 ;	src/mc96f8x16_i2c.c:108: }
      0002A8 22               [24] 1347 	ret
                                   1348 	.area CSEG    (CODE)
                                   1349 	.area CONST   (CODE)
                                   1350 	.area XINIT   (CODE)
                                   1351 	.area CABS    (ABS,CODE)
