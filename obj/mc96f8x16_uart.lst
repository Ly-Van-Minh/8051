                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.14 #12827 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mc96f8x16_uart
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _UART_Receive_ISR
                                     12 	.globl _CheckTimeout
                                     13 	.globl _GetTick
                                     14 	.globl _P37
                                     15 	.globl _P36
                                     16 	.globl _P35
                                     17 	.globl _P34
                                     18 	.globl _P33
                                     19 	.globl _P32
                                     20 	.globl _P31
                                     21 	.globl _P30
                                     22 	.globl _P27
                                     23 	.globl _P26
                                     24 	.globl _P25
                                     25 	.globl _P24
                                     26 	.globl _P23
                                     27 	.globl _P22
                                     28 	.globl _P21
                                     29 	.globl _P20
                                     30 	.globl _P17
                                     31 	.globl _P16
                                     32 	.globl _P15
                                     33 	.globl _P14
                                     34 	.globl _P13
                                     35 	.globl _P12
                                     36 	.globl _P11
                                     37 	.globl _P10
                                     38 	.globl _P07
                                     39 	.globl _P06
                                     40 	.globl _P05
                                     41 	.globl _P04
                                     42 	.globl _P03
                                     43 	.globl _P02
                                     44 	.globl _P01
                                     45 	.globl _P00
                                     46 	.globl _EO
                                     47 	.globl _DPH1
                                     48 	.globl _DPL1
                                     49 	.globl _DPH
                                     50 	.globl _DPL
                                     51 	.globl _SP
                                     52 	.globl _PSW
                                     53 	.globl _B
                                     54 	.globl _ACC
                                     55 	.globl _FMCR
                                     56 	.globl _FIDR
                                     57 	.globl _FSADRL
                                     58 	.globl _FSADRM
                                     59 	.globl _FSADRH
                                     60 	.globl _I2CSCHR
                                     61 	.globl _I2CSCLR
                                     62 	.globl _I2CSDHR
                                     63 	.globl _I2CDR
                                     64 	.globl _I2CSAR1
                                     65 	.globl _I2CSAR0
                                     66 	.globl _I2CSR
                                     67 	.globl _I2CCR
                                     68 	.globl _UARTDR
                                     69 	.globl _UARTBD
                                     70 	.globl _UARTST
                                     71 	.globl _UARTCR3
                                     72 	.globl _UARTCR2
                                     73 	.globl _UARTCR1
                                     74 	.globl _SPISR
                                     75 	.globl _SPIDR
                                     76 	.globl _SPICR
                                     77 	.globl _ADWIFRH
                                     78 	.globl _ADWIFRL
                                     79 	.globl _ADWCRH
                                     80 	.globl _ADWCRL
                                     81 	.globl _ADWRCR3
                                     82 	.globl _ADWRCR2
                                     83 	.globl _ADWRCR1
                                     84 	.globl _ADWRCR0
                                     85 	.globl _ADCDRH
                                     86 	.globl _ADCDRL
                                     87 	.globl _ADCCRH
                                     88 	.globl _ADCCRL
                                     89 	.globl _BUZCR
                                     90 	.globl _BUZDR
                                     91 	.globl _T2BDRH
                                     92 	.globl _T2BDRL
                                     93 	.globl _T2ADRH
                                     94 	.globl _T2ADRL
                                     95 	.globl _T2CRH
                                     96 	.globl _T2CRL
                                     97 	.globl _T1BDRH
                                     98 	.globl _T1BDRL
                                     99 	.globl _T1ADRH
                                    100 	.globl _T1ADRL
                                    101 	.globl _T1CRH
                                    102 	.globl _T1CRL
                                    103 	.globl _T0CDR
                                    104 	.globl _T0DR
                                    105 	.globl _T0CNT
                                    106 	.globl _T0CR
                                    107 	.globl _WTCR
                                    108 	.globl _WTCNT
                                    109 	.globl _WTDR
                                    110 	.globl _WDTCR
                                    111 	.globl _WDTCNT
                                    112 	.globl _WDTDR
                                    113 	.globl _LVICR
                                    114 	.globl _LVRCR
                                    115 	.globl _PCON
                                    116 	.globl _RSTFR
                                    117 	.globl _BITCR
                                    118 	.globl _BITCNT
                                    119 	.globl _OSCCR
                                    120 	.globl _SCCR
                                    121 	.globl _EIPOL2
                                    122 	.globl _EIPOL1
                                    123 	.globl _EIPOL0H
                                    124 	.globl _EIPOL0L
                                    125 	.globl _EIFLAG1
                                    126 	.globl _EIFLAG0
                                    127 	.globl _IIFLAG
                                    128 	.globl _IP1
                                    129 	.globl _IP
                                    130 	.globl _IE3
                                    131 	.globl _IE2
                                    132 	.globl _IE1
                                    133 	.globl _IE
                                    134 	.globl _P3FSR
                                    135 	.globl _P2FSR
                                    136 	.globl _P1FSRH
                                    137 	.globl _P1FSRL
                                    138 	.globl _P0FSR
                                    139 	.globl _P3PU
                                    140 	.globl _P3OD
                                    141 	.globl _P3IO
                                    142 	.globl _P3
                                    143 	.globl _P2PU
                                    144 	.globl _P2OD
                                    145 	.globl _P2IO
                                    146 	.globl _P2
                                    147 	.globl _P12DB
                                    148 	.globl _P1PU
                                    149 	.globl _P1OD
                                    150 	.globl _P1IO
                                    151 	.globl _P1
                                    152 	.globl _P03DB
                                    153 	.globl _P0PU
                                    154 	.globl _P0OD
                                    155 	.globl _P0IO
                                    156 	.globl _P0
                                    157 	.globl _RxData
                                    158 	.globl _UART_Receive_PARM_3
                                    159 	.globl _UART_Receive_PARM_2
                                    160 	.globl _UART_Transmit_PARM_3
                                    161 	.globl _UART_Transmit_PARM_2
                                    162 	.globl _UART_Config
                                    163 	.globl _UART_Transmit
                                    164 	.globl _UART_Receive
                                    165 ;--------------------------------------------------------
                                    166 ; special function registers
                                    167 ;--------------------------------------------------------
                                    168 	.area RSEG    (ABS,DATA)
      000000                        169 	.org 0x0000
      000000                        170 _P0::
      000000                        171 	.ds 1
      000001                        172 _P0IO::
      000001                        173 	.ds 1
      000002                        174 _P0OD::
      000002                        175 	.ds 1
      000003                        176 _P0PU::
      000003                        177 	.ds 1
      000004                        178 _P03DB::
      000004                        179 	.ds 1
      000005                        180 _P1::
      000005                        181 	.ds 1
      000006                        182 _P1IO::
      000006                        183 	.ds 1
      000007                        184 _P1OD::
      000007                        185 	.ds 1
      000008                        186 _P1PU::
      000008                        187 	.ds 1
      000009                        188 _P12DB::
      000009                        189 	.ds 1
      00000A                        190 _P2::
      00000A                        191 	.ds 1
      00000B                        192 _P2IO::
      00000B                        193 	.ds 1
      00000C                        194 _P2OD::
      00000C                        195 	.ds 1
      00000D                        196 _P2PU::
      00000D                        197 	.ds 1
      00000E                        198 _P3::
      00000E                        199 	.ds 1
      00000F                        200 _P3IO::
      00000F                        201 	.ds 1
      000010                        202 _P3OD::
      000010                        203 	.ds 1
      000011                        204 _P3PU::
      000011                        205 	.ds 1
      000012                        206 _P0FSR::
      000012                        207 	.ds 1
      000013                        208 _P1FSRL::
      000013                        209 	.ds 1
      000014                        210 _P1FSRH::
      000014                        211 	.ds 1
      000015                        212 _P2FSR::
      000015                        213 	.ds 1
      000016                        214 _P3FSR::
      000016                        215 	.ds 1
      000017                        216 _IE::
      000017                        217 	.ds 1
      000018                        218 _IE1::
      000018                        219 	.ds 1
      000019                        220 _IE2::
      000019                        221 	.ds 1
      00001A                        222 _IE3::
      00001A                        223 	.ds 1
      00001B                        224 _IP::
      00001B                        225 	.ds 1
      00001C                        226 _IP1::
      00001C                        227 	.ds 1
      00001D                        228 _IIFLAG::
      00001D                        229 	.ds 1
      00001E                        230 _EIFLAG0::
      00001E                        231 	.ds 1
      00001F                        232 _EIFLAG1::
      00001F                        233 	.ds 1
      000020                        234 _EIPOL0L::
      000020                        235 	.ds 1
      000021                        236 _EIPOL0H::
      000021                        237 	.ds 1
      000022                        238 _EIPOL1::
      000022                        239 	.ds 1
      000023                        240 _EIPOL2::
      000023                        241 	.ds 1
      000024                        242 _SCCR::
      000024                        243 	.ds 1
      000025                        244 _OSCCR::
      000025                        245 	.ds 1
      000026                        246 _BITCNT::
      000026                        247 	.ds 1
      000027                        248 _BITCR::
      000027                        249 	.ds 1
      000028                        250 _RSTFR::
      000028                        251 	.ds 1
      000029                        252 _PCON::
      000029                        253 	.ds 1
      00002A                        254 _LVRCR::
      00002A                        255 	.ds 1
      00002B                        256 _LVICR::
      00002B                        257 	.ds 1
      00002C                        258 _WDTDR::
      00002C                        259 	.ds 1
      00002D                        260 _WDTCNT::
      00002D                        261 	.ds 1
      00002E                        262 _WDTCR::
      00002E                        263 	.ds 1
      00002F                        264 _WTDR::
      00002F                        265 	.ds 1
      000030                        266 _WTCNT::
      000030                        267 	.ds 1
      000031                        268 _WTCR::
      000031                        269 	.ds 1
      000032                        270 _T0CR::
      000032                        271 	.ds 1
      000033                        272 _T0CNT::
      000033                        273 	.ds 1
      000034                        274 _T0DR::
      000034                        275 	.ds 1
      000035                        276 _T0CDR::
      000035                        277 	.ds 1
      000036                        278 _T1CRL::
      000036                        279 	.ds 1
      000037                        280 _T1CRH::
      000037                        281 	.ds 1
      000038                        282 _T1ADRL::
      000038                        283 	.ds 1
      000039                        284 _T1ADRH::
      000039                        285 	.ds 1
      00003A                        286 _T1BDRL::
      00003A                        287 	.ds 1
      00003B                        288 _T1BDRH::
      00003B                        289 	.ds 1
      00003C                        290 _T2CRL::
      00003C                        291 	.ds 1
      00003D                        292 _T2CRH::
      00003D                        293 	.ds 1
      00003E                        294 _T2ADRL::
      00003E                        295 	.ds 1
      00003F                        296 _T2ADRH::
      00003F                        297 	.ds 1
      000040                        298 _T2BDRL::
      000040                        299 	.ds 1
      000041                        300 _T2BDRH::
      000041                        301 	.ds 1
      000042                        302 _BUZDR::
      000042                        303 	.ds 1
      000043                        304 _BUZCR::
      000043                        305 	.ds 1
      000044                        306 _ADCCRL::
      000044                        307 	.ds 1
      000045                        308 _ADCCRH::
      000045                        309 	.ds 1
      000046                        310 _ADCDRL::
      000046                        311 	.ds 1
      000047                        312 _ADCDRH::
      000047                        313 	.ds 1
      000048                        314 _ADWRCR0::
      000048                        315 	.ds 1
      000049                        316 _ADWRCR1::
      000049                        317 	.ds 1
      00004A                        318 _ADWRCR2::
      00004A                        319 	.ds 1
      00004B                        320 _ADWRCR3::
      00004B                        321 	.ds 1
      00004C                        322 _ADWCRL::
      00004C                        323 	.ds 1
      00004D                        324 _ADWCRH::
      00004D                        325 	.ds 1
      00004E                        326 _ADWIFRL::
      00004E                        327 	.ds 1
      00004F                        328 _ADWIFRH::
      00004F                        329 	.ds 1
      000050                        330 _SPICR::
      000050                        331 	.ds 1
      000051                        332 _SPIDR::
      000051                        333 	.ds 1
      000052                        334 _SPISR::
      000052                        335 	.ds 1
      000053                        336 _UARTCR1::
      000053                        337 	.ds 1
      000054                        338 _UARTCR2::
      000054                        339 	.ds 1
      000055                        340 _UARTCR3::
      000055                        341 	.ds 1
      000056                        342 _UARTST::
      000056                        343 	.ds 1
      000057                        344 _UARTBD::
      000057                        345 	.ds 1
      000058                        346 _UARTDR::
      000058                        347 	.ds 1
      000059                        348 _I2CCR::
      000059                        349 	.ds 1
      00005A                        350 _I2CSR::
      00005A                        351 	.ds 1
      00005B                        352 _I2CSAR0::
      00005B                        353 	.ds 1
      00005C                        354 _I2CSAR1::
      00005C                        355 	.ds 1
      00005D                        356 _I2CDR::
      00005D                        357 	.ds 1
      00005E                        358 _I2CSDHR::
      00005E                        359 	.ds 1
      00005F                        360 _I2CSCLR::
      00005F                        361 	.ds 1
      000060                        362 _I2CSCHR::
      000060                        363 	.ds 1
      000061                        364 _FSADRH::
      000061                        365 	.ds 1
      000062                        366 _FSADRM::
      000062                        367 	.ds 1
      000063                        368 _FSADRL::
      000063                        369 	.ds 1
      000064                        370 _FIDR::
      000064                        371 	.ds 1
      000065                        372 _FMCR::
      000065                        373 	.ds 1
      000066                        374 _ACC::
      000066                        375 	.ds 1
      000067                        376 _B::
      000067                        377 	.ds 1
      000068                        378 _PSW::
      000068                        379 	.ds 1
      000069                        380 _SP::
      000069                        381 	.ds 1
      00006A                        382 _DPL::
      00006A                        383 	.ds 1
      00006B                        384 _DPH::
      00006B                        385 	.ds 1
      00006C                        386 _DPL1::
      00006C                        387 	.ds 1
      00006D                        388 _DPH1::
      00006D                        389 	.ds 1
      00006E                        390 _EO::
      00006E                        391 	.ds 1
                                    392 ;--------------------------------------------------------
                                    393 ; special function bits
                                    394 ;--------------------------------------------------------
                                    395 	.area RSEG    (ABS,DATA)
      000000                        396 	.org 0x0000
      000000                        397 _P00::
      000000                        398 	.ds 1
      000001                        399 _P01::
      000001                        400 	.ds 1
      000002                        401 _P02::
      000002                        402 	.ds 1
      000003                        403 _P03::
      000003                        404 	.ds 1
      000004                        405 _P04::
      000004                        406 	.ds 1
      000005                        407 _P05::
      000005                        408 	.ds 1
      000006                        409 _P06::
      000006                        410 	.ds 1
      000007                        411 _P07::
      000007                        412 	.ds 1
      000008                        413 _P10::
      000008                        414 	.ds 1
      000009                        415 _P11::
      000009                        416 	.ds 1
      00000A                        417 _P12::
      00000A                        418 	.ds 1
      00000B                        419 _P13::
      00000B                        420 	.ds 1
      00000C                        421 _P14::
      00000C                        422 	.ds 1
      00000D                        423 _P15::
      00000D                        424 	.ds 1
      00000E                        425 _P16::
      00000E                        426 	.ds 1
      00000F                        427 _P17::
      00000F                        428 	.ds 1
      000010                        429 _P20::
      000010                        430 	.ds 1
      000011                        431 _P21::
      000011                        432 	.ds 1
      000012                        433 _P22::
      000012                        434 	.ds 1
      000013                        435 _P23::
      000013                        436 	.ds 1
      000014                        437 _P24::
      000014                        438 	.ds 1
      000015                        439 _P25::
      000015                        440 	.ds 1
      000016                        441 _P26::
      000016                        442 	.ds 1
      000017                        443 _P27::
      000017                        444 	.ds 1
      000018                        445 _P30::
      000018                        446 	.ds 1
      000019                        447 _P31::
      000019                        448 	.ds 1
      00001A                        449 _P32::
      00001A                        450 	.ds 1
      00001B                        451 _P33::
      00001B                        452 	.ds 1
      00001C                        453 _P34::
      00001C                        454 	.ds 1
      00001D                        455 _P35::
      00001D                        456 	.ds 1
      00001E                        457 _P36::
      00001E                        458 	.ds 1
      00001F                        459 _P37::
      00001F                        460 	.ds 1
                                    461 ;--------------------------------------------------------
                                    462 ; overlayable register banks
                                    463 ;--------------------------------------------------------
                                    464 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        465 	.ds 8
                                    466 ;--------------------------------------------------------
                                    467 ; internal ram data
                                    468 ;--------------------------------------------------------
                                    469 	.area DSEG    (DATA)
      000000                        470 _UART_Transmit_sloc0_1_0:
      000000                        471 	.ds 2
      000002                        472 _UART_Transmit_sloc1_1_0:
      000002                        473 	.ds 3
      000005                        474 _UART_Receive_sloc0_1_0:
      000005                        475 	.ds 2
      000007                        476 _UART_Receive_sloc1_1_0:
      000007                        477 	.ds 3
                                    478 ;--------------------------------------------------------
                                    479 ; overlayable items in internal ram 
                                    480 ;--------------------------------------------------------
                                    481 ;--------------------------------------------------------
                                    482 ; indirectly addressable internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area ISEG    (DATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area IABS    (ABS,DATA)
                                    489 	.area IABS    (ABS,DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; bit data
                                    492 ;--------------------------------------------------------
                                    493 	.area BSEG    (BIT)
                                    494 ;--------------------------------------------------------
                                    495 ; paged external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area PSEG    (PAG,XDATA)
                                    498 ;--------------------------------------------------------
                                    499 ; external ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area XSEG    (XDATA)
      000000                        502 _UART_Config_UART_Conf_65536_12:
      000000                        503 	.ds 3
      000003                        504 _UART_Transmit_PARM_2:
      000003                        505 	.ds 2
      000005                        506 _UART_Transmit_PARM_3:
      000005                        507 	.ds 2
      000007                        508 _UART_Transmit_Buffer_65536_14:
      000007                        509 	.ds 3
      00000A                        510 _UART_Receive_PARM_2:
      00000A                        511 	.ds 2
      00000C                        512 _UART_Receive_PARM_3:
      00000C                        513 	.ds 2
      00000E                        514 _UART_Receive_Buffer_65536_21:
      00000E                        515 	.ds 3
                                    516 ;--------------------------------------------------------
                                    517 ; absolute external ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XABS    (ABS,XDATA)
                                    520 ;--------------------------------------------------------
                                    521 ; external initialized ram data
                                    522 ;--------------------------------------------------------
                                    523 	.area XISEG   (XDATA)
      000000                        524 _RxData::
      000000                        525 	.ds 1
                                    526 	.area HOME    (CODE)
                                    527 	.area GSINIT0 (CODE)
                                    528 	.area GSINIT1 (CODE)
                                    529 	.area GSINIT2 (CODE)
                                    530 	.area GSINIT3 (CODE)
                                    531 	.area GSINIT4 (CODE)
                                    532 	.area GSINIT5 (CODE)
                                    533 	.area GSINIT  (CODE)
                                    534 	.area GSFINAL (CODE)
                                    535 	.area CSEG    (CODE)
                                    536 ;--------------------------------------------------------
                                    537 ; global & static initialisations
                                    538 ;--------------------------------------------------------
                                    539 	.area HOME    (CODE)
                                    540 	.area GSINIT  (CODE)
                                    541 	.area GSFINAL (CODE)
                                    542 	.area GSINIT  (CODE)
                                    543 ;	./inc/mc96f8x16.h:37: sfr			P0			= 0x80;			// P0 Data Register
      000000 75*00 80         [24]  544 	mov	_P0,#0x80
                                    545 ;	./inc/mc96f8x16.h:47: sfr			P0IO		= 0xA1;			// P0 Direction Register
      000003 75*01 A1         [24]  546 	mov	_P0IO,#0xa1
                                    547 ;	./inc/mc96f8x16.h:48: sfr			P0OD		= 0x91;			// P0 Open-drain Selection Register
      000006 75*02 91         [24]  548 	mov	_P0OD,#0x91
                                    549 ;	./inc/mc96f8x16.h:49: sfr			P0PU		= 0xAC;			// P0 Pull-up Resistor Selection Register
      000009 75*03 AC         [24]  550 	mov	_P0PU,#0xac
                                    551 ;	./inc/mc96f8x16.h:50: sfr			P03DB		= 0xDE;			// P0/P3 Debounce Enable Register
      00000C 75*04 DE         [24]  552 	mov	_P03DB,#0xde
                                    553 ;	./inc/mc96f8x16.h:52: sfr			P1			= 0x88;			// P1 Data Register
      00000F 75*05 88         [24]  554 	mov	_P1,#0x88
                                    555 ;	./inc/mc96f8x16.h:62: sfr			P1IO		= 0xB1;			// P1 Direction Register
      000012 75*06 B1         [24]  556 	mov	_P1IO,#0xb1
                                    557 ;	./inc/mc96f8x16.h:63: sfr			P1OD		= 0x92;			// P1 Open-drain Selection Register
      000015 75*07 92         [24]  558 	mov	_P1OD,#0x92
                                    559 ;	./inc/mc96f8x16.h:64: sfr			P1PU		= 0xAD;			// P1 Pull-up Resistor Selection Register
      000018 75*08 AD         [24]  560 	mov	_P1PU,#0xad
                                    561 ;	./inc/mc96f8x16.h:65: sfr			P12DB		= 0xDF;			// P1/P2 Debounce Enable Register
      00001B 75*09 DF         [24]  562 	mov	_P12DB,#0xdf
                                    563 ;	./inc/mc96f8x16.h:67: sfr			P2			= 0x90;			// P2 Data Register
      00001E 75*0A 90         [24]  564 	mov	_P2,#0x90
                                    565 ;	./inc/mc96f8x16.h:77: sfr			P2IO		= 0xB9;			// P2 Direction Register
      000021 75*0B B9         [24]  566 	mov	_P2IO,#0xb9
                                    567 ;	./inc/mc96f8x16.h:78: sfr			P2OD		= 0x93;			// P2 Open-drain Selection Register
      000024 75*0C 93         [24]  568 	mov	_P2OD,#0x93
                                    569 ;	./inc/mc96f8x16.h:79: sfr			P2PU		= 0xAE;			// P2 Pull-up Resistor Selection Register
      000027 75*0D AE         [24]  570 	mov	_P2PU,#0xae
                                    571 ;	./inc/mc96f8x16.h:81: sfr			P3			= 0x98;			// P3 Data Register
      00002A 75*0E 98         [24]  572 	mov	_P3,#0x98
                                    573 ;	./inc/mc96f8x16.h:91: sfr			P3IO		= 0xC1;			// P3 Direction Register
      00002D 75*0F C1         [24]  574 	mov	_P3IO,#0xc1
                                    575 ;	./inc/mc96f8x16.h:92: sfr			P3OD		= 0x94;			// P3 Open-drain Selection Register
      000030 75*10 94         [24]  576 	mov	_P3OD,#0x94
                                    577 ;	./inc/mc96f8x16.h:93: sfr			P3PU		= 0xAF;			// P3 Pull-up Resistor Selection Register
      000033 75*11 AF         [24]  578 	mov	_P3PU,#0xaf
                                    579 ;	./inc/mc96f8x16.h:95: sfr			P0FSR		= 0xD3;			//P0 Function Selection Register
      000036 75*12 D3         [24]  580 	mov	_P0FSR,#0xd3
                                    581 ;	./inc/mc96f8x16.h:96: sfr			P1FSRL		= 0xD4;			//P1 Function Selection Low Register
      000039 75*13 D4         [24]  582 	mov	_P1FSRL,#0xd4
                                    583 ;	./inc/mc96f8x16.h:97: sfr			P1FSRH		= 0xD5;			//P1 Function Selection High Register
      00003C 75*14 D5         [24]  584 	mov	_P1FSRH,#0xd5
                                    585 ;	./inc/mc96f8x16.h:98: sfr			P2FSR		= 0xD6;			//P2 Function Selection Register
      00003F 75*15 D6         [24]  586 	mov	_P2FSR,#0xd6
                                    587 ;	./inc/mc96f8x16.h:99: sfr			P3FSR		= 0xD7;			//P3 Function Selection Register
      000042 75*16 D7         [24]  588 	mov	_P3FSR,#0xd7
                                    589 ;	./inc/mc96f8x16.h:102: sfr			IE			= 0xA8;			// Interrupt Enable Register 0
      000045 75*17 A8         [24]  590 	mov	_IE,#0xa8
                                    591 ;	./inc/mc96f8x16.h:103: sfr			IE1			= 0xA9;			// Interrupt Enable Register 1
      000048 75*18 A9         [24]  592 	mov	_IE1,#0xa9
                                    593 ;	./inc/mc96f8x16.h:104: sfr			IE2			= 0xAA;			// Interrupt Enable Register 2
      00004B 75*19 AA         [24]  594 	mov	_IE2,#0xaa
                                    595 ;	./inc/mc96f8x16.h:105: sfr			IE3			= 0xAB;			// Interrupt Enable Register 3
      00004E 75*1A AB         [24]  596 	mov	_IE3,#0xab
                                    597 ;	./inc/mc96f8x16.h:106: sfr			IP			= 0xB8;			// Interrupt Priority Register 0
      000051 75*1B B8         [24]  598 	mov	_IP,#0xb8
                                    599 ;	./inc/mc96f8x16.h:107: sfr			IP1			= 0xF8;			// Interrupt Priority Register 1
      000054 75*1C F8         [24]  600 	mov	_IP1,#0xf8
                                    601 ;	./inc/mc96f8x16.h:108: sfr			IIFLAG		= 0xA0;			// Internal Interrupt Flag Register
      000057 75*1D A0         [24]  602 	mov	_IIFLAG,#0xa0
                                    603 ;	./inc/mc96f8x16.h:109: sfr			EIFLAG0		= 0xC0;			// External Interrupt Flag 0 Register
      00005A 75*1E C0         [24]  604 	mov	_EIFLAG0,#0xc0
                                    605 ;	./inc/mc96f8x16.h:110: sfr			EIFLAG1		= 0xB0;			// External Interrupt Flag 1 Register
      00005D 75*1F B0         [24]  606 	mov	_EIFLAG1,#0xb0
                                    607 ;	./inc/mc96f8x16.h:111: sfr			EIPOL0L		= 0xA4;			// External Interrupt Polarity 0 Low Register
      000060 75*20 A4         [24]  608 	mov	_EIPOL0L,#0xa4
                                    609 ;	./inc/mc96f8x16.h:112: sfr			EIPOL0H		= 0xA5;			// External Interrupt Polarity 0 High Register
      000063 75*21 A5         [24]  610 	mov	_EIPOL0H,#0xa5
                                    611 ;	./inc/mc96f8x16.h:113: sfr			EIPOL1		= 0xA6;			// External Interrupt Polarity 1 Register
      000066 75*22 A6         [24]  612 	mov	_EIPOL1,#0xa6
                                    613 ;	./inc/mc96f8x16.h:114: sfr			EIPOL2		= 0xA7;			// External Interrupt Polarity 2 Register
      000069 75*23 A7         [24]  614 	mov	_EIPOL2,#0xa7
                                    615 ;	./inc/mc96f8x16.h:117: sfr			SCCR		= 0x8A;			// System Clock Control Register
      00006C 75*24 8A         [24]  616 	mov	_SCCR,#0x8a
                                    617 ;	./inc/mc96f8x16.h:118: sfr			OSCCR		= 0xC8;			// Oscillator Control Register
      00006F 75*25 C8         [24]  618 	mov	_OSCCR,#0xc8
                                    619 ;	./inc/mc96f8x16.h:119: sfr			BITCNT		= 0x8C;			// Basic Interval Timer Counter Register
      000072 75*26 8C         [24]  620 	mov	_BITCNT,#0x8c
                                    621 ;	./inc/mc96f8x16.h:120: sfr			BITCR		= 0x8B;			// Basic Interval Timer Control Register
      000075 75*27 8B         [24]  622 	mov	_BITCR,#0x8b
                                    623 ;	./inc/mc96f8x16.h:121: sfr			RSTFR		= 0xE8;			// Reset Flag Register
      000078 75*28 E8         [24]  624 	mov	_RSTFR,#0xe8
                                    625 ;	./inc/mc96f8x16.h:122: sfr			PCON		= 0x87;			// Power Control Register
      00007B 75*29 87         [24]  626 	mov	_PCON,#0x87
                                    627 ;	./inc/mc96f8x16.h:123: sfr			LVRCR		= 0xD8;			// Low Voltage Reset Control Register
      00007E 75*2A D8         [24]  628 	mov	_LVRCR,#0xd8
                                    629 ;	./inc/mc96f8x16.h:124: sfr			LVICR		= 0x86;			// Low Voltage Indicator Control Register
      000081 75*2B 86         [24]  630 	mov	_LVICR,#0x86
                                    631 ;	./inc/mc96f8x16.h:127: sfr			WDTDR		= 0x8E;			// Watch Dog Timer Data Register
      000084 75*2C 8E         [24]  632 	mov	_WDTDR,#0x8e
                                    633 ;	./inc/mc96f8x16.h:128: sfr			WDTCNT		= 0x8E;			// Watch Dog Timer Counter Register
      000087 75*2D 8E         [24]  634 	mov	_WDTCNT,#0x8e
                                    635 ;	./inc/mc96f8x16.h:129: sfr			WDTCR		= 0x8D;			// Watch Dog Timer Control Register
      00008A 75*2E 8D         [24]  636 	mov	_WDTCR,#0x8d
                                    637 ;	./inc/mc96f8x16.h:132: sfr			WTDR		= 0x89;			// Watch Timer Data Register
      00008D 75*2F 89         [24]  638 	mov	_WTDR,#0x89
                                    639 ;	./inc/mc96f8x16.h:133: sfr			WTCNT		= 0x89;			// Watch Timer Counter Register
      000090 75*30 89         [24]  640 	mov	_WTCNT,#0x89
                                    641 ;	./inc/mc96f8x16.h:134: sfr			WTCR		= 0x96;			// Watch Timer Control Register
      000093 75*31 96         [24]  642 	mov	_WTCR,#0x96
                                    643 ;	./inc/mc96f8x16.h:137: sfr			T0CR		= 0xB2;			// Timer 0 Control Register
      000096 75*32 B2         [24]  644 	mov	_T0CR,#0xb2
                                    645 ;	./inc/mc96f8x16.h:138: sfr			T0CNT		= 0xB3;			// Timer 0 Counter Register
      000099 75*33 B3         [24]  646 	mov	_T0CNT,#0xb3
                                    647 ;	./inc/mc96f8x16.h:139: sfr			T0DR		= 0xB4;			// Timer 0 Data Register
      00009C 75*34 B4         [24]  648 	mov	_T0DR,#0xb4
                                    649 ;	./inc/mc96f8x16.h:140: sfr			T0CDR		= 0xB4;			// Timer 0 Capture Data Register
      00009F 75*35 B4         [24]  650 	mov	_T0CDR,#0xb4
                                    651 ;	./inc/mc96f8x16.h:146: sfr			T1CRL		= 0xBA;			// Timer 1 Control Low Register
      0000A2 75*36 BA         [24]  652 	mov	_T1CRL,#0xba
                                    653 ;	./inc/mc96f8x16.h:147: sfr			T1CRH		= 0xBB;			// Timer 1 Control High Register
      0000A5 75*37 BB         [24]  654 	mov	_T1CRH,#0xbb
                                    655 ;	./inc/mc96f8x16.h:148: sfr			T1ADRL		= 0xBC;			// Timer 1 A Data Low Register
      0000A8 75*38 BC         [24]  656 	mov	_T1ADRL,#0xbc
                                    657 ;	./inc/mc96f8x16.h:149: sfr			T1ADRH		= 0xBD;			// Timer 1 A Data High Register
      0000AB 75*39 BD         [24]  658 	mov	_T1ADRH,#0xbd
                                    659 ;	./inc/mc96f8x16.h:150: sfr			T1BDRL		= 0xBE;			// Timer 1 B Data Low Register
      0000AE 75*3A BE         [24]  660 	mov	_T1BDRL,#0xbe
                                    661 ;	./inc/mc96f8x16.h:151: sfr			T1BDRH		= 0xBF;			// Timer 1 B Data High Register
      0000B1 75*3B BF         [24]  662 	mov	_T1BDRH,#0xbf
                                    663 ;	./inc/mc96f8x16.h:154: sfr			T2CRL		= 0xC2;			// Timer 2 Control Low Register
      0000B4 75*3C C2         [24]  664 	mov	_T2CRL,#0xc2
                                    665 ;	./inc/mc96f8x16.h:155: sfr			T2CRH		= 0xC3;			// Timer 2 Control High Register
      0000B7 75*3D C3         [24]  666 	mov	_T2CRH,#0xc3
                                    667 ;	./inc/mc96f8x16.h:156: sfr			T2ADRL		= 0xC4;			// Timer 2 A Data Low Register
      0000BA 75*3E C4         [24]  668 	mov	_T2ADRL,#0xc4
                                    669 ;	./inc/mc96f8x16.h:157: sfr			T2ADRH		= 0xC5;			// Timer 2 A Data High Register
      0000BD 75*3F C5         [24]  670 	mov	_T2ADRH,#0xc5
                                    671 ;	./inc/mc96f8x16.h:158: sfr			T2BDRL		= 0xC6;			// Timer 2 B Data Low Register
      0000C0 75*40 C6         [24]  672 	mov	_T2BDRL,#0xc6
                                    673 ;	./inc/mc96f8x16.h:159: sfr			T2BDRH		= 0xC7;			// Timer 2 B Data High Register
      0000C3 75*41 C7         [24]  674 	mov	_T2BDRH,#0xc7
                                    675 ;	./inc/mc96f8x16.h:162: sfr			BUZDR		= 0x8F;			// BUZZER Data Register
      0000C6 75*42 8F         [24]  676 	mov	_BUZDR,#0x8f
                                    677 ;	./inc/mc96f8x16.h:163: sfr			BUZCR		= 0x97;			// BUZZER Control Register
      0000C9 75*43 97         [24]  678 	mov	_BUZCR,#0x97
                                    679 ;	./inc/mc96f8x16.h:166: sfr			ADCCRL		= 0x9C;			// A/D Converter Control Low Register
      0000CC 75*44 9C         [24]  680 	mov	_ADCCRL,#0x9c
                                    681 ;	./inc/mc96f8x16.h:167: sfr			ADCCRH		= 0x9D;			// A/D Converter Control High Register
      0000CF 75*45 9D         [24]  682 	mov	_ADCCRH,#0x9d
                                    683 ;	./inc/mc96f8x16.h:168: sfr			ADCDRL		= 0x9E;			// A/D Converter Data Low Register
      0000D2 75*46 9E         [24]  684 	mov	_ADCDRL,#0x9e
                                    685 ;	./inc/mc96f8x16.h:169: sfr			ADCDRH		= 0x9F;			// A/D Converter Data High Register
      0000D5 75*47 9F         [24]  686 	mov	_ADCDRH,#0x9f
                                    687 ;	./inc/mc96f8x16.h:171: sfr			ADWRCR0		= 0xF2;			// ADC Wake-up Resistor Control Register 0
      0000D8 75*48 F2         [24]  688 	mov	_ADWRCR0,#0xf2
                                    689 ;	./inc/mc96f8x16.h:172: sfr			ADWRCR1		= 0xF3;			// ADC Wake-up Resistor Control Register 1
      0000DB 75*49 F3         [24]  690 	mov	_ADWRCR1,#0xf3
                                    691 ;	./inc/mc96f8x16.h:173: sfr			ADWRCR2		= 0xF4;			// ADC Wake-up Resistor Control Register 2
      0000DE 75*4A F4         [24]  692 	mov	_ADWRCR2,#0xf4
                                    693 ;	./inc/mc96f8x16.h:174: sfr			ADWRCR3		= 0xF5;			// ADC Wake-up Resistor Control Register 3
      0000E1 75*4B F5         [24]  694 	mov	_ADWRCR3,#0xf5
                                    695 ;	./inc/mc96f8x16.h:175: sfr			ADWCRL		= 0xF6;			// ADC Wake-up Control Low Register
      0000E4 75*4C F6         [24]  696 	mov	_ADWCRL,#0xf6
                                    697 ;	./inc/mc96f8x16.h:176: sfr			ADWCRH		= 0xF7;			// ADC Wake-up Control High Register
      0000E7 75*4D F7         [24]  698 	mov	_ADWCRH,#0xf7
                                    699 ;	./inc/mc96f8x16.h:177: sfr			ADWIFRL		= 0xDC;			// ADC Wake-up Interrupt Flag Low Register
      0000EA 75*4E DC         [24]  700 	mov	_ADWIFRL,#0xdc
                                    701 ;	./inc/mc96f8x16.h:178: sfr			ADWIFRH		= 0xDD;			// ADC Wake-up Interrupt Flag High Register
      0000ED 75*4F DD         [24]  702 	mov	_ADWIFRH,#0xdd
                                    703 ;	./inc/mc96f8x16.h:181: sfr			SPICR		= 0xB5;			// SPI Control Register
      0000F0 75*50 B5         [24]  704 	mov	_SPICR,#0xb5
                                    705 ;	./inc/mc96f8x16.h:182: sfr			SPIDR		= 0xB6;			// SPI Data Register
      0000F3 75*51 B6         [24]  706 	mov	_SPIDR,#0xb6
                                    707 ;	./inc/mc96f8x16.h:183: sfr			SPISR		= 0xB7;			// SPI Status Register
      0000F6 75*52 B7         [24]  708 	mov	_SPISR,#0xb7
                                    709 ;	./inc/mc96f8x16.h:186: sfr			UARTCR1		= 0xE2;			// UART Control Register 1
      0000F9 75*53 E2         [24]  710 	mov	_UARTCR1,#0xe2
                                    711 ;	./inc/mc96f8x16.h:187: sfr			UARTCR2		= 0xE3;			// UART Control Register 2
      0000FC 75*54 E3         [24]  712 	mov	_UARTCR2,#0xe3
                                    713 ;	./inc/mc96f8x16.h:188: sfr			UARTCR3		= 0xE4;			// UART Control Register 3
      0000FF 75*55 E4         [24]  714 	mov	_UARTCR3,#0xe4
                                    715 ;	./inc/mc96f8x16.h:189: sfr			UARTST		= 0xE5;			// UART Status Register
      000102 75*56 E5         [24]  716 	mov	_UARTST,#0xe5
                                    717 ;	./inc/mc96f8x16.h:190: sfr			UARTBD		= 0xE6;			// UART BaudRate Register
      000105 75*57 E6         [24]  718 	mov	_UARTBD,#0xe6
                                    719 ;	./inc/mc96f8x16.h:191: sfr			UARTDR		= 0xE7;			// UART Data Register
      000108 75*58 E7         [24]  720 	mov	_UARTDR,#0xe7
                                    721 ;	./inc/mc96f8x16.h:194: sfr			I2CCR		= 0xE9;			// I2C Control Register
      00010B 75*59 E9         [24]  722 	mov	_I2CCR,#0xe9
                                    723 ;	./inc/mc96f8x16.h:195: sfr			I2CSR		= 0xEA;			// I2C Status Register
      00010E 75*5A EA         [24]  724 	mov	_I2CSR,#0xea
                                    725 ;	./inc/mc96f8x16.h:196: sfr			I2CSAR0		= 0xEB;			// I2C Slave Address 0 Register
      000111 75*5B EB         [24]  726 	mov	_I2CSAR0,#0xeb
                                    727 ;	./inc/mc96f8x16.h:197: sfr			I2CSAR1		= 0xF1;			// I2C Slave Address 1 Register
      000114 75*5C F1         [24]  728 	mov	_I2CSAR1,#0xf1
                                    729 ;	./inc/mc96f8x16.h:198: sfr			I2CDR		= 0xEC;			// I2C Data Register
      000117 75*5D EC         [24]  730 	mov	_I2CDR,#0xec
                                    731 ;	./inc/mc96f8x16.h:199: sfr			I2CSDHR		= 0xED;			// I2C SDA Hold Time Register
      00011A 75*5E ED         [24]  732 	mov	_I2CSDHR,#0xed
                                    733 ;	./inc/mc96f8x16.h:200: sfr			I2CSCLR		= 0xEE;			// I2C SCL Low Period Register
      00011D 75*5F EE         [24]  734 	mov	_I2CSCLR,#0xee
                                    735 ;	./inc/mc96f8x16.h:201: sfr			I2CSCHR		= 0xEF;			// I2C SCL High Period Register
      000120 75*60 EF         [24]  736 	mov	_I2CSCHR,#0xef
                                    737 ;	./inc/mc96f8x16.h:204: sfr			FSADRH		= 0xFA;			// Flash Sector Address High Register
      000123 75*61 FA         [24]  738 	mov	_FSADRH,#0xfa
                                    739 ;	./inc/mc96f8x16.h:205: sfr			FSADRM		= 0xFB;			// Flash Sector Address Middle Register
      000126 75*62 FB         [24]  740 	mov	_FSADRM,#0xfb
                                    741 ;	./inc/mc96f8x16.h:206: sfr			FSADRL		= 0xFC;			// Flash Sector Address Low Register
      000129 75*63 FC         [24]  742 	mov	_FSADRL,#0xfc
                                    743 ;	./inc/mc96f8x16.h:207: sfr			FIDR		= 0xFD;			// Flash Identification Register
      00012C 75*64 FD         [24]  744 	mov	_FIDR,#0xfd
                                    745 ;	./inc/mc96f8x16.h:208: sfr			FMCR		= 0xFE;			// Flash Mode Control Register
      00012F 75*65 FE         [24]  746 	mov	_FMCR,#0xfe
                                    747 ;	./inc/mc96f8x16.h:210: sfr			ACC			= 0xE0;
      000132 75*66 E0         [24]  748 	mov	_ACC,#0xe0
                                    749 ;	./inc/mc96f8x16.h:211: sfr			B			= 0xF0;
      000135 75*67 F0         [24]  750 	mov	_B,#0xf0
                                    751 ;	./inc/mc96f8x16.h:212: sfr			PSW			= 0xD0;
      000138 75*68 D0         [24]  752 	mov	_PSW,#0xd0
                                    753 ;	./inc/mc96f8x16.h:213: sfr			SP			= 0x81;
      00013B 75*69 81         [24]  754 	mov	_SP,#0x81
                                    755 ;	./inc/mc96f8x16.h:214: sfr			DPL			= 0x82;
      00013E 75*6A 82         [24]  756 	mov	_DPL,#0x82
                                    757 ;	./inc/mc96f8x16.h:215: sfr			DPH			= 0x83;
      000141 75*6B 83         [24]  758 	mov	_DPH,#0x83
                                    759 ;	./inc/mc96f8x16.h:216: sfr			DPL1		= 0x84;
      000144 75*6C 84         [24]  760 	mov	_DPL1,#0x84
                                    761 ;	./inc/mc96f8x16.h:217: sfr			DPH1		= 0x85;
      000147 75*6D 85         [24]  762 	mov	_DPH1,#0x85
                                    763 ;	./inc/mc96f8x16.h:218: sfr			EO			= 0xA2;			// EXTENDED OPERATION REGISTER
      00014A 75*6E A2         [24]  764 	mov	_EO,#0xa2
                                    765 ;	./inc/mc96f8x16.h:38: sbit	P00			= 0x80;
                                    766 ;	assignBit
      00014D D2*00            [12]  767 	setb	_P00
                                    768 ;	./inc/mc96f8x16.h:39: sbit	P01			= 0x81;
                                    769 ;	assignBit
      00014F D2*01            [12]  770 	setb	_P01
                                    771 ;	./inc/mc96f8x16.h:40: sbit	P02			= 0x82;
                                    772 ;	assignBit
      000151 D2*02            [12]  773 	setb	_P02
                                    774 ;	./inc/mc96f8x16.h:41: sbit	P03			= 0x83;
                                    775 ;	assignBit
      000153 D2*03            [12]  776 	setb	_P03
                                    777 ;	./inc/mc96f8x16.h:42: sbit	P04			= 0x84;
                                    778 ;	assignBit
      000155 D2*04            [12]  779 	setb	_P04
                                    780 ;	./inc/mc96f8x16.h:43: sbit	P05			= 0x85;
                                    781 ;	assignBit
      000157 D2*05            [12]  782 	setb	_P05
                                    783 ;	./inc/mc96f8x16.h:44: sbit	P06			= 0x86;
                                    784 ;	assignBit
      000159 D2*06            [12]  785 	setb	_P06
                                    786 ;	./inc/mc96f8x16.h:45: sbit	P07			= 0x87;
                                    787 ;	assignBit
      00015B D2*07            [12]  788 	setb	_P07
                                    789 ;	./inc/mc96f8x16.h:53: sbit	P10			= 0x88;
                                    790 ;	assignBit
      00015D D2*08            [12]  791 	setb	_P10
                                    792 ;	./inc/mc96f8x16.h:54: sbit	P11			= 0x89;
                                    793 ;	assignBit
      00015F D2*09            [12]  794 	setb	_P11
                                    795 ;	./inc/mc96f8x16.h:55: sbit	P12			= 0x8A;
                                    796 ;	assignBit
      000161 D2*0A            [12]  797 	setb	_P12
                                    798 ;	./inc/mc96f8x16.h:56: sbit	P13			= 0x8B;
                                    799 ;	assignBit
      000163 D2*0B            [12]  800 	setb	_P13
                                    801 ;	./inc/mc96f8x16.h:57: sbit	P14			= 0x8C;
                                    802 ;	assignBit
      000165 D2*0C            [12]  803 	setb	_P14
                                    804 ;	./inc/mc96f8x16.h:58: sbit	P15			= 0x8D;
                                    805 ;	assignBit
      000167 D2*0D            [12]  806 	setb	_P15
                                    807 ;	./inc/mc96f8x16.h:59: sbit	P16			= 0x8E;
                                    808 ;	assignBit
      000169 D2*0E            [12]  809 	setb	_P16
                                    810 ;	./inc/mc96f8x16.h:60: sbit	P17			= 0x8F;
                                    811 ;	assignBit
      00016B D2*0F            [12]  812 	setb	_P17
                                    813 ;	./inc/mc96f8x16.h:68: sbit	P20			= 0x90;
                                    814 ;	assignBit
      00016D D2*10            [12]  815 	setb	_P20
                                    816 ;	./inc/mc96f8x16.h:69: sbit	P21			= 0x91;
                                    817 ;	assignBit
      00016F D2*11            [12]  818 	setb	_P21
                                    819 ;	./inc/mc96f8x16.h:70: sbit	P22			= 0x92;
                                    820 ;	assignBit
      000171 D2*12            [12]  821 	setb	_P22
                                    822 ;	./inc/mc96f8x16.h:71: sbit	P23			= 0x93;
                                    823 ;	assignBit
      000173 D2*13            [12]  824 	setb	_P23
                                    825 ;	./inc/mc96f8x16.h:72: sbit	P24			= 0x94;
                                    826 ;	assignBit
      000175 D2*14            [12]  827 	setb	_P24
                                    828 ;	./inc/mc96f8x16.h:73: sbit	P25			= 0x95;
                                    829 ;	assignBit
      000177 D2*15            [12]  830 	setb	_P25
                                    831 ;	./inc/mc96f8x16.h:74: sbit	P26			= 0x96;
                                    832 ;	assignBit
      000179 D2*16            [12]  833 	setb	_P26
                                    834 ;	./inc/mc96f8x16.h:75: sbit	P27			= 0x97;
                                    835 ;	assignBit
      00017B D2*17            [12]  836 	setb	_P27
                                    837 ;	./inc/mc96f8x16.h:82: sbit	P30			= 0x98;
                                    838 ;	assignBit
      00017D D2*18            [12]  839 	setb	_P30
                                    840 ;	./inc/mc96f8x16.h:83: sbit	P31			= 0x99;
                                    841 ;	assignBit
      00017F D2*19            [12]  842 	setb	_P31
                                    843 ;	./inc/mc96f8x16.h:84: sbit	P32			= 0x9A;
                                    844 ;	assignBit
      000181 D2*1A            [12]  845 	setb	_P32
                                    846 ;	./inc/mc96f8x16.h:85: sbit	P33			= 0x9B;
                                    847 ;	assignBit
      000183 D2*1B            [12]  848 	setb	_P33
                                    849 ;	./inc/mc96f8x16.h:86: sbit	P34			= 0x9C;
                                    850 ;	assignBit
      000185 D2*1C            [12]  851 	setb	_P34
                                    852 ;	./inc/mc96f8x16.h:87: sbit	P35			= 0x9D;
                                    853 ;	assignBit
      000187 D2*1D            [12]  854 	setb	_P35
                                    855 ;	./inc/mc96f8x16.h:88: sbit	P36			= 0x9E;
                                    856 ;	assignBit
      000189 D2*1E            [12]  857 	setb	_P36
                                    858 ;	./inc/mc96f8x16.h:89: sbit	P37			= 0x9F;
                                    859 ;	assignBit
      00018B D2*1F            [12]  860 	setb	_P37
                                    861 ;--------------------------------------------------------
                                    862 ; Home
                                    863 ;--------------------------------------------------------
                                    864 	.area HOME    (CODE)
                                    865 	.area HOME    (CODE)
                                    866 ;--------------------------------------------------------
                                    867 ; code
                                    868 ;--------------------------------------------------------
                                    869 	.area CSEG    (CODE)
                                    870 ;------------------------------------------------------------
                                    871 ;Allocation info for local variables in function 'UART_Config'
                                    872 ;------------------------------------------------------------
                                    873 ;UART_Conf                 Allocated with name '_UART_Config_UART_Conf_65536_12'
                                    874 ;------------------------------------------------------------
                                    875 ;	src/mc96f8x16_uart.c:8: void UART_Config(UARTConfig_Typedef *UART_Conf)
                                    876 ;	-----------------------------------------
                                    877 ;	 function UART_Config
                                    878 ;	-----------------------------------------
      000000                        879 _UART_Config:
                           000007   880 	ar7 = 0x07
                           000006   881 	ar6 = 0x06
                           000005   882 	ar5 = 0x05
                           000004   883 	ar4 = 0x04
                           000003   884 	ar3 = 0x03
                           000002   885 	ar2 = 0x02
                           000001   886 	ar1 = 0x01
                           000000   887 	ar0 = 0x00
      000000 AF F0            [24]  888 	mov	r7,b
      000002 AE 83            [24]  889 	mov	r6,dph
      000004 E5 82            [12]  890 	mov	a,dpl
      000006 90r00r00         [24]  891 	mov	dptr,#_UART_Config_UART_Conf_65536_12
      000009 F0               [24]  892 	movx	@dptr,a
      00000A EE               [12]  893 	mov	a,r6
      00000B A3               [24]  894 	inc	dptr
      00000C F0               [24]  895 	movx	@dptr,a
      00000D EF               [12]  896 	mov	a,r7
      00000E A3               [24]  897 	inc	dptr
      00000F F0               [24]  898 	movx	@dptr,a
                                    899 ;	src/mc96f8x16_uart.c:10: UARTBD = UART_Conf->Baud;
      000010 90r00r00         [24]  900 	mov	dptr,#_UART_Config_UART_Conf_65536_12
      000013 E0               [24]  901 	movx	a,@dptr
      000014 FD               [12]  902 	mov	r5,a
      000015 A3               [24]  903 	inc	dptr
      000016 E0               [24]  904 	movx	a,@dptr
      000017 FE               [12]  905 	mov	r6,a
      000018 A3               [24]  906 	inc	dptr
      000019 E0               [24]  907 	movx	a,@dptr
      00001A FF               [12]  908 	mov	r7,a
      00001B 8D 82            [24]  909 	mov	dpl,r5
      00001D 8E 83            [24]  910 	mov	dph,r6
      00001F 8F F0            [24]  911 	mov	b,r7
      000021 12r00r00         [24]  912 	lcall	__gptrget
      000024 F5*57            [12]  913 	mov	_UARTBD,a
                                    914 ;	src/mc96f8x16_uart.c:11: UARTCR1 = (UARTCR1 & 0x0F) | ((UART_Conf->Parity) << 4u);
      000026 E5*53            [12]  915 	mov	a,_UARTCR1
      000028 54 0F            [12]  916 	anl	a,#0x0f
      00002A FC               [12]  917 	mov	r4,a
      00002B 74 01            [12]  918 	mov	a,#0x01
      00002D 2D               [12]  919 	add	a,r5
      00002E F9               [12]  920 	mov	r1,a
      00002F E4               [12]  921 	clr	a
      000030 3E               [12]  922 	addc	a,r6
      000031 FA               [12]  923 	mov	r2,a
      000032 8F 03            [24]  924 	mov	ar3,r7
      000034 89 82            [24]  925 	mov	dpl,r1
      000036 8A 83            [24]  926 	mov	dph,r2
      000038 8B F0            [24]  927 	mov	b,r3
      00003A 12r00r00         [24]  928 	lcall	__gptrget
      00003D C4               [12]  929 	swap	a
      00003E 54 F0            [12]  930 	anl	a,#0xf0
      000040 4C               [12]  931 	orl	a,r4
      000041 F5*53            [12]  932 	mov	_UARTCR1,a
                                    933 ;	src/mc96f8x16_uart.c:12: UARTCR1 = (UARTCR1 & 0xF0) | ((UART_Conf->DataLength) << 1u);
      000043 E5*53            [12]  934 	mov	a,_UARTCR1
      000045 54 F0            [12]  935 	anl	a,#0xf0
      000047 FC               [12]  936 	mov	r4,a
      000048 74 02            [12]  937 	mov	a,#0x02
      00004A 2D               [12]  938 	add	a,r5
      00004B F9               [12]  939 	mov	r1,a
      00004C E4               [12]  940 	clr	a
      00004D 3E               [12]  941 	addc	a,r6
      00004E FA               [12]  942 	mov	r2,a
      00004F 8F 03            [24]  943 	mov	ar3,r7
      000051 89 82            [24]  944 	mov	dpl,r1
      000053 8A 83            [24]  945 	mov	dph,r2
      000055 8B F0            [24]  946 	mov	b,r3
      000057 12r00r00         [24]  947 	lcall	__gptrget
      00005A 25 E0            [12]  948 	add	a,acc
      00005C 4C               [12]  949 	orl	a,r4
      00005D F5*53            [12]  950 	mov	_UARTCR1,a
                                    951 ;	src/mc96f8x16_uart.c:13: UARTCR3 = (UARTCR3 & 0xF4) | (UART_Conf->StopBits);
      00005F E5*55            [12]  952 	mov	a,_UARTCR3
      000061 54 F4            [12]  953 	anl	a,#0xf4
      000063 FC               [12]  954 	mov	r4,a
      000064 74 03            [12]  955 	mov	a,#0x03
      000066 2D               [12]  956 	add	a,r5
      000067 FD               [12]  957 	mov	r5,a
      000068 E4               [12]  958 	clr	a
      000069 3E               [12]  959 	addc	a,r6
      00006A FE               [12]  960 	mov	r6,a
      00006B 8D 82            [24]  961 	mov	dpl,r5
      00006D 8E 83            [24]  962 	mov	dph,r6
      00006F 8F F0            [24]  963 	mov	b,r7
      000071 12r00r00         [24]  964 	lcall	__gptrget
      000074 4C               [12]  965 	orl	a,r4
      000075 F5*55            [12]  966 	mov	_UARTCR3,a
                                    967 ;	src/mc96f8x16_uart.c:14: UARTCR2 = (UARTCR2 & 0xD1) | (UARTCR2_RXE | UARTCR2_RXCIE | UARTCR2_TXE | UARTCR2_UARTEN);
      000077 E5*54            [12]  968 	mov	a,_UARTCR2
      000079 54 D1            [12]  969 	anl	a,#0xd1
      00007B 44 2E            [12]  970 	orl	a,#0x2e
      00007D F5*54            [12]  971 	mov	_UARTCR2,a
                                    972 ;	src/mc96f8x16_uart.c:15: IE1 = (IE1 & 0xF7) | (0x08);
      00007F E5*18            [12]  973 	mov	a,_IE1
      000081 54 F7            [12]  974 	anl	a,#0xf7
      000083 44 08            [12]  975 	orl	a,#0x08
      000085 F5*18            [12]  976 	mov	_IE1,a
                                    977 ;	src/mc96f8x16_uart.c:16: }
      000087 22               [24]  978 	ret
                                    979 ;------------------------------------------------------------
                                    980 ;Allocation info for local variables in function 'UART_Transmit'
                                    981 ;------------------------------------------------------------
                                    982 ;sloc0                     Allocated with name '_UART_Transmit_sloc0_1_0'
                                    983 ;sloc1                     Allocated with name '_UART_Transmit_sloc1_1_0'
                                    984 ;Size                      Allocated with name '_UART_Transmit_PARM_2'
                                    985 ;Timeout                   Allocated with name '_UART_Transmit_PARM_3'
                                    986 ;Buffer                    Allocated with name '_UART_Transmit_Buffer_65536_14'
                                    987 ;i                         Allocated with name '_UART_Transmit_i_65536_15'
                                    988 ;StartTick                 Allocated with name '_UART_Transmit_StartTick_65536_15'
                                    989 ;------------------------------------------------------------
                                    990 ;	src/mc96f8x16_uart.c:18: HAL_Status UART_Transmit(uint8_t *Buffer, uint16_t Size, uint16_t Timeout)
                                    991 ;	-----------------------------------------
                                    992 ;	 function UART_Transmit
                                    993 ;	-----------------------------------------
      000088                        994 _UART_Transmit:
      000088 AF F0            [24]  995 	mov	r7,b
      00008A AE 83            [24]  996 	mov	r6,dph
      00008C E5 82            [12]  997 	mov	a,dpl
      00008E 90r00r07         [24]  998 	mov	dptr,#_UART_Transmit_Buffer_65536_14
      000091 F0               [24]  999 	movx	@dptr,a
      000092 EE               [12] 1000 	mov	a,r6
      000093 A3               [24] 1001 	inc	dptr
      000094 F0               [24] 1002 	movx	@dptr,a
      000095 EF               [12] 1003 	mov	a,r7
      000096 A3               [24] 1004 	inc	dptr
      000097 F0               [24] 1005 	movx	@dptr,a
                                   1006 ;	src/mc96f8x16_uart.c:21: uint16_t StartTick = GetTick();
      000098 12r00r00         [24] 1007 	lcall	_GetTick
      00009B AE 82            [24] 1008 	mov	r6,dpl
      00009D AF 83            [24] 1009 	mov	r7,dph
                                   1010 ;	src/mc96f8x16_uart.c:22: while(Size--)
      00009F 90r00r07         [24] 1011 	mov	dptr,#_UART_Transmit_Buffer_65536_14
      0000A2 E0               [24] 1012 	movx	a,@dptr
      0000A3 F5*02            [12] 1013 	mov	_UART_Transmit_sloc1_1_0,a
      0000A5 A3               [24] 1014 	inc	dptr
      0000A6 E0               [24] 1015 	movx	a,@dptr
      0000A7 F5*03            [12] 1016 	mov	(_UART_Transmit_sloc1_1_0 + 1),a
      0000A9 A3               [24] 1017 	inc	dptr
      0000AA E0               [24] 1018 	movx	a,@dptr
      0000AB F5*04            [12] 1019 	mov	(_UART_Transmit_sloc1_1_0 + 2),a
      0000AD 79 00            [12] 1020 	mov	r1,#0x00
      0000AF 7A 00            [12] 1021 	mov	r2,#0x00
      0000B1 90r00r03         [24] 1022 	mov	dptr,#_UART_Transmit_PARM_2
      0000B4 E0               [24] 1023 	movx	a,@dptr
      0000B5 F5*00            [12] 1024 	mov	_UART_Transmit_sloc0_1_0,a
      0000B7 A3               [24] 1025 	inc	dptr
      0000B8 E0               [24] 1026 	movx	a,@dptr
      0000B9 F5*01            [12] 1027 	mov	(_UART_Transmit_sloc0_1_0 + 1),a
      0000BB                       1028 00109$:
      0000BB A8*00            [24] 1029 	mov	r0,_UART_Transmit_sloc0_1_0
      0000BD AD*01            [24] 1030 	mov	r5,(_UART_Transmit_sloc0_1_0 + 1)
      0000BF 15*00            [12] 1031 	dec	_UART_Transmit_sloc0_1_0
      0000C1 74 FF            [12] 1032 	mov	a,#0xff
      0000C3 B5*00 02         [24] 1033 	cjne	a,_UART_Transmit_sloc0_1_0,00134$
      0000C6 15*01            [12] 1034 	dec	(_UART_Transmit_sloc0_1_0 + 1)
      0000C8                       1035 00134$:
      0000C8 E8               [12] 1036 	mov	a,r0
      0000C9 4D               [12] 1037 	orl	a,r5
      0000CA 70 03            [24] 1038 	jnz	00135$
      0000CC 02r01r5B         [24] 1039 	ljmp	00111$
      0000CF                       1040 00135$:
                                   1041 ;	src/mc96f8x16_uart.c:24: if(CheckTimeout(StartTick, Timeout) == HAL_OK)
      0000CF 90r00r05         [24] 1042 	mov	dptr,#_UART_Transmit_PARM_3
      0000D2 E0               [24] 1043 	movx	a,@dptr
      0000D3 FC               [12] 1044 	mov	r4,a
      0000D4 A3               [24] 1045 	inc	dptr
      0000D5 E0               [24] 1046 	movx	a,@dptr
      0000D6 FD               [12] 1047 	mov	r5,a
      0000D7 90r00r00         [24] 1048 	mov	dptr,#_CheckTimeout_PARM_2
      0000DA EC               [12] 1049 	mov	a,r4
      0000DB F0               [24] 1050 	movx	@dptr,a
      0000DC ED               [12] 1051 	mov	a,r5
      0000DD A3               [24] 1052 	inc	dptr
      0000DE F0               [24] 1053 	movx	@dptr,a
      0000DF 8E 82            [24] 1054 	mov	dpl,r6
      0000E1 8F 83            [24] 1055 	mov	dph,r7
      0000E3 C0 07            [24] 1056 	push	ar7
      0000E5 C0 06            [24] 1057 	push	ar6
      0000E7 C0 05            [24] 1058 	push	ar5
      0000E9 C0 04            [24] 1059 	push	ar4
      0000EB C0 02            [24] 1060 	push	ar2
      0000ED C0 01            [24] 1061 	push	ar1
      0000EF 12r00r00         [24] 1062 	lcall	_CheckTimeout
      0000F2 AB 82            [24] 1063 	mov	r3,dpl
      0000F4 D0 01            [24] 1064 	pop	ar1
      0000F6 D0 02            [24] 1065 	pop	ar2
      0000F8 D0 04            [24] 1066 	pop	ar4
      0000FA D0 05            [24] 1067 	pop	ar5
      0000FC D0 06            [24] 1068 	pop	ar6
      0000FE D0 07            [24] 1069 	pop	ar7
      000100 BB 01 54         [24] 1070 	cjne	r3,#0x01,00107$
                                   1071 ;	src/mc96f8x16_uart.c:26: while(!(UARTST & UARTST_UDRE))
      000103                       1072 00103$:
      000103 E5*56            [12] 1073 	mov	a,_UARTST
      000105 20 E7 32         [24] 1074 	jb	acc.7,00105$
                                   1075 ;	src/mc96f8x16_uart.c:28: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      000108 90r00r00         [24] 1076 	mov	dptr,#_CheckTimeout_PARM_2
      00010B EC               [12] 1077 	mov	a,r4
      00010C F0               [24] 1078 	movx	@dptr,a
      00010D ED               [12] 1079 	mov	a,r5
      00010E A3               [24] 1080 	inc	dptr
      00010F F0               [24] 1081 	movx	@dptr,a
      000110 8E 82            [24] 1082 	mov	dpl,r6
      000112 8F 83            [24] 1083 	mov	dph,r7
      000114 C0 07            [24] 1084 	push	ar7
      000116 C0 06            [24] 1085 	push	ar6
      000118 C0 05            [24] 1086 	push	ar5
      00011A C0 04            [24] 1087 	push	ar4
      00011C C0 02            [24] 1088 	push	ar2
      00011E C0 01            [24] 1089 	push	ar1
      000120 12r00r00         [24] 1090 	lcall	_CheckTimeout
      000123 AB 82            [24] 1091 	mov	r3,dpl
      000125 D0 01            [24] 1092 	pop	ar1
      000127 D0 02            [24] 1093 	pop	ar2
      000129 D0 04            [24] 1094 	pop	ar4
      00012B D0 05            [24] 1095 	pop	ar5
      00012D D0 06            [24] 1096 	pop	ar6
      00012F D0 07            [24] 1097 	pop	ar7
      000131 BB 01 02         [24] 1098 	cjne	r3,#0x01,00139$
      000134 80 CD            [24] 1099 	sjmp	00103$
      000136                       1100 00139$:
                                   1101 ;	src/mc96f8x16_uart.c:30: return HAL_TIMEOUT;
      000136 75 82 02         [24] 1102 	mov	dpl,#0x02
      000139 22               [24] 1103 	ret
      00013A                       1104 00105$:
                                   1105 ;	src/mc96f8x16_uart.c:33: UARTDR = *(Buffer + i);
      00013A E9               [12] 1106 	mov	a,r1
      00013B 25*02            [12] 1107 	add	a,_UART_Transmit_sloc1_1_0
      00013D FB               [12] 1108 	mov	r3,a
      00013E EA               [12] 1109 	mov	a,r2
      00013F 35*03            [12] 1110 	addc	a,(_UART_Transmit_sloc1_1_0 + 1)
      000141 FC               [12] 1111 	mov	r4,a
      000142 AD*04            [24] 1112 	mov	r5,(_UART_Transmit_sloc1_1_0 + 2)
      000144 8B 82            [24] 1113 	mov	dpl,r3
      000146 8C 83            [24] 1114 	mov	dph,r4
      000148 8D F0            [24] 1115 	mov	b,r5
      00014A 12r00r00         [24] 1116 	lcall	__gptrget
      00014D F5*58            [12] 1117 	mov	_UARTDR,a
                                   1118 ;	src/mc96f8x16_uart.c:34: i++;
      00014F 09               [12] 1119 	inc	r1
      000150 B9 00 01         [24] 1120 	cjne	r1,#0x00,00140$
      000153 0A               [12] 1121 	inc	r2
      000154                       1122 00140$:
      000154 02r00rBB         [24] 1123 	ljmp	00109$
      000157                       1124 00107$:
                                   1125 ;	src/mc96f8x16_uart.c:38: return HAL_TIMEOUT;
      000157 75 82 02         [24] 1126 	mov	dpl,#0x02
      00015A 22               [24] 1127 	ret
      00015B                       1128 00111$:
                                   1129 ;	src/mc96f8x16_uart.c:41: return HAL_OK;
      00015B 75 82 01         [24] 1130 	mov	dpl,#0x01
                                   1131 ;	src/mc96f8x16_uart.c:42: }
      00015E 22               [24] 1132 	ret
                                   1133 ;------------------------------------------------------------
                                   1134 ;Allocation info for local variables in function 'UART_Receive'
                                   1135 ;------------------------------------------------------------
                                   1136 ;sloc0                     Allocated with name '_UART_Receive_sloc0_1_0'
                                   1137 ;sloc1                     Allocated with name '_UART_Receive_sloc1_1_0'
                                   1138 ;Size                      Allocated with name '_UART_Receive_PARM_2'
                                   1139 ;Timeout                   Allocated with name '_UART_Receive_PARM_3'
                                   1140 ;Buffer                    Allocated with name '_UART_Receive_Buffer_65536_21'
                                   1141 ;i                         Allocated with name '_UART_Receive_i_65536_22'
                                   1142 ;StartTick                 Allocated with name '_UART_Receive_StartTick_65536_22'
                                   1143 ;------------------------------------------------------------
                                   1144 ;	src/mc96f8x16_uart.c:44: HAL_Status UART_Receive(uint8_t *Buffer, uint16_t Size, uint16_t Timeout)
                                   1145 ;	-----------------------------------------
                                   1146 ;	 function UART_Receive
                                   1147 ;	-----------------------------------------
      00015F                       1148 _UART_Receive:
      00015F AF F0            [24] 1149 	mov	r7,b
      000161 AE 83            [24] 1150 	mov	r6,dph
      000163 E5 82            [12] 1151 	mov	a,dpl
      000165 90r00r0E         [24] 1152 	mov	dptr,#_UART_Receive_Buffer_65536_21
      000168 F0               [24] 1153 	movx	@dptr,a
      000169 EE               [12] 1154 	mov	a,r6
      00016A A3               [24] 1155 	inc	dptr
      00016B F0               [24] 1156 	movx	@dptr,a
      00016C EF               [12] 1157 	mov	a,r7
      00016D A3               [24] 1158 	inc	dptr
      00016E F0               [24] 1159 	movx	@dptr,a
                                   1160 ;	src/mc96f8x16_uart.c:47: uint16_t StartTick = GetTick();
      00016F 12r00r00         [24] 1161 	lcall	_GetTick
      000172 AE 82            [24] 1162 	mov	r6,dpl
      000174 AF 83            [24] 1163 	mov	r7,dph
                                   1164 ;	src/mc96f8x16_uart.c:48: while(Size--)
      000176 90r00r0E         [24] 1165 	mov	dptr,#_UART_Receive_Buffer_65536_21
      000179 E0               [24] 1166 	movx	a,@dptr
      00017A F5*07            [12] 1167 	mov	_UART_Receive_sloc1_1_0,a
      00017C A3               [24] 1168 	inc	dptr
      00017D E0               [24] 1169 	movx	a,@dptr
      00017E F5*08            [12] 1170 	mov	(_UART_Receive_sloc1_1_0 + 1),a
      000180 A3               [24] 1171 	inc	dptr
      000181 E0               [24] 1172 	movx	a,@dptr
      000182 F5*09            [12] 1173 	mov	(_UART_Receive_sloc1_1_0 + 2),a
      000184 79 00            [12] 1174 	mov	r1,#0x00
      000186 7A 00            [12] 1175 	mov	r2,#0x00
      000188 90r00r0A         [24] 1176 	mov	dptr,#_UART_Receive_PARM_2
      00018B E0               [24] 1177 	movx	a,@dptr
      00018C F5*05            [12] 1178 	mov	_UART_Receive_sloc0_1_0,a
      00018E A3               [24] 1179 	inc	dptr
      00018F E0               [24] 1180 	movx	a,@dptr
      000190 F5*06            [12] 1181 	mov	(_UART_Receive_sloc0_1_0 + 1),a
      000192                       1182 00109$:
      000192 A8*05            [24] 1183 	mov	r0,_UART_Receive_sloc0_1_0
      000194 AD*06            [24] 1184 	mov	r5,(_UART_Receive_sloc0_1_0 + 1)
      000196 15*05            [12] 1185 	dec	_UART_Receive_sloc0_1_0
      000198 74 FF            [12] 1186 	mov	a,#0xff
      00019A B5*05 02         [24] 1187 	cjne	a,_UART_Receive_sloc0_1_0,00134$
      00019D 15*06            [12] 1188 	dec	(_UART_Receive_sloc0_1_0 + 1)
      00019F                       1189 00134$:
      00019F E8               [12] 1190 	mov	a,r0
      0001A0 4D               [12] 1191 	orl	a,r5
      0001A1 70 03            [24] 1192 	jnz	00135$
      0001A3 02r02r32         [24] 1193 	ljmp	00111$
      0001A6                       1194 00135$:
                                   1195 ;	src/mc96f8x16_uart.c:50: if(CheckTimeout(StartTick, Timeout) == HAL_OK)
      0001A6 90r00r0C         [24] 1196 	mov	dptr,#_UART_Receive_PARM_3
      0001A9 E0               [24] 1197 	movx	a,@dptr
      0001AA FC               [12] 1198 	mov	r4,a
      0001AB A3               [24] 1199 	inc	dptr
      0001AC E0               [24] 1200 	movx	a,@dptr
      0001AD FD               [12] 1201 	mov	r5,a
      0001AE 90r00r00         [24] 1202 	mov	dptr,#_CheckTimeout_PARM_2
      0001B1 EC               [12] 1203 	mov	a,r4
      0001B2 F0               [24] 1204 	movx	@dptr,a
      0001B3 ED               [12] 1205 	mov	a,r5
      0001B4 A3               [24] 1206 	inc	dptr
      0001B5 F0               [24] 1207 	movx	@dptr,a
      0001B6 8E 82            [24] 1208 	mov	dpl,r6
      0001B8 8F 83            [24] 1209 	mov	dph,r7
      0001BA C0 07            [24] 1210 	push	ar7
      0001BC C0 06            [24] 1211 	push	ar6
      0001BE C0 05            [24] 1212 	push	ar5
      0001C0 C0 04            [24] 1213 	push	ar4
      0001C2 C0 02            [24] 1214 	push	ar2
      0001C4 C0 01            [24] 1215 	push	ar1
      0001C6 12r00r00         [24] 1216 	lcall	_CheckTimeout
      0001C9 AB 82            [24] 1217 	mov	r3,dpl
      0001CB D0 01            [24] 1218 	pop	ar1
      0001CD D0 02            [24] 1219 	pop	ar2
      0001CF D0 04            [24] 1220 	pop	ar4
      0001D1 D0 05            [24] 1221 	pop	ar5
      0001D3 D0 06            [24] 1222 	pop	ar6
      0001D5 D0 07            [24] 1223 	pop	ar7
      0001D7 BB 01 54         [24] 1224 	cjne	r3,#0x01,00107$
                                   1225 ;	src/mc96f8x16_uart.c:52: while(!(UARTST & UARTST_RXC))
      0001DA                       1226 00103$:
      0001DA E5*56            [12] 1227 	mov	a,_UARTST
      0001DC 20 E5 32         [24] 1228 	jb	acc.5,00105$
                                   1229 ;	src/mc96f8x16_uart.c:54: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0001DF 90r00r00         [24] 1230 	mov	dptr,#_CheckTimeout_PARM_2
      0001E2 EC               [12] 1231 	mov	a,r4
      0001E3 F0               [24] 1232 	movx	@dptr,a
      0001E4 ED               [12] 1233 	mov	a,r5
      0001E5 A3               [24] 1234 	inc	dptr
      0001E6 F0               [24] 1235 	movx	@dptr,a
      0001E7 8E 82            [24] 1236 	mov	dpl,r6
      0001E9 8F 83            [24] 1237 	mov	dph,r7
      0001EB C0 07            [24] 1238 	push	ar7
      0001ED C0 06            [24] 1239 	push	ar6
      0001EF C0 05            [24] 1240 	push	ar5
      0001F1 C0 04            [24] 1241 	push	ar4
      0001F3 C0 02            [24] 1242 	push	ar2
      0001F5 C0 01            [24] 1243 	push	ar1
      0001F7 12r00r00         [24] 1244 	lcall	_CheckTimeout
      0001FA AB 82            [24] 1245 	mov	r3,dpl
      0001FC D0 01            [24] 1246 	pop	ar1
      0001FE D0 02            [24] 1247 	pop	ar2
      000200 D0 04            [24] 1248 	pop	ar4
      000202 D0 05            [24] 1249 	pop	ar5
      000204 D0 06            [24] 1250 	pop	ar6
      000206 D0 07            [24] 1251 	pop	ar7
      000208 BB 01 02         [24] 1252 	cjne	r3,#0x01,00139$
      00020B 80 CD            [24] 1253 	sjmp	00103$
      00020D                       1254 00139$:
                                   1255 ;	src/mc96f8x16_uart.c:56: return HAL_TIMEOUT;
      00020D 75 82 02         [24] 1256 	mov	dpl,#0x02
      000210 22               [24] 1257 	ret
      000211                       1258 00105$:
                                   1259 ;	src/mc96f8x16_uart.c:59: *(Buffer + i) = UARTDR;
      000211 E9               [12] 1260 	mov	a,r1
      000212 25*07            [12] 1261 	add	a,_UART_Receive_sloc1_1_0
      000214 FB               [12] 1262 	mov	r3,a
      000215 EA               [12] 1263 	mov	a,r2
      000216 35*08            [12] 1264 	addc	a,(_UART_Receive_sloc1_1_0 + 1)
      000218 FC               [12] 1265 	mov	r4,a
      000219 AD*09            [24] 1266 	mov	r5,(_UART_Receive_sloc1_1_0 + 2)
      00021B 8B 82            [24] 1267 	mov	dpl,r3
      00021D 8C 83            [24] 1268 	mov	dph,r4
      00021F 8D F0            [24] 1269 	mov	b,r5
      000221 E5*58            [12] 1270 	mov	a,_UARTDR
      000223 12r00r00         [24] 1271 	lcall	__gptrput
                                   1272 ;	src/mc96f8x16_uart.c:60: i++;
      000226 09               [12] 1273 	inc	r1
      000227 B9 00 01         [24] 1274 	cjne	r1,#0x00,00140$
      00022A 0A               [12] 1275 	inc	r2
      00022B                       1276 00140$:
      00022B 02r01r92         [24] 1277 	ljmp	00109$
      00022E                       1278 00107$:
                                   1279 ;	src/mc96f8x16_uart.c:64: return HAL_TIMEOUT;
      00022E 75 82 02         [24] 1280 	mov	dpl,#0x02
      000231 22               [24] 1281 	ret
      000232                       1282 00111$:
                                   1283 ;	src/mc96f8x16_uart.c:67: return HAL_OK;
      000232 75 82 01         [24] 1284 	mov	dpl,#0x01
                                   1285 ;	src/mc96f8x16_uart.c:68: }
      000235 22               [24] 1286 	ret
                                   1287 ;------------------------------------------------------------
                                   1288 ;Allocation info for local variables in function 'UART_Receive_ISR'
                                   1289 ;------------------------------------------------------------
                                   1290 ;	src/mc96f8x16_uart.c:70: void UART_Receive_ISR(void) __interrupt 10
                                   1291 ;	-----------------------------------------
                                   1292 ;	 function UART_Receive_ISR
                                   1293 ;	-----------------------------------------
      000236                       1294 _UART_Receive_ISR:
      000236 C0 E0            [24] 1295 	push	acc
      000238 C0 82            [24] 1296 	push	dpl
      00023A C0 83            [24] 1297 	push	dph
                                   1298 ;	src/mc96f8x16_uart.c:72: RxData = UARTDR;
      00023C 90r00r00         [24] 1299 	mov	dptr,#_RxData
      00023F E5*58            [12] 1300 	mov	a,_UARTDR
      000241 F0               [24] 1301 	movx	@dptr,a
                                   1302 ;	src/mc96f8x16_uart.c:73: }
      000242 D0 83            [24] 1303 	pop	dph
      000244 D0 82            [24] 1304 	pop	dpl
      000246 D0 E0            [24] 1305 	pop	acc
      000248 32               [24] 1306 	reti
                                   1307 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1308 ;	eliminated unneeded push/pop not_psw
                                   1309 ;	eliminated unneeded push/pop b
                                   1310 	.area CSEG    (CODE)
                                   1311 	.area CONST   (CODE)
                                   1312 	.area XINIT   (CODE)
      000000                       1313 __xinit__RxData:
      000000 00                    1314 	.db #0x00	; 0
                                   1315 	.area CABS    (ABS,CODE)
