                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mc96f8x16_uart
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _UART_Receive_ISR
                                     12 	.globl _CheckTimeout
                                     13 	.globl _GetTick
                                     14 	.globl _P37
                                     15 	.globl _P36
                                     16 	.globl _P35
                                     17 	.globl _P34
                                     18 	.globl _P33
                                     19 	.globl _P32
                                     20 	.globl _P31
                                     21 	.globl _P30
                                     22 	.globl _P27
                                     23 	.globl _P26
                                     24 	.globl _P25
                                     25 	.globl _P24
                                     26 	.globl _P23
                                     27 	.globl _P22
                                     28 	.globl _P21
                                     29 	.globl _P20
                                     30 	.globl _P17
                                     31 	.globl _P16
                                     32 	.globl _P15
                                     33 	.globl _P14
                                     34 	.globl _P13
                                     35 	.globl _P12
                                     36 	.globl _P11
                                     37 	.globl _P10
                                     38 	.globl _P07
                                     39 	.globl _P06
                                     40 	.globl _P05
                                     41 	.globl _P04
                                     42 	.globl _P03
                                     43 	.globl _P02
                                     44 	.globl _P01
                                     45 	.globl _P00
                                     46 	.globl _EO
                                     47 	.globl _DPH1
                                     48 	.globl _DPL1
                                     49 	.globl _DPH
                                     50 	.globl _DPL
                                     51 	.globl _SP
                                     52 	.globl _PSW
                                     53 	.globl _B
                                     54 	.globl _ACC
                                     55 	.globl _FMCR
                                     56 	.globl _FIDR
                                     57 	.globl _FSADRL
                                     58 	.globl _FSADRM
                                     59 	.globl _FSADRH
                                     60 	.globl _I2CSCHR
                                     61 	.globl _I2CSCLR
                                     62 	.globl _I2CSDHR
                                     63 	.globl _I2CDR
                                     64 	.globl _I2CSAR1
                                     65 	.globl _I2CSAR0
                                     66 	.globl _I2CSR
                                     67 	.globl _I2CCR
                                     68 	.globl _UARTDR
                                     69 	.globl _UARTBD
                                     70 	.globl _UARTST
                                     71 	.globl _UARTCR3
                                     72 	.globl _UARTCR2
                                     73 	.globl _UARTCR1
                                     74 	.globl _SPISR
                                     75 	.globl _SPIDR
                                     76 	.globl _SPICR
                                     77 	.globl _ADWIFRH
                                     78 	.globl _ADWIFRL
                                     79 	.globl _ADWCRH
                                     80 	.globl _ADWCRL
                                     81 	.globl _ADWRCR3
                                     82 	.globl _ADWRCR2
                                     83 	.globl _ADWRCR1
                                     84 	.globl _ADWRCR0
                                     85 	.globl _ADCDRH
                                     86 	.globl _ADCDRL
                                     87 	.globl _ADCCRH
                                     88 	.globl _ADCCRL
                                     89 	.globl _BUZCR
                                     90 	.globl _BUZDR
                                     91 	.globl _T2BDRH
                                     92 	.globl _T2BDRL
                                     93 	.globl _T2ADRH
                                     94 	.globl _T2ADRL
                                     95 	.globl _T2CRH
                                     96 	.globl _T2CRL
                                     97 	.globl _T1BDRH
                                     98 	.globl _T1BDRL
                                     99 	.globl _T1ADRH
                                    100 	.globl _T1ADRL
                                    101 	.globl _T1CRH
                                    102 	.globl _T1CRL
                                    103 	.globl _T0CDR
                                    104 	.globl _T0DR
                                    105 	.globl _T0CNT
                                    106 	.globl _T0CR
                                    107 	.globl _WTCR
                                    108 	.globl _WTCNT
                                    109 	.globl _WTDR
                                    110 	.globl _WDTCR
                                    111 	.globl _WDTCNT
                                    112 	.globl _WDTDR
                                    113 	.globl _LVICR
                                    114 	.globl _LVRCR
                                    115 	.globl _PCON
                                    116 	.globl _RSTFR
                                    117 	.globl _BITCR
                                    118 	.globl _BITCNT
                                    119 	.globl _OSCCR
                                    120 	.globl _SCCR
                                    121 	.globl _EIPOL2
                                    122 	.globl _EIPOL1
                                    123 	.globl _EIPOL0H
                                    124 	.globl _EIPOL0L
                                    125 	.globl _EIFLAG1
                                    126 	.globl _EIFLAG0
                                    127 	.globl _IIFLAG
                                    128 	.globl _IP1
                                    129 	.globl _IP
                                    130 	.globl _IE3
                                    131 	.globl _IE2
                                    132 	.globl _IE1
                                    133 	.globl _IE
                                    134 	.globl _P3FSR
                                    135 	.globl _P2FSR
                                    136 	.globl _P1FSRH
                                    137 	.globl _P1FSRL
                                    138 	.globl _P0FSR
                                    139 	.globl _P3PU
                                    140 	.globl _P3OD
                                    141 	.globl _P3IO
                                    142 	.globl _P3
                                    143 	.globl _P2PU
                                    144 	.globl _P2OD
                                    145 	.globl _P2IO
                                    146 	.globl _P2
                                    147 	.globl _P12DB
                                    148 	.globl _P1PU
                                    149 	.globl _P1OD
                                    150 	.globl _P1IO
                                    151 	.globl _P1
                                    152 	.globl _P03DB
                                    153 	.globl _P0PU
                                    154 	.globl _P0OD
                                    155 	.globl _P0IO
                                    156 	.globl _P0
                                    157 	.globl _RxData
                                    158 	.globl _UART_Config
                                    159 	.globl _UART_Transmit
                                    160 	.globl _UART_Receive
                                    161 ;--------------------------------------------------------
                                    162 ; special function registers
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
      000000                        166 _P0::
      000000                        167 	.ds 1
      000001                        168 _P0IO::
      000001                        169 	.ds 1
      000002                        170 _P0OD::
      000002                        171 	.ds 1
      000003                        172 _P0PU::
      000003                        173 	.ds 1
      000004                        174 _P03DB::
      000004                        175 	.ds 1
      000005                        176 _P1::
      000005                        177 	.ds 1
      000006                        178 _P1IO::
      000006                        179 	.ds 1
      000007                        180 _P1OD::
      000007                        181 	.ds 1
      000008                        182 _P1PU::
      000008                        183 	.ds 1
      000009                        184 _P12DB::
      000009                        185 	.ds 1
      00000A                        186 _P2::
      00000A                        187 	.ds 1
      00000B                        188 _P2IO::
      00000B                        189 	.ds 1
      00000C                        190 _P2OD::
      00000C                        191 	.ds 1
      00000D                        192 _P2PU::
      00000D                        193 	.ds 1
      00000E                        194 _P3::
      00000E                        195 	.ds 1
      00000F                        196 _P3IO::
      00000F                        197 	.ds 1
      000010                        198 _P3OD::
      000010                        199 	.ds 1
      000011                        200 _P3PU::
      000011                        201 	.ds 1
      000012                        202 _P0FSR::
      000012                        203 	.ds 1
      000013                        204 _P1FSRL::
      000013                        205 	.ds 1
      000014                        206 _P1FSRH::
      000014                        207 	.ds 1
      000015                        208 _P2FSR::
      000015                        209 	.ds 1
      000016                        210 _P3FSR::
      000016                        211 	.ds 1
      000017                        212 _IE::
      000017                        213 	.ds 1
      000018                        214 _IE1::
      000018                        215 	.ds 1
      000019                        216 _IE2::
      000019                        217 	.ds 1
      00001A                        218 _IE3::
      00001A                        219 	.ds 1
      00001B                        220 _IP::
      00001B                        221 	.ds 1
      00001C                        222 _IP1::
      00001C                        223 	.ds 1
      00001D                        224 _IIFLAG::
      00001D                        225 	.ds 1
      00001E                        226 _EIFLAG0::
      00001E                        227 	.ds 1
      00001F                        228 _EIFLAG1::
      00001F                        229 	.ds 1
      000020                        230 _EIPOL0L::
      000020                        231 	.ds 1
      000021                        232 _EIPOL0H::
      000021                        233 	.ds 1
      000022                        234 _EIPOL1::
      000022                        235 	.ds 1
      000023                        236 _EIPOL2::
      000023                        237 	.ds 1
      000024                        238 _SCCR::
      000024                        239 	.ds 1
      000025                        240 _OSCCR::
      000025                        241 	.ds 1
      000026                        242 _BITCNT::
      000026                        243 	.ds 1
      000027                        244 _BITCR::
      000027                        245 	.ds 1
      000028                        246 _RSTFR::
      000028                        247 	.ds 1
      000029                        248 _PCON::
      000029                        249 	.ds 1
      00002A                        250 _LVRCR::
      00002A                        251 	.ds 1
      00002B                        252 _LVICR::
      00002B                        253 	.ds 1
      00002C                        254 _WDTDR::
      00002C                        255 	.ds 1
      00002D                        256 _WDTCNT::
      00002D                        257 	.ds 1
      00002E                        258 _WDTCR::
      00002E                        259 	.ds 1
      00002F                        260 _WTDR::
      00002F                        261 	.ds 1
      000030                        262 _WTCNT::
      000030                        263 	.ds 1
      000031                        264 _WTCR::
      000031                        265 	.ds 1
      000032                        266 _T0CR::
      000032                        267 	.ds 1
      000033                        268 _T0CNT::
      000033                        269 	.ds 1
      000034                        270 _T0DR::
      000034                        271 	.ds 1
      000035                        272 _T0CDR::
      000035                        273 	.ds 1
      000036                        274 _T1CRL::
      000036                        275 	.ds 1
      000037                        276 _T1CRH::
      000037                        277 	.ds 1
      000038                        278 _T1ADRL::
      000038                        279 	.ds 1
      000039                        280 _T1ADRH::
      000039                        281 	.ds 1
      00003A                        282 _T1BDRL::
      00003A                        283 	.ds 1
      00003B                        284 _T1BDRH::
      00003B                        285 	.ds 1
      00003C                        286 _T2CRL::
      00003C                        287 	.ds 1
      00003D                        288 _T2CRH::
      00003D                        289 	.ds 1
      00003E                        290 _T2ADRL::
      00003E                        291 	.ds 1
      00003F                        292 _T2ADRH::
      00003F                        293 	.ds 1
      000040                        294 _T2BDRL::
      000040                        295 	.ds 1
      000041                        296 _T2BDRH::
      000041                        297 	.ds 1
      000042                        298 _BUZDR::
      000042                        299 	.ds 1
      000043                        300 _BUZCR::
      000043                        301 	.ds 1
      000044                        302 _ADCCRL::
      000044                        303 	.ds 1
      000045                        304 _ADCCRH::
      000045                        305 	.ds 1
      000046                        306 _ADCDRL::
      000046                        307 	.ds 1
      000047                        308 _ADCDRH::
      000047                        309 	.ds 1
      000048                        310 _ADWRCR0::
      000048                        311 	.ds 1
      000049                        312 _ADWRCR1::
      000049                        313 	.ds 1
      00004A                        314 _ADWRCR2::
      00004A                        315 	.ds 1
      00004B                        316 _ADWRCR3::
      00004B                        317 	.ds 1
      00004C                        318 _ADWCRL::
      00004C                        319 	.ds 1
      00004D                        320 _ADWCRH::
      00004D                        321 	.ds 1
      00004E                        322 _ADWIFRL::
      00004E                        323 	.ds 1
      00004F                        324 _ADWIFRH::
      00004F                        325 	.ds 1
      000050                        326 _SPICR::
      000050                        327 	.ds 1
      000051                        328 _SPIDR::
      000051                        329 	.ds 1
      000052                        330 _SPISR::
      000052                        331 	.ds 1
      000053                        332 _UARTCR1::
      000053                        333 	.ds 1
      000054                        334 _UARTCR2::
      000054                        335 	.ds 1
      000055                        336 _UARTCR3::
      000055                        337 	.ds 1
      000056                        338 _UARTST::
      000056                        339 	.ds 1
      000057                        340 _UARTBD::
      000057                        341 	.ds 1
      000058                        342 _UARTDR::
      000058                        343 	.ds 1
      000059                        344 _I2CCR::
      000059                        345 	.ds 1
      00005A                        346 _I2CSR::
      00005A                        347 	.ds 1
      00005B                        348 _I2CSAR0::
      00005B                        349 	.ds 1
      00005C                        350 _I2CSAR1::
      00005C                        351 	.ds 1
      00005D                        352 _I2CDR::
      00005D                        353 	.ds 1
      00005E                        354 _I2CSDHR::
      00005E                        355 	.ds 1
      00005F                        356 _I2CSCLR::
      00005F                        357 	.ds 1
      000060                        358 _I2CSCHR::
      000060                        359 	.ds 1
      000061                        360 _FSADRH::
      000061                        361 	.ds 1
      000062                        362 _FSADRM::
      000062                        363 	.ds 1
      000063                        364 _FSADRL::
      000063                        365 	.ds 1
      000064                        366 _FIDR::
      000064                        367 	.ds 1
      000065                        368 _FMCR::
      000065                        369 	.ds 1
      000066                        370 _ACC::
      000066                        371 	.ds 1
      000067                        372 _B::
      000067                        373 	.ds 1
      000068                        374 _PSW::
      000068                        375 	.ds 1
      000069                        376 _SP::
      000069                        377 	.ds 1
      00006A                        378 _DPL::
      00006A                        379 	.ds 1
      00006B                        380 _DPH::
      00006B                        381 	.ds 1
      00006C                        382 _DPL1::
      00006C                        383 	.ds 1
      00006D                        384 _DPH1::
      00006D                        385 	.ds 1
      00006E                        386 _EO::
      00006E                        387 	.ds 1
                                    388 ;--------------------------------------------------------
                                    389 ; special function bits
                                    390 ;--------------------------------------------------------
                                    391 	.area RSEG    (ABS,DATA)
      000000                        392 	.org 0x0000
      000000                        393 _P00::
      000000                        394 	.ds 1
      000001                        395 _P01::
      000001                        396 	.ds 1
      000002                        397 _P02::
      000002                        398 	.ds 1
      000003                        399 _P03::
      000003                        400 	.ds 1
      000004                        401 _P04::
      000004                        402 	.ds 1
      000005                        403 _P05::
      000005                        404 	.ds 1
      000006                        405 _P06::
      000006                        406 	.ds 1
      000007                        407 _P07::
      000007                        408 	.ds 1
      000008                        409 _P10::
      000008                        410 	.ds 1
      000009                        411 _P11::
      000009                        412 	.ds 1
      00000A                        413 _P12::
      00000A                        414 	.ds 1
      00000B                        415 _P13::
      00000B                        416 	.ds 1
      00000C                        417 _P14::
      00000C                        418 	.ds 1
      00000D                        419 _P15::
      00000D                        420 	.ds 1
      00000E                        421 _P16::
      00000E                        422 	.ds 1
      00000F                        423 _P17::
      00000F                        424 	.ds 1
      000010                        425 _P20::
      000010                        426 	.ds 1
      000011                        427 _P21::
      000011                        428 	.ds 1
      000012                        429 _P22::
      000012                        430 	.ds 1
      000013                        431 _P23::
      000013                        432 	.ds 1
      000014                        433 _P24::
      000014                        434 	.ds 1
      000015                        435 _P25::
      000015                        436 	.ds 1
      000016                        437 _P26::
      000016                        438 	.ds 1
      000017                        439 _P27::
      000017                        440 	.ds 1
      000018                        441 _P30::
      000018                        442 	.ds 1
      000019                        443 _P31::
      000019                        444 	.ds 1
      00001A                        445 _P32::
      00001A                        446 	.ds 1
      00001B                        447 _P33::
      00001B                        448 	.ds 1
      00001C                        449 _P34::
      00001C                        450 	.ds 1
      00001D                        451 _P35::
      00001D                        452 	.ds 1
      00001E                        453 _P36::
      00001E                        454 	.ds 1
      00001F                        455 _P37::
      00001F                        456 	.ds 1
                                    457 ;--------------------------------------------------------
                                    458 ; overlayable register banks
                                    459 ;--------------------------------------------------------
                                    460 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        461 	.ds 8
                                    462 ;--------------------------------------------------------
                                    463 ; internal ram data
                                    464 ;--------------------------------------------------------
                                    465 	.area DSEG    (DATA)
      000000                        466 _RxData::
      000000                        467 	.ds 1
                                    468 ;--------------------------------------------------------
                                    469 ; overlayable items in internal ram 
                                    470 ;--------------------------------------------------------
                                    471 ;--------------------------------------------------------
                                    472 ; indirectly addressable internal ram data
                                    473 ;--------------------------------------------------------
                                    474 	.area ISEG    (DATA)
                                    475 ;--------------------------------------------------------
                                    476 ; absolute internal ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area IABS    (ABS,DATA)
                                    479 	.area IABS    (ABS,DATA)
                                    480 ;--------------------------------------------------------
                                    481 ; bit data
                                    482 ;--------------------------------------------------------
                                    483 	.area BSEG    (BIT)
                                    484 ;--------------------------------------------------------
                                    485 ; paged external ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area PSEG    (PAG,XDATA)
                                    488 ;--------------------------------------------------------
                                    489 ; external ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area XSEG    (XDATA)
                                    492 ;--------------------------------------------------------
                                    493 ; absolute external ram data
                                    494 ;--------------------------------------------------------
                                    495 	.area XABS    (ABS,XDATA)
                                    496 ;--------------------------------------------------------
                                    497 ; external initialized ram data
                                    498 ;--------------------------------------------------------
                                    499 	.area XISEG   (XDATA)
                                    500 	.area HOME    (CODE)
                                    501 	.area GSINIT0 (CODE)
                                    502 	.area GSINIT1 (CODE)
                                    503 	.area GSINIT2 (CODE)
                                    504 	.area GSINIT3 (CODE)
                                    505 	.area GSINIT4 (CODE)
                                    506 	.area GSINIT5 (CODE)
                                    507 	.area GSINIT  (CODE)
                                    508 	.area GSFINAL (CODE)
                                    509 	.area CSEG    (CODE)
                                    510 ;--------------------------------------------------------
                                    511 ; global & static initialisations
                                    512 ;--------------------------------------------------------
                                    513 	.area HOME    (CODE)
                                    514 	.area GSINIT  (CODE)
                                    515 	.area GSFINAL (CODE)
                                    516 	.area GSINIT  (CODE)
                                    517 ;	src/mc96f8x16_uart.c:7: volatile uint8_t RxData = 0;
      000000 75*00 00         [24]  518 	mov	_RxData,#0x00
                                    519 ;	./inc/MC96F8316.h:17: sfr			P0			= 0x80;			// P0 Data Register
      000003 75*00 80         [24]  520 	mov	_P0,#0x80
                                    521 ;	./inc/MC96F8316.h:27: sfr			P0IO		= 0xA1;			// P0 Direction Register
      000006 75*01 A1         [24]  522 	mov	_P0IO,#0xa1
                                    523 ;	./inc/MC96F8316.h:28: sfr			P0OD		= 0x91;			// P0 Open-drain Selection Register
      000009 75*02 91         [24]  524 	mov	_P0OD,#0x91
                                    525 ;	./inc/MC96F8316.h:29: sfr			P0PU		= 0xAC;			// P0 Pull-up Resistor Selection Register
      00000C 75*03 AC         [24]  526 	mov	_P0PU,#0xac
                                    527 ;	./inc/MC96F8316.h:30: sfr			P03DB		= 0xDE;			// P0/P3 Debounce Enable Register
      00000F 75*04 DE         [24]  528 	mov	_P03DB,#0xde
                                    529 ;	./inc/MC96F8316.h:32: sfr			P1			= 0x88;			// P1 Data Register
      000012 75*05 88         [24]  530 	mov	_P1,#0x88
                                    531 ;	./inc/MC96F8316.h:42: sfr			P1IO		= 0xB1;			// P1 Direction Register
      000015 75*06 B1         [24]  532 	mov	_P1IO,#0xb1
                                    533 ;	./inc/MC96F8316.h:43: sfr			P1OD		= 0x92;			// P1 Open-drain Selection Register
      000018 75*07 92         [24]  534 	mov	_P1OD,#0x92
                                    535 ;	./inc/MC96F8316.h:44: sfr			P1PU		= 0xAD;			// P1 Pull-up Resistor Selection Register
      00001B 75*08 AD         [24]  536 	mov	_P1PU,#0xad
                                    537 ;	./inc/MC96F8316.h:45: sfr			P12DB		= 0xDF;			// P1/P2 Debounce Enable Register
      00001E 75*09 DF         [24]  538 	mov	_P12DB,#0xdf
                                    539 ;	./inc/MC96F8316.h:47: sfr			P2			= 0x90;			// P2 Data Register
      000021 75*0A 90         [24]  540 	mov	_P2,#0x90
                                    541 ;	./inc/MC96F8316.h:57: sfr			P2IO		= 0xB9;			// P2 Direction Register
      000024 75*0B B9         [24]  542 	mov	_P2IO,#0xb9
                                    543 ;	./inc/MC96F8316.h:58: sfr			P2OD		= 0x93;			// P2 Open-drain Selection Register
      000027 75*0C 93         [24]  544 	mov	_P2OD,#0x93
                                    545 ;	./inc/MC96F8316.h:59: sfr			P2PU		= 0xAE;			// P2 Pull-up Resistor Selection Register
      00002A 75*0D AE         [24]  546 	mov	_P2PU,#0xae
                                    547 ;	./inc/MC96F8316.h:61: sfr			P3			= 0x98;			// P3 Data Register
      00002D 75*0E 98         [24]  548 	mov	_P3,#0x98
                                    549 ;	./inc/MC96F8316.h:71: sfr			P3IO		= 0xC1;			// P3 Direction Register
      000030 75*0F C1         [24]  550 	mov	_P3IO,#0xc1
                                    551 ;	./inc/MC96F8316.h:72: sfr			P3OD		= 0x94;			// P3 Open-drain Selection Register
      000033 75*10 94         [24]  552 	mov	_P3OD,#0x94
                                    553 ;	./inc/MC96F8316.h:73: sfr			P3PU		= 0xAF;			// P3 Pull-up Resistor Selection Register
      000036 75*11 AF         [24]  554 	mov	_P3PU,#0xaf
                                    555 ;	./inc/MC96F8316.h:75: sfr			P0FSR		= 0xD3;			//P0 Function Selection Register
      000039 75*12 D3         [24]  556 	mov	_P0FSR,#0xd3
                                    557 ;	./inc/MC96F8316.h:76: sfr			P1FSRL		= 0xD4;			//P1 Function Selection Low Register
      00003C 75*13 D4         [24]  558 	mov	_P1FSRL,#0xd4
                                    559 ;	./inc/MC96F8316.h:77: sfr			P1FSRH		= 0xD5;			//P1 Function Selection High Register
      00003F 75*14 D5         [24]  560 	mov	_P1FSRH,#0xd5
                                    561 ;	./inc/MC96F8316.h:78: sfr			P2FSR		= 0xD6;			//P2 Function Selection Register
      000042 75*15 D6         [24]  562 	mov	_P2FSR,#0xd6
                                    563 ;	./inc/MC96F8316.h:79: sfr			P3FSR		= 0xD7;			//P3 Function Selection Register
      000045 75*16 D7         [24]  564 	mov	_P3FSR,#0xd7
                                    565 ;	./inc/MC96F8316.h:82: sfr			IE			= 0xA8;			// Interrupt Enable Register 0
      000048 75*17 A8         [24]  566 	mov	_IE,#0xa8
                                    567 ;	./inc/MC96F8316.h:83: sfr			IE1			= 0xA9;			// Interrupt Enable Register 1
      00004B 75*18 A9         [24]  568 	mov	_IE1,#0xa9
                                    569 ;	./inc/MC96F8316.h:84: sfr			IE2			= 0xAA;			// Interrupt Enable Register 2
      00004E 75*19 AA         [24]  570 	mov	_IE2,#0xaa
                                    571 ;	./inc/MC96F8316.h:85: sfr			IE3			= 0xAB;			// Interrupt Enable Register 3
      000051 75*1A AB         [24]  572 	mov	_IE3,#0xab
                                    573 ;	./inc/MC96F8316.h:86: sfr			IP			= 0xB8;			// Interrupt Priority Register 0
      000054 75*1B B8         [24]  574 	mov	_IP,#0xb8
                                    575 ;	./inc/MC96F8316.h:87: sfr			IP1			= 0xF8;			// Interrupt Priority Register 1
      000057 75*1C F8         [24]  576 	mov	_IP1,#0xf8
                                    577 ;	./inc/MC96F8316.h:88: sfr			IIFLAG		= 0xA0;			// Internal Interrupt Flag Register
      00005A 75*1D A0         [24]  578 	mov	_IIFLAG,#0xa0
                                    579 ;	./inc/MC96F8316.h:89: sfr			EIFLAG0		= 0xC0;			// External Interrupt Flag 0 Register
      00005D 75*1E C0         [24]  580 	mov	_EIFLAG0,#0xc0
                                    581 ;	./inc/MC96F8316.h:90: sfr			EIFLAG1		= 0xB0;			// External Interrupt Flag 1 Register
      000060 75*1F B0         [24]  582 	mov	_EIFLAG1,#0xb0
                                    583 ;	./inc/MC96F8316.h:91: sfr			EIPOL0L		= 0xA4;			// External Interrupt Polarity 0 Low Register
      000063 75*20 A4         [24]  584 	mov	_EIPOL0L,#0xa4
                                    585 ;	./inc/MC96F8316.h:92: sfr			EIPOL0H		= 0xA5;			// External Interrupt Polarity 0 High Register
      000066 75*21 A5         [24]  586 	mov	_EIPOL0H,#0xa5
                                    587 ;	./inc/MC96F8316.h:93: sfr			EIPOL1		= 0xA6;			// External Interrupt Polarity 1 Register
      000069 75*22 A6         [24]  588 	mov	_EIPOL1,#0xa6
                                    589 ;	./inc/MC96F8316.h:94: sfr			EIPOL2		= 0xA7;			// External Interrupt Polarity 2 Register
      00006C 75*23 A7         [24]  590 	mov	_EIPOL2,#0xa7
                                    591 ;	./inc/MC96F8316.h:97: sfr			SCCR		= 0x8A;			// System Clock Control Register
      00006F 75*24 8A         [24]  592 	mov	_SCCR,#0x8a
                                    593 ;	./inc/MC96F8316.h:98: sfr			OSCCR		= 0xC8;			// Oscillator Control Register
      000072 75*25 C8         [24]  594 	mov	_OSCCR,#0xc8
                                    595 ;	./inc/MC96F8316.h:99: sfr			BITCNT		= 0x8C;			// Basic Interval Timer Counter Register
      000075 75*26 8C         [24]  596 	mov	_BITCNT,#0x8c
                                    597 ;	./inc/MC96F8316.h:100: sfr			BITCR		= 0x8B;			// Basic Interval Timer Control Register
      000078 75*27 8B         [24]  598 	mov	_BITCR,#0x8b
                                    599 ;	./inc/MC96F8316.h:101: sfr			RSTFR		= 0xE8;			// Reset Flag Register
      00007B 75*28 E8         [24]  600 	mov	_RSTFR,#0xe8
                                    601 ;	./inc/MC96F8316.h:102: sfr			PCON		= 0x87;			// Power Control Register
      00007E 75*29 87         [24]  602 	mov	_PCON,#0x87
                                    603 ;	./inc/MC96F8316.h:103: sfr			LVRCR		= 0xD8;			// Low Voltage Reset Control Register
      000081 75*2A D8         [24]  604 	mov	_LVRCR,#0xd8
                                    605 ;	./inc/MC96F8316.h:104: sfr			LVICR		= 0x86;			// Low Voltage Indicator Control Register
      000084 75*2B 86         [24]  606 	mov	_LVICR,#0x86
                                    607 ;	./inc/MC96F8316.h:107: sfr			WDTDR		= 0x8E;			// Watch Dog Timer Data Register
      000087 75*2C 8E         [24]  608 	mov	_WDTDR,#0x8e
                                    609 ;	./inc/MC96F8316.h:108: sfr			WDTCNT		= 0x8E;			// Watch Dog Timer Counter Register
      00008A 75*2D 8E         [24]  610 	mov	_WDTCNT,#0x8e
                                    611 ;	./inc/MC96F8316.h:109: sfr			WDTCR		= 0x8D;			// Watch Dog Timer Control Register
      00008D 75*2E 8D         [24]  612 	mov	_WDTCR,#0x8d
                                    613 ;	./inc/MC96F8316.h:112: sfr			WTDR		= 0x89;			// Watch Timer Data Register
      000090 75*2F 89         [24]  614 	mov	_WTDR,#0x89
                                    615 ;	./inc/MC96F8316.h:113: sfr			WTCNT		= 0x89;			// Watch Timer Counter Register
      000093 75*30 89         [24]  616 	mov	_WTCNT,#0x89
                                    617 ;	./inc/MC96F8316.h:114: sfr			WTCR		= 0x96;			// Watch Timer Control Register
      000096 75*31 96         [24]  618 	mov	_WTCR,#0x96
                                    619 ;	./inc/MC96F8316.h:117: sfr			T0CR		= 0xB2;			// Timer 0 Control Register
      000099 75*32 B2         [24]  620 	mov	_T0CR,#0xb2
                                    621 ;	./inc/MC96F8316.h:118: sfr			T0CNT		= 0xB3;			// Timer 0 Counter Register
      00009C 75*33 B3         [24]  622 	mov	_T0CNT,#0xb3
                                    623 ;	./inc/MC96F8316.h:119: sfr			T0DR		= 0xB4;			// Timer 0 Data Register
      00009F 75*34 B4         [24]  624 	mov	_T0DR,#0xb4
                                    625 ;	./inc/MC96F8316.h:120: sfr			T0CDR		= 0xB4;			// Timer 0 Capture Data Register
      0000A2 75*35 B4         [24]  626 	mov	_T0CDR,#0xb4
                                    627 ;	./inc/MC96F8316.h:126: sfr			T1CRL		= 0xBA;			// Timer 1 Control Low Register
      0000A5 75*36 BA         [24]  628 	mov	_T1CRL,#0xba
                                    629 ;	./inc/MC96F8316.h:127: sfr			T1CRH		= 0xBB;			// Timer 1 Control High Register
      0000A8 75*37 BB         [24]  630 	mov	_T1CRH,#0xbb
                                    631 ;	./inc/MC96F8316.h:128: sfr			T1ADRL		= 0xBC;			// Timer 1 A Data Low Register
      0000AB 75*38 BC         [24]  632 	mov	_T1ADRL,#0xbc
                                    633 ;	./inc/MC96F8316.h:129: sfr			T1ADRH		= 0xBD;			// Timer 1 A Data High Register
      0000AE 75*39 BD         [24]  634 	mov	_T1ADRH,#0xbd
                                    635 ;	./inc/MC96F8316.h:130: sfr			T1BDRL		= 0xBE;			// Timer 1 B Data Low Register
      0000B1 75*3A BE         [24]  636 	mov	_T1BDRL,#0xbe
                                    637 ;	./inc/MC96F8316.h:131: sfr			T1BDRH		= 0xBF;			// Timer 1 B Data High Register
      0000B4 75*3B BF         [24]  638 	mov	_T1BDRH,#0xbf
                                    639 ;	./inc/MC96F8316.h:134: sfr			T2CRL		= 0xC2;			// Timer 2 Control Low Register
      0000B7 75*3C C2         [24]  640 	mov	_T2CRL,#0xc2
                                    641 ;	./inc/MC96F8316.h:135: sfr			T2CRH		= 0xC3;			// Timer 2 Control High Register
      0000BA 75*3D C3         [24]  642 	mov	_T2CRH,#0xc3
                                    643 ;	./inc/MC96F8316.h:136: sfr			T2ADRL		= 0xC4;			// Timer 2 A Data Low Register
      0000BD 75*3E C4         [24]  644 	mov	_T2ADRL,#0xc4
                                    645 ;	./inc/MC96F8316.h:137: sfr			T2ADRH		= 0xC5;			// Timer 2 A Data High Register
      0000C0 75*3F C5         [24]  646 	mov	_T2ADRH,#0xc5
                                    647 ;	./inc/MC96F8316.h:138: sfr			T2BDRL		= 0xC6;			// Timer 2 B Data Low Register
      0000C3 75*40 C6         [24]  648 	mov	_T2BDRL,#0xc6
                                    649 ;	./inc/MC96F8316.h:139: sfr			T2BDRH		= 0xC7;			// Timer 2 B Data High Register
      0000C6 75*41 C7         [24]  650 	mov	_T2BDRH,#0xc7
                                    651 ;	./inc/MC96F8316.h:142: sfr			BUZDR		= 0x8F;			// BUZZER Data Register
      0000C9 75*42 8F         [24]  652 	mov	_BUZDR,#0x8f
                                    653 ;	./inc/MC96F8316.h:143: sfr			BUZCR		= 0x97;			// BUZZER Control Register
      0000CC 75*43 97         [24]  654 	mov	_BUZCR,#0x97
                                    655 ;	./inc/MC96F8316.h:146: sfr			ADCCRL		= 0x9C;			// A/D Converter Control Low Register
      0000CF 75*44 9C         [24]  656 	mov	_ADCCRL,#0x9c
                                    657 ;	./inc/MC96F8316.h:147: sfr			ADCCRH		= 0x9D;			// A/D Converter Control High Register
      0000D2 75*45 9D         [24]  658 	mov	_ADCCRH,#0x9d
                                    659 ;	./inc/MC96F8316.h:148: sfr			ADCDRL		= 0x9E;			// A/D Converter Data Low Register
      0000D5 75*46 9E         [24]  660 	mov	_ADCDRL,#0x9e
                                    661 ;	./inc/MC96F8316.h:149: sfr			ADCDRH		= 0x9F;			// A/D Converter Data High Register
      0000D8 75*47 9F         [24]  662 	mov	_ADCDRH,#0x9f
                                    663 ;	./inc/MC96F8316.h:151: sfr			ADWRCR0		= 0xF2;			// ADC Wake-up Resistor Control Register 0
      0000DB 75*48 F2         [24]  664 	mov	_ADWRCR0,#0xf2
                                    665 ;	./inc/MC96F8316.h:152: sfr			ADWRCR1		= 0xF3;			// ADC Wake-up Resistor Control Register 1
      0000DE 75*49 F3         [24]  666 	mov	_ADWRCR1,#0xf3
                                    667 ;	./inc/MC96F8316.h:153: sfr			ADWRCR2		= 0xF4;			// ADC Wake-up Resistor Control Register 2
      0000E1 75*4A F4         [24]  668 	mov	_ADWRCR2,#0xf4
                                    669 ;	./inc/MC96F8316.h:154: sfr			ADWRCR3		= 0xF5;			// ADC Wake-up Resistor Control Register 3
      0000E4 75*4B F5         [24]  670 	mov	_ADWRCR3,#0xf5
                                    671 ;	./inc/MC96F8316.h:155: sfr			ADWCRL		= 0xF6;			// ADC Wake-up Control Low Register
      0000E7 75*4C F6         [24]  672 	mov	_ADWCRL,#0xf6
                                    673 ;	./inc/MC96F8316.h:156: sfr			ADWCRH		= 0xF7;			// ADC Wake-up Control High Register
      0000EA 75*4D F7         [24]  674 	mov	_ADWCRH,#0xf7
                                    675 ;	./inc/MC96F8316.h:157: sfr			ADWIFRL		= 0xDC;			// ADC Wake-up Interrupt Flag Low Register
      0000ED 75*4E DC         [24]  676 	mov	_ADWIFRL,#0xdc
                                    677 ;	./inc/MC96F8316.h:158: sfr			ADWIFRH		= 0xDD;			// ADC Wake-up Interrupt Flag High Register
      0000F0 75*4F DD         [24]  678 	mov	_ADWIFRH,#0xdd
                                    679 ;	./inc/MC96F8316.h:161: sfr			SPICR		= 0xB5;			// SPI Control Register
      0000F3 75*50 B5         [24]  680 	mov	_SPICR,#0xb5
                                    681 ;	./inc/MC96F8316.h:162: sfr			SPIDR		= 0xB6;			// SPI Data Register
      0000F6 75*51 B6         [24]  682 	mov	_SPIDR,#0xb6
                                    683 ;	./inc/MC96F8316.h:163: sfr			SPISR		= 0xB7;			// SPI Status Register
      0000F9 75*52 B7         [24]  684 	mov	_SPISR,#0xb7
                                    685 ;	./inc/MC96F8316.h:166: sfr			UARTCR1		= 0xE2;			// UART Control Register 1
      0000FC 75*53 E2         [24]  686 	mov	_UARTCR1,#0xe2
                                    687 ;	./inc/MC96F8316.h:167: sfr			UARTCR2		= 0xE3;			// UART Control Register 2
      0000FF 75*54 E3         [24]  688 	mov	_UARTCR2,#0xe3
                                    689 ;	./inc/MC96F8316.h:168: sfr			UARTCR3		= 0xE4;			// UART Control Register 3
      000102 75*55 E4         [24]  690 	mov	_UARTCR3,#0xe4
                                    691 ;	./inc/MC96F8316.h:169: sfr			UARTST		= 0xE5;			// UART Status Register
      000105 75*56 E5         [24]  692 	mov	_UARTST,#0xe5
                                    693 ;	./inc/MC96F8316.h:170: sfr			UARTBD		= 0xE6;			// UART BaudRate Register
      000108 75*57 E6         [24]  694 	mov	_UARTBD,#0xe6
                                    695 ;	./inc/MC96F8316.h:171: sfr			UARTDR		= 0xE7;			// UART Data Register
      00010B 75*58 E7         [24]  696 	mov	_UARTDR,#0xe7
                                    697 ;	./inc/MC96F8316.h:174: sfr			I2CCR		= 0xE9;			// I2C Control Register
      00010E 75*59 E9         [24]  698 	mov	_I2CCR,#0xe9
                                    699 ;	./inc/MC96F8316.h:175: sfr			I2CSR		= 0xEA;			// I2C Status Register
      000111 75*5A EA         [24]  700 	mov	_I2CSR,#0xea
                                    701 ;	./inc/MC96F8316.h:176: sfr			I2CSAR0		= 0xEB;			// I2C Slave Address 0 Register
      000114 75*5B EB         [24]  702 	mov	_I2CSAR0,#0xeb
                                    703 ;	./inc/MC96F8316.h:177: sfr			I2CSAR1		= 0xF1;			// I2C Slave Address 1 Register
      000117 75*5C F1         [24]  704 	mov	_I2CSAR1,#0xf1
                                    705 ;	./inc/MC96F8316.h:178: sfr			I2CDR		= 0xEC;			// I2C Data Register
      00011A 75*5D EC         [24]  706 	mov	_I2CDR,#0xec
                                    707 ;	./inc/MC96F8316.h:179: sfr			I2CSDHR		= 0xED;			// I2C SDA Hold Time Register
      00011D 75*5E ED         [24]  708 	mov	_I2CSDHR,#0xed
                                    709 ;	./inc/MC96F8316.h:180: sfr			I2CSCLR		= 0xEE;			// I2C SCL Low Period Register
      000120 75*5F EE         [24]  710 	mov	_I2CSCLR,#0xee
                                    711 ;	./inc/MC96F8316.h:181: sfr			I2CSCHR		= 0xEF;			// I2C SCL High Period Register
      000123 75*60 EF         [24]  712 	mov	_I2CSCHR,#0xef
                                    713 ;	./inc/MC96F8316.h:184: sfr			FSADRH		= 0xFA;			// Flash Sector Address High Register
      000126 75*61 FA         [24]  714 	mov	_FSADRH,#0xfa
                                    715 ;	./inc/MC96F8316.h:185: sfr			FSADRM		= 0xFB;			// Flash Sector Address Middle Register
      000129 75*62 FB         [24]  716 	mov	_FSADRM,#0xfb
                                    717 ;	./inc/MC96F8316.h:186: sfr			FSADRL		= 0xFC;			// Flash Sector Address Low Register
      00012C 75*63 FC         [24]  718 	mov	_FSADRL,#0xfc
                                    719 ;	./inc/MC96F8316.h:187: sfr			FIDR		= 0xFD;			// Flash Identification Register
      00012F 75*64 FD         [24]  720 	mov	_FIDR,#0xfd
                                    721 ;	./inc/MC96F8316.h:188: sfr			FMCR		= 0xFE;			// Flash Mode Control Register
      000132 75*65 FE         [24]  722 	mov	_FMCR,#0xfe
                                    723 ;	./inc/MC96F8316.h:190: sfr			ACC			= 0xE0;
      000135 75*66 E0         [24]  724 	mov	_ACC,#0xe0
                                    725 ;	./inc/MC96F8316.h:191: sfr			B			= 0xF0;
      000138 75*67 F0         [24]  726 	mov	_B,#0xf0
                                    727 ;	./inc/MC96F8316.h:192: sfr			PSW			= 0xD0;
      00013B 75*68 D0         [24]  728 	mov	_PSW,#0xd0
                                    729 ;	./inc/MC96F8316.h:193: sfr			SP			= 0x81;
      00013E 75*69 81         [24]  730 	mov	_SP,#0x81
                                    731 ;	./inc/MC96F8316.h:194: sfr			DPL			= 0x82;
      000141 75*6A 82         [24]  732 	mov	_DPL,#0x82
                                    733 ;	./inc/MC96F8316.h:195: sfr			DPH			= 0x83;
      000144 75*6B 83         [24]  734 	mov	_DPH,#0x83
                                    735 ;	./inc/MC96F8316.h:196: sfr			DPL1		= 0x84;
      000147 75*6C 84         [24]  736 	mov	_DPL1,#0x84
                                    737 ;	./inc/MC96F8316.h:197: sfr			DPH1		= 0x85;
      00014A 75*6D 85         [24]  738 	mov	_DPH1,#0x85
                                    739 ;	./inc/MC96F8316.h:198: sfr			EO			= 0xA2;			// EXTENDED OPERATION REGISTER
      00014D 75*6E A2         [24]  740 	mov	_EO,#0xa2
                                    741 ;	./inc/MC96F8316.h:18: sbit	P00			= 0x80;
                                    742 ;	assignBit
      000150 D2*00            [12]  743 	setb	_P00
                                    744 ;	./inc/MC96F8316.h:19: sbit	P01			= 0x81;
                                    745 ;	assignBit
      000152 D2*01            [12]  746 	setb	_P01
                                    747 ;	./inc/MC96F8316.h:20: sbit	P02			= 0x82;
                                    748 ;	assignBit
      000154 D2*02            [12]  749 	setb	_P02
                                    750 ;	./inc/MC96F8316.h:21: sbit	P03			= 0x83;
                                    751 ;	assignBit
      000156 D2*03            [12]  752 	setb	_P03
                                    753 ;	./inc/MC96F8316.h:22: sbit	P04			= 0x84;
                                    754 ;	assignBit
      000158 D2*04            [12]  755 	setb	_P04
                                    756 ;	./inc/MC96F8316.h:23: sbit	P05			= 0x85;
                                    757 ;	assignBit
      00015A D2*05            [12]  758 	setb	_P05
                                    759 ;	./inc/MC96F8316.h:24: sbit	P06			= 0x86;
                                    760 ;	assignBit
      00015C D2*06            [12]  761 	setb	_P06
                                    762 ;	./inc/MC96F8316.h:25: sbit	P07			= 0x87;
                                    763 ;	assignBit
      00015E D2*07            [12]  764 	setb	_P07
                                    765 ;	./inc/MC96F8316.h:33: sbit	P10			= 0x88;
                                    766 ;	assignBit
      000160 D2*08            [12]  767 	setb	_P10
                                    768 ;	./inc/MC96F8316.h:34: sbit	P11			= 0x89;
                                    769 ;	assignBit
      000162 D2*09            [12]  770 	setb	_P11
                                    771 ;	./inc/MC96F8316.h:35: sbit	P12			= 0x8A;
                                    772 ;	assignBit
      000164 D2*0A            [12]  773 	setb	_P12
                                    774 ;	./inc/MC96F8316.h:36: sbit	P13			= 0x8B;
                                    775 ;	assignBit
      000166 D2*0B            [12]  776 	setb	_P13
                                    777 ;	./inc/MC96F8316.h:37: sbit	P14			= 0x8C;
                                    778 ;	assignBit
      000168 D2*0C            [12]  779 	setb	_P14
                                    780 ;	./inc/MC96F8316.h:38: sbit	P15			= 0x8D;
                                    781 ;	assignBit
      00016A D2*0D            [12]  782 	setb	_P15
                                    783 ;	./inc/MC96F8316.h:39: sbit	P16			= 0x8E;
                                    784 ;	assignBit
      00016C D2*0E            [12]  785 	setb	_P16
                                    786 ;	./inc/MC96F8316.h:40: sbit	P17			= 0x8F;
                                    787 ;	assignBit
      00016E D2*0F            [12]  788 	setb	_P17
                                    789 ;	./inc/MC96F8316.h:48: sbit	P20			= 0x90;
                                    790 ;	assignBit
      000170 D2*10            [12]  791 	setb	_P20
                                    792 ;	./inc/MC96F8316.h:49: sbit	P21			= 0x91;
                                    793 ;	assignBit
      000172 D2*11            [12]  794 	setb	_P21
                                    795 ;	./inc/MC96F8316.h:50: sbit	P22			= 0x92;
                                    796 ;	assignBit
      000174 D2*12            [12]  797 	setb	_P22
                                    798 ;	./inc/MC96F8316.h:51: sbit	P23			= 0x93;
                                    799 ;	assignBit
      000176 D2*13            [12]  800 	setb	_P23
                                    801 ;	./inc/MC96F8316.h:52: sbit	P24			= 0x94;
                                    802 ;	assignBit
      000178 D2*14            [12]  803 	setb	_P24
                                    804 ;	./inc/MC96F8316.h:53: sbit	P25			= 0x95;
                                    805 ;	assignBit
      00017A D2*15            [12]  806 	setb	_P25
                                    807 ;	./inc/MC96F8316.h:54: sbit	P26			= 0x96;
                                    808 ;	assignBit
      00017C D2*16            [12]  809 	setb	_P26
                                    810 ;	./inc/MC96F8316.h:55: sbit	P27			= 0x97;
                                    811 ;	assignBit
      00017E D2*17            [12]  812 	setb	_P27
                                    813 ;	./inc/MC96F8316.h:62: sbit	P30			= 0x98;
                                    814 ;	assignBit
      000180 D2*18            [12]  815 	setb	_P30
                                    816 ;	./inc/MC96F8316.h:63: sbit	P31			= 0x99;
                                    817 ;	assignBit
      000182 D2*19            [12]  818 	setb	_P31
                                    819 ;	./inc/MC96F8316.h:64: sbit	P32			= 0x9A;
                                    820 ;	assignBit
      000184 D2*1A            [12]  821 	setb	_P32
                                    822 ;	./inc/MC96F8316.h:65: sbit	P33			= 0x9B;
                                    823 ;	assignBit
      000186 D2*1B            [12]  824 	setb	_P33
                                    825 ;	./inc/MC96F8316.h:66: sbit	P34			= 0x9C;
                                    826 ;	assignBit
      000188 D2*1C            [12]  827 	setb	_P34
                                    828 ;	./inc/MC96F8316.h:67: sbit	P35			= 0x9D;
                                    829 ;	assignBit
      00018A D2*1D            [12]  830 	setb	_P35
                                    831 ;	./inc/MC96F8316.h:68: sbit	P36			= 0x9E;
                                    832 ;	assignBit
      00018C D2*1E            [12]  833 	setb	_P36
                                    834 ;	./inc/MC96F8316.h:69: sbit	P37			= 0x9F;
                                    835 ;	assignBit
      00018E D2*1F            [12]  836 	setb	_P37
                                    837 ;--------------------------------------------------------
                                    838 ; Home
                                    839 ;--------------------------------------------------------
                                    840 	.area HOME    (CODE)
                                    841 	.area HOME    (CODE)
                                    842 ;--------------------------------------------------------
                                    843 ; code
                                    844 ;--------------------------------------------------------
                                    845 	.area CSEG    (CODE)
                                    846 ;------------------------------------------------------------
                                    847 ;Allocation info for local variables in function 'UART_Config'
                                    848 ;------------------------------------------------------------
                                    849 ;UART_Conf                 Allocated to registers r5 r6 r7 
                                    850 ;------------------------------------------------------------
                                    851 ;	src/mc96f8x16_uart.c:9: void UART_Config(UARTConfig_Typedef *UART_Conf)
                                    852 ;	-----------------------------------------
                                    853 ;	 function UART_Config
                                    854 ;	-----------------------------------------
      000000                        855 _UART_Config:
                           000007   856 	ar7 = 0x07
                           000006   857 	ar6 = 0x06
                           000005   858 	ar5 = 0x05
                           000004   859 	ar4 = 0x04
                           000003   860 	ar3 = 0x03
                           000002   861 	ar2 = 0x02
                           000001   862 	ar1 = 0x01
                           000000   863 	ar0 = 0x00
                                    864 ;	src/mc96f8x16_uart.c:11: UARTBD = UART_Conf->Baud;
      000000 AD 82            [24]  865 	mov	r5,dpl
      000002 AE 83            [24]  866 	mov	r6,dph
      000004 AF F0            [24]  867 	mov	r7,b
      000006 12r00r00         [24]  868 	lcall	__gptrget
      000009 F5*57            [12]  869 	mov	_UARTBD,a
                                    870 ;	src/mc96f8x16_uart.c:12: UARTCR1 = (UARTCR1 & 0x0F) | ((UART_Conf->Parity) << 4u);
      00000B AB*53            [24]  871 	mov	r3,_UARTCR1
      00000D 53 03 0F         [24]  872 	anl	ar3,#0x0f
      000010 7C 00            [12]  873 	mov	r4,#0x00
      000012 74 01            [12]  874 	mov	a,#0x01
      000014 2D               [12]  875 	add	a,r5
      000015 F8               [12]  876 	mov	r0,a
      000016 E4               [12]  877 	clr	a
      000017 3E               [12]  878 	addc	a,r6
      000018 F9               [12]  879 	mov	r1,a
      000019 8F 02            [24]  880 	mov	ar2,r7
      00001B 88 82            [24]  881 	mov	dpl,r0
      00001D 89 83            [24]  882 	mov	dph,r1
      00001F 8A F0            [24]  883 	mov	b,r2
      000021 12r00r00         [24]  884 	lcall	__gptrget
      000024 C4               [12]  885 	swap	a
      000025 54 F0            [12]  886 	anl	a,#0xf0
      000027 7A 00            [12]  887 	mov	r2,#0x00
      000029 42 03            [12]  888 	orl	ar3,a
      00002B EA               [12]  889 	mov	a,r2
      00002C 42 04            [12]  890 	orl	ar4,a
      00002E 8B*53            [24]  891 	mov	_UARTCR1,r3
                                    892 ;	src/mc96f8x16_uart.c:13: UARTCR1 = (UARTCR1 & 0xF0) | ((UART_Conf->DataLength) << 1u);
      000030 AB*53            [24]  893 	mov	r3,_UARTCR1
      000032 53 03 F0         [24]  894 	anl	ar3,#0xf0
      000035 7C 00            [12]  895 	mov	r4,#0x00
      000037 74 02            [12]  896 	mov	a,#0x02
      000039 2D               [12]  897 	add	a,r5
      00003A F8               [12]  898 	mov	r0,a
      00003B E4               [12]  899 	clr	a
      00003C 3E               [12]  900 	addc	a,r6
      00003D F9               [12]  901 	mov	r1,a
      00003E 8F 02            [24]  902 	mov	ar2,r7
      000040 88 82            [24]  903 	mov	dpl,r0
      000042 89 83            [24]  904 	mov	dph,r1
      000044 8A F0            [24]  905 	mov	b,r2
      000046 12r00r00         [24]  906 	lcall	__gptrget
      000049 25 E0            [12]  907 	add	a,acc
      00004B 7A 00            [12]  908 	mov	r2,#0x00
      00004D 42 03            [12]  909 	orl	ar3,a
      00004F EA               [12]  910 	mov	a,r2
      000050 42 04            [12]  911 	orl	ar4,a
      000052 8B*53            [24]  912 	mov	_UARTCR1,r3
                                    913 ;	src/mc96f8x16_uart.c:14: UARTCR3 = (UARTCR3 & 0xF4) | (UART_Conf->StopBits);
      000054 AB*55            [24]  914 	mov	r3,_UARTCR3
      000056 53 03 F4         [24]  915 	anl	ar3,#0xf4
      000059 7C 00            [12]  916 	mov	r4,#0x00
      00005B 74 03            [12]  917 	mov	a,#0x03
      00005D 2D               [12]  918 	add	a,r5
      00005E FD               [12]  919 	mov	r5,a
      00005F E4               [12]  920 	clr	a
      000060 3E               [12]  921 	addc	a,r6
      000061 FE               [12]  922 	mov	r6,a
      000062 8D 82            [24]  923 	mov	dpl,r5
      000064 8E 83            [24]  924 	mov	dph,r6
      000066 8F F0            [24]  925 	mov	b,r7
      000068 12r00r00         [24]  926 	lcall	__gptrget
      00006B 7F 00            [12]  927 	mov	r7,#0x00
      00006D 42 03            [12]  928 	orl	ar3,a
      00006F EF               [12]  929 	mov	a,r7
      000070 42 04            [12]  930 	orl	ar4,a
      000072 8B*55            [24]  931 	mov	_UARTCR3,r3
                                    932 ;	src/mc96f8x16_uart.c:15: UARTCR2 = (UARTCR2 & 0xD1) | (UARTCR2_RXE | UARTCR2_RXCIE | UARTCR2_TXE | UARTCR2_UARTEN);
      000074 AE*54            [24]  933 	mov	r6,_UARTCR2
      000076 53 06 D1         [24]  934 	anl	ar6,#0xd1
      000079 43 06 2E         [24]  935 	orl	ar6,#0x2e
      00007C 8E*54            [24]  936 	mov	_UARTCR2,r6
                                    937 ;	src/mc96f8x16_uart.c:16: IE1 = (IE1 & 0xF7) | (0x08);
      00007E AE*18            [24]  938 	mov	r6,_IE1
      000080 53 06 F7         [24]  939 	anl	ar6,#0xf7
      000083 43 06 08         [24]  940 	orl	ar6,#0x08
      000086 8E*18            [24]  941 	mov	_IE1,r6
                                    942 ;	src/mc96f8x16_uart.c:17: }
      000088 22               [24]  943 	ret
                                    944 ;------------------------------------------------------------
                                    945 ;Allocation info for local variables in function 'UART_Transmit'
                                    946 ;------------------------------------------------------------
                                    947 ;Size                      Allocated to stack - _bp -4
                                    948 ;Timeout                   Allocated to stack - _bp -6
                                    949 ;Buffer                    Allocated to stack - _bp +1
                                    950 ;i                         Allocated to stack - _bp +4
                                    951 ;StartTick                 Allocated to registers r3 r4 
                                    952 ;------------------------------------------------------------
                                    953 ;	src/mc96f8x16_uart.c:19: HAL_Status UART_Transmit(uint8_t *Buffer, uint16_t Size, uint16_t Timeout)
                                    954 ;	-----------------------------------------
                                    955 ;	 function UART_Transmit
                                    956 ;	-----------------------------------------
      000089                        957 _UART_Transmit:
      000089 C0*00            [24]  958 	push	_bp
      00008B 85 81*00         [24]  959 	mov	_bp,sp
      00008E C0 82            [24]  960 	push	dpl
      000090 C0 83            [24]  961 	push	dph
      000092 C0 F0            [24]  962 	push	b
      000094 05 81            [12]  963 	inc	sp
      000096 05 81            [12]  964 	inc	sp
                                    965 ;	src/mc96f8x16_uart.c:22: uint16_t StartTick = GetTick();
      000098 12r00r00         [24]  966 	lcall	_GetTick
      00009B AB 82            [24]  967 	mov	r3,dpl
      00009D AC 83            [24]  968 	mov	r4,dph
                                    969 ;	src/mc96f8x16_uart.c:23: while(Size--)
      00009F E5*00            [12]  970 	mov	a,_bp
      0000A1 24 04            [12]  971 	add	a,#0x04
      0000A3 F8               [12]  972 	mov	r0,a
      0000A4 E4               [12]  973 	clr	a
      0000A5 F6               [12]  974 	mov	@r0,a
      0000A6 08               [12]  975 	inc	r0
      0000A7 F6               [12]  976 	mov	@r0,a
      0000A8 E5*00            [12]  977 	mov	a,_bp
      0000AA 24 FC            [12]  978 	add	a,#0xfc
      0000AC F8               [12]  979 	mov	r0,a
      0000AD 86 05            [24]  980 	mov	ar5,@r0
      0000AF 08               [12]  981 	inc	r0
      0000B0 86 06            [24]  982 	mov	ar6,@r0
      0000B2                        983 00109$:
      0000B2 8D 02            [24]  984 	mov	ar2,r5
      0000B4 8E 07            [24]  985 	mov	ar7,r6
      0000B6 1D               [12]  986 	dec	r5
      0000B7 BD FF 01         [24]  987 	cjne	r5,#0xff,00134$
      0000BA 1E               [12]  988 	dec	r6
      0000BB                        989 00134$:
      0000BB EA               [12]  990 	mov	a,r2
      0000BC 4F               [12]  991 	orl	a,r7
      0000BD 70 03            [24]  992 	jnz	00135$
      0000BF 02r01r5F         [24]  993 	ljmp	00111$
      0000C2                        994 00135$:
                                    995 ;	src/mc96f8x16_uart.c:25: if(CheckTimeout(StartTick, Timeout) == HAL_OK)
      0000C2 C0 06            [24]  996 	push	ar6
      0000C4 C0 05            [24]  997 	push	ar5
      0000C6 C0 04            [24]  998 	push	ar4
      0000C8 C0 03            [24]  999 	push	ar3
      0000CA E5*00            [12] 1000 	mov	a,_bp
      0000CC 24 FA            [12] 1001 	add	a,#0xfa
      0000CE F8               [12] 1002 	mov	r0,a
      0000CF E6               [12] 1003 	mov	a,@r0
      0000D0 C0 E0            [24] 1004 	push	acc
      0000D2 08               [12] 1005 	inc	r0
      0000D3 E6               [12] 1006 	mov	a,@r0
      0000D4 C0 E0            [24] 1007 	push	acc
      0000D6 8B 82            [24] 1008 	mov	dpl,r3
      0000D8 8C 83            [24] 1009 	mov	dph,r4
      0000DA 12r00r00         [24] 1010 	lcall	_CheckTimeout
      0000DD AF 82            [24] 1011 	mov	r7,dpl
      0000DF 15 81            [12] 1012 	dec	sp
      0000E1 15 81            [12] 1013 	dec	sp
      0000E3 D0 03            [24] 1014 	pop	ar3
      0000E5 D0 04            [24] 1015 	pop	ar4
      0000E7 D0 05            [24] 1016 	pop	ar5
      0000E9 D0 06            [24] 1017 	pop	ar6
      0000EB BF 01 6C         [24] 1018 	cjne	r7,#0x01,00107$
                                   1019 ;	src/mc96f8x16_uart.c:27: while(!(UARTST & UARTST_UDRE))
      0000EE                       1020 00103$:
      0000EE E5*56            [12] 1021 	mov	a,_UARTST
      0000F0 20 E7 33         [24] 1022 	jb	acc.7,00105$
                                   1023 ;	src/mc96f8x16_uart.c:29: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0000F3 C0 06            [24] 1024 	push	ar6
      0000F5 C0 05            [24] 1025 	push	ar5
      0000F7 C0 04            [24] 1026 	push	ar4
      0000F9 C0 03            [24] 1027 	push	ar3
      0000FB E5*00            [12] 1028 	mov	a,_bp
      0000FD 24 FA            [12] 1029 	add	a,#0xfa
      0000FF F8               [12] 1030 	mov	r0,a
      000100 E6               [12] 1031 	mov	a,@r0
      000101 C0 E0            [24] 1032 	push	acc
      000103 08               [12] 1033 	inc	r0
      000104 E6               [12] 1034 	mov	a,@r0
      000105 C0 E0            [24] 1035 	push	acc
      000107 8B 82            [24] 1036 	mov	dpl,r3
      000109 8C 83            [24] 1037 	mov	dph,r4
      00010B 12r00r00         [24] 1038 	lcall	_CheckTimeout
      00010E AF 82            [24] 1039 	mov	r7,dpl
      000110 15 81            [12] 1040 	dec	sp
      000112 15 81            [12] 1041 	dec	sp
      000114 D0 03            [24] 1042 	pop	ar3
      000116 D0 04            [24] 1043 	pop	ar4
      000118 D0 05            [24] 1044 	pop	ar5
      00011A D0 06            [24] 1045 	pop	ar6
      00011C BF 01 02         [24] 1046 	cjne	r7,#0x01,00139$
      00011F 80 CD            [24] 1047 	sjmp	00103$
      000121                       1048 00139$:
                                   1049 ;	src/mc96f8x16_uart.c:31: return HAL_TIMEOUT;
      000121 75 82 02         [24] 1050 	mov	dpl,#0x02
      000124 80 3C            [24] 1051 	sjmp	00112$
      000126                       1052 00105$:
                                   1053 ;	src/mc96f8x16_uart.c:34: UARTDR = *(Buffer + i);
      000126 C0 05            [24] 1054 	push	ar5
      000128 C0 06            [24] 1055 	push	ar6
      00012A A8*00            [24] 1056 	mov	r0,_bp
      00012C 08               [12] 1057 	inc	r0
      00012D E5*00            [12] 1058 	mov	a,_bp
      00012F 24 04            [12] 1059 	add	a,#0x04
      000131 F9               [12] 1060 	mov	r1,a
      000132 E7               [12] 1061 	mov	a,@r1
      000133 26               [12] 1062 	add	a,@r0
      000134 FA               [12] 1063 	mov	r2,a
      000135 09               [12] 1064 	inc	r1
      000136 E7               [12] 1065 	mov	a,@r1
      000137 08               [12] 1066 	inc	r0
      000138 36               [12] 1067 	addc	a,@r0
      000139 FE               [12] 1068 	mov	r6,a
      00013A 08               [12] 1069 	inc	r0
      00013B 86 07            [24] 1070 	mov	ar7,@r0
      00013D 8A 82            [24] 1071 	mov	dpl,r2
      00013F 8E 83            [24] 1072 	mov	dph,r6
      000141 8F F0            [24] 1073 	mov	b,r7
      000143 12r00r00         [24] 1074 	lcall	__gptrget
      000146 F5*58            [12] 1075 	mov	_UARTDR,a
                                   1076 ;	src/mc96f8x16_uart.c:35: i++;
      000148 E5*00            [12] 1077 	mov	a,_bp
      00014A 24 04            [12] 1078 	add	a,#0x04
      00014C F8               [12] 1079 	mov	r0,a
      00014D 06               [12] 1080 	inc	@r0
      00014E B6 00 02         [24] 1081 	cjne	@r0,#0x00,00140$
      000151 08               [12] 1082 	inc	r0
      000152 06               [12] 1083 	inc	@r0
      000153                       1084 00140$:
      000153 D0 06            [24] 1085 	pop	ar6
      000155 D0 05            [24] 1086 	pop	ar5
      000157 02r00rB2         [24] 1087 	ljmp	00109$
      00015A                       1088 00107$:
                                   1089 ;	src/mc96f8x16_uart.c:39: return HAL_TIMEOUT;
      00015A 75 82 02         [24] 1090 	mov	dpl,#0x02
      00015D 80 03            [24] 1091 	sjmp	00112$
      00015F                       1092 00111$:
                                   1093 ;	src/mc96f8x16_uart.c:42: return HAL_OK;
      00015F 75 82 01         [24] 1094 	mov	dpl,#0x01
      000162                       1095 00112$:
                                   1096 ;	src/mc96f8x16_uart.c:43: }
      000162 85*00 81         [24] 1097 	mov	sp,_bp
      000165 D0*00            [24] 1098 	pop	_bp
      000167 22               [24] 1099 	ret
                                   1100 ;------------------------------------------------------------
                                   1101 ;Allocation info for local variables in function 'UART_Receive'
                                   1102 ;------------------------------------------------------------
                                   1103 ;Size                      Allocated to stack - _bp -4
                                   1104 ;Timeout                   Allocated to stack - _bp -6
                                   1105 ;Buffer                    Allocated to stack - _bp +1
                                   1106 ;i                         Allocated to stack - _bp +4
                                   1107 ;StartTick                 Allocated to registers r3 r4 
                                   1108 ;------------------------------------------------------------
                                   1109 ;	src/mc96f8x16_uart.c:45: HAL_Status UART_Receive(uint8_t *Buffer, uint16_t Size, uint16_t Timeout)
                                   1110 ;	-----------------------------------------
                                   1111 ;	 function UART_Receive
                                   1112 ;	-----------------------------------------
      000168                       1113 _UART_Receive:
      000168 C0*00            [24] 1114 	push	_bp
      00016A 85 81*00         [24] 1115 	mov	_bp,sp
      00016D C0 82            [24] 1116 	push	dpl
      00016F C0 83            [24] 1117 	push	dph
      000171 C0 F0            [24] 1118 	push	b
      000173 05 81            [12] 1119 	inc	sp
      000175 05 81            [12] 1120 	inc	sp
                                   1121 ;	src/mc96f8x16_uart.c:48: uint16_t StartTick = GetTick();
      000177 12r00r00         [24] 1122 	lcall	_GetTick
      00017A AB 82            [24] 1123 	mov	r3,dpl
      00017C AC 83            [24] 1124 	mov	r4,dph
                                   1125 ;	src/mc96f8x16_uart.c:49: while(Size--)
      00017E E5*00            [12] 1126 	mov	a,_bp
      000180 24 04            [12] 1127 	add	a,#0x04
      000182 F8               [12] 1128 	mov	r0,a
      000183 E4               [12] 1129 	clr	a
      000184 F6               [12] 1130 	mov	@r0,a
      000185 08               [12] 1131 	inc	r0
      000186 F6               [12] 1132 	mov	@r0,a
      000187 E5*00            [12] 1133 	mov	a,_bp
      000189 24 FC            [12] 1134 	add	a,#0xfc
      00018B F8               [12] 1135 	mov	r0,a
      00018C 86 05            [24] 1136 	mov	ar5,@r0
      00018E 08               [12] 1137 	inc	r0
      00018F 86 06            [24] 1138 	mov	ar6,@r0
      000191                       1139 00109$:
      000191 8D 02            [24] 1140 	mov	ar2,r5
      000193 8E 07            [24] 1141 	mov	ar7,r6
      000195 1D               [12] 1142 	dec	r5
      000196 BD FF 01         [24] 1143 	cjne	r5,#0xff,00134$
      000199 1E               [12] 1144 	dec	r6
      00019A                       1145 00134$:
      00019A EA               [12] 1146 	mov	a,r2
      00019B 4F               [12] 1147 	orl	a,r7
      00019C 70 03            [24] 1148 	jnz	00135$
      00019E 02r02r3E         [24] 1149 	ljmp	00111$
      0001A1                       1150 00135$:
                                   1151 ;	src/mc96f8x16_uart.c:51: if(CheckTimeout(StartTick, Timeout) == HAL_OK)
      0001A1 C0 06            [24] 1152 	push	ar6
      0001A3 C0 05            [24] 1153 	push	ar5
      0001A5 C0 04            [24] 1154 	push	ar4
      0001A7 C0 03            [24] 1155 	push	ar3
      0001A9 E5*00            [12] 1156 	mov	a,_bp
      0001AB 24 FA            [12] 1157 	add	a,#0xfa
      0001AD F8               [12] 1158 	mov	r0,a
      0001AE E6               [12] 1159 	mov	a,@r0
      0001AF C0 E0            [24] 1160 	push	acc
      0001B1 08               [12] 1161 	inc	r0
      0001B2 E6               [12] 1162 	mov	a,@r0
      0001B3 C0 E0            [24] 1163 	push	acc
      0001B5 8B 82            [24] 1164 	mov	dpl,r3
      0001B7 8C 83            [24] 1165 	mov	dph,r4
      0001B9 12r00r00         [24] 1166 	lcall	_CheckTimeout
      0001BC AF 82            [24] 1167 	mov	r7,dpl
      0001BE 15 81            [12] 1168 	dec	sp
      0001C0 15 81            [12] 1169 	dec	sp
      0001C2 D0 03            [24] 1170 	pop	ar3
      0001C4 D0 04            [24] 1171 	pop	ar4
      0001C6 D0 05            [24] 1172 	pop	ar5
      0001C8 D0 06            [24] 1173 	pop	ar6
      0001CA BF 01 6C         [24] 1174 	cjne	r7,#0x01,00107$
                                   1175 ;	src/mc96f8x16_uart.c:53: while(!(UARTST & UARTST_RXC))
      0001CD                       1176 00103$:
      0001CD E5*56            [12] 1177 	mov	a,_UARTST
      0001CF 20 E5 33         [24] 1178 	jb	acc.5,00105$
                                   1179 ;	src/mc96f8x16_uart.c:55: if(CheckTimeout(StartTick, Timeout) != HAL_OK)
      0001D2 C0 06            [24] 1180 	push	ar6
      0001D4 C0 05            [24] 1181 	push	ar5
      0001D6 C0 04            [24] 1182 	push	ar4
      0001D8 C0 03            [24] 1183 	push	ar3
      0001DA E5*00            [12] 1184 	mov	a,_bp
      0001DC 24 FA            [12] 1185 	add	a,#0xfa
      0001DE F8               [12] 1186 	mov	r0,a
      0001DF E6               [12] 1187 	mov	a,@r0
      0001E0 C0 E0            [24] 1188 	push	acc
      0001E2 08               [12] 1189 	inc	r0
      0001E3 E6               [12] 1190 	mov	a,@r0
      0001E4 C0 E0            [24] 1191 	push	acc
      0001E6 8B 82            [24] 1192 	mov	dpl,r3
      0001E8 8C 83            [24] 1193 	mov	dph,r4
      0001EA 12r00r00         [24] 1194 	lcall	_CheckTimeout
      0001ED AF 82            [24] 1195 	mov	r7,dpl
      0001EF 15 81            [12] 1196 	dec	sp
      0001F1 15 81            [12] 1197 	dec	sp
      0001F3 D0 03            [24] 1198 	pop	ar3
      0001F5 D0 04            [24] 1199 	pop	ar4
      0001F7 D0 05            [24] 1200 	pop	ar5
      0001F9 D0 06            [24] 1201 	pop	ar6
      0001FB BF 01 02         [24] 1202 	cjne	r7,#0x01,00139$
      0001FE 80 CD            [24] 1203 	sjmp	00103$
      000200                       1204 00139$:
                                   1205 ;	src/mc96f8x16_uart.c:57: return HAL_TIMEOUT;
      000200 75 82 02         [24] 1206 	mov	dpl,#0x02
      000203 80 3C            [24] 1207 	sjmp	00112$
      000205                       1208 00105$:
                                   1209 ;	src/mc96f8x16_uart.c:60: *(Buffer + i) = UARTDR;
      000205 C0 05            [24] 1210 	push	ar5
      000207 C0 06            [24] 1211 	push	ar6
      000209 A8*00            [24] 1212 	mov	r0,_bp
      00020B 08               [12] 1213 	inc	r0
      00020C E5*00            [12] 1214 	mov	a,_bp
      00020E 24 04            [12] 1215 	add	a,#0x04
      000210 F9               [12] 1216 	mov	r1,a
      000211 E7               [12] 1217 	mov	a,@r1
      000212 26               [12] 1218 	add	a,@r0
      000213 FA               [12] 1219 	mov	r2,a
      000214 09               [12] 1220 	inc	r1
      000215 E7               [12] 1221 	mov	a,@r1
      000216 08               [12] 1222 	inc	r0
      000217 36               [12] 1223 	addc	a,@r0
      000218 FE               [12] 1224 	mov	r6,a
      000219 08               [12] 1225 	inc	r0
      00021A 86 07            [24] 1226 	mov	ar7,@r0
      00021C 8A 82            [24] 1227 	mov	dpl,r2
      00021E 8E 83            [24] 1228 	mov	dph,r6
      000220 8F F0            [24] 1229 	mov	b,r7
      000222 E5*58            [12] 1230 	mov	a,_UARTDR
      000224 12r00r00         [24] 1231 	lcall	__gptrput
                                   1232 ;	src/mc96f8x16_uart.c:61: i++;
      000227 E5*00            [12] 1233 	mov	a,_bp
      000229 24 04            [12] 1234 	add	a,#0x04
      00022B F8               [12] 1235 	mov	r0,a
      00022C 06               [12] 1236 	inc	@r0
      00022D B6 00 02         [24] 1237 	cjne	@r0,#0x00,00140$
      000230 08               [12] 1238 	inc	r0
      000231 06               [12] 1239 	inc	@r0
      000232                       1240 00140$:
      000232 D0 06            [24] 1241 	pop	ar6
      000234 D0 05            [24] 1242 	pop	ar5
      000236 02r01r91         [24] 1243 	ljmp	00109$
      000239                       1244 00107$:
                                   1245 ;	src/mc96f8x16_uart.c:65: return HAL_TIMEOUT;
      000239 75 82 02         [24] 1246 	mov	dpl,#0x02
      00023C 80 03            [24] 1247 	sjmp	00112$
      00023E                       1248 00111$:
                                   1249 ;	src/mc96f8x16_uart.c:68: return HAL_OK;
      00023E 75 82 01         [24] 1250 	mov	dpl,#0x01
      000241                       1251 00112$:
                                   1252 ;	src/mc96f8x16_uart.c:69: }
      000241 85*00 81         [24] 1253 	mov	sp,_bp
      000244 D0*00            [24] 1254 	pop	_bp
      000246 22               [24] 1255 	ret
                                   1256 ;------------------------------------------------------------
                                   1257 ;Allocation info for local variables in function 'UART_Receive_ISR'
                                   1258 ;------------------------------------------------------------
                                   1259 ;	src/mc96f8x16_uart.c:71: void UART_Receive_ISR(void) __interrupt 10
                                   1260 ;	-----------------------------------------
                                   1261 ;	 function UART_Receive_ISR
                                   1262 ;	-----------------------------------------
      000247                       1263 _UART_Receive_ISR:
                                   1264 ;	src/mc96f8x16_uart.c:73: RxData = UARTDR;
      000247 85*58*00         [24] 1265 	mov	_RxData,_UARTDR
                                   1266 ;	src/mc96f8x16_uart.c:74: }
      00024A 32               [24] 1267 	reti
                                   1268 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1269 ;	eliminated unneeded push/pop psw
                                   1270 ;	eliminated unneeded push/pop dpl
                                   1271 ;	eliminated unneeded push/pop dph
                                   1272 ;	eliminated unneeded push/pop b
                                   1273 ;	eliminated unneeded push/pop acc
                                   1274 	.area CSEG    (CODE)
                                   1275 	.area CONST   (CODE)
                                   1276 	.area XINIT   (CODE)
                                   1277 	.area CABS    (ABS,CODE)
